<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>System.Reactive.Core</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.PlatformServices.NamespaceDoc">
            <summary><b>System.Reactive.PlatformServices</b> 名前空間には、Reactive Extensions のランタイム インフラストラクチャで使用されるインターフェイスとクラスが含まれています。  これらはユーザー コードから直接使用することを意図したものではなく、製品の将来のリリースで変更される可能性があります。</summary>
        </member>
        <member name="T:System.ObservableExtensions">
            <summary>監視可能なデリゲートをサブスクライブするための一連の静的メソッドを提供します。</summary>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0})">
            <summary>ハンドラーを指定せずに監視可能なシーケンスをサブスクライブします。このメソッドを使用して、その副作用の監視可能なシーケンスのみを評価できます。</summary>
            <typeparam name="T">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">サブスクライブする監視可能なシーケンス。</param>
            <returns>監視可能なシーケンスのサブスクライブを解除するために使用される IDisposable オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> は null です。</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0})">
            <summary>要素ハンドラーを監視可能なシーケンスにサブスクライブします。</summary>
            <typeparam name="T">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">サブスクライブする監視可能なシーケンス。</param>
            <param name="onNext">監視可能なシーケンス内の各要素に対して呼び出すアクション。</param>
            <returns>監視可能なシーケンスのサブスクライブを解除するために使用される IDisposable オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="onNext"/> は null です。</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>要素ハンドラーと例外ハンドラーを監視可能なシーケンスにサブスクライブします。</summary>
            <typeparam name="T">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">サブスクライブする監視可能なシーケンス。</param>
            <param name="onNext">監視可能なシーケンス内の各要素に対して呼び出すアクション。</param>
            <param name="onError">監視可能なシーケンスの例外的な終了時に呼び出すアクション。</param>
            <returns>監視可能なシーケンスのサブスクライブを解除するために使用される IDisposable オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="onNext"/>、あるいは <paramref name="onError"/> は null です。 </exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action)">
            <summary>要素ハンドラーと完了ハンドラーを監視可能なシーケンスにサブスクライブします。</summary>
            <typeparam name="T">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">サブスクライブする監視可能なシーケンス。</param>
            <param name="onNext">監視可能なシーケンス内の各要素に対して呼び出すアクション。</param>
            <param name="onCompleted">監視可能なシーケンスの正常な終了時に呼び出すアクション。</param>
            <returns>監視可能なシーケンスのサブスクライブを解除するために使用される IDisposable オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="onNext"/>、あるいは <paramref name="onCompleted"/> は null です。</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>要素ハンドラー、例外ハンドラー、および完了ハンドラーを監視可能なシーケンスにサブスクライブします。</summary>
            <typeparam name="T">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">サブスクライブする監視可能なシーケンス。</param>
            <param name="onNext">監視可能なシーケンス内の各要素に対して呼び出すアクション。</param>
            <param name="onError">監視可能なシーケンスの例外的な終了時に呼び出すアクション。</param>
            <param name="onCompleted">監視可能なシーケンスの正常な終了時に呼び出すアクション。</param>
            <returns>監視可能なシーケンスのサブスクライブを解除するために使用される IDisposable オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="onNext"/>、<paramref name="onError"/>、<paramref name="onCompleted"/> は null です。  </exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.IObserver{``0},System.Threading.CancellationToken)">
            <summary>CancellationToken を使用してサブスクライブ解除をサポートし、監視可能なシーケンスにオブザーバーをサブスクライブします。</summary>
            <typeparam name="T">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">サブスクライブする監視可能なシーケンス。</param>
            <param name="observer">シーケンスにサブスクライブするオブザーバー。</param>
            <param name="token">ソース シーケンスからのサブスクライブ解除を通知できる CancellationToken。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="observer"/> は null です。</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Threading.CancellationToken)">
            <summary>CancellationToken を使用してサブスクライブ解除をサポートし、取り消し可能なシーケンスを指定せずに監視可能なシーケンスにサブスクライブします。このメソッドを使用して、その副作用の監視可能なシーケンスのみを評価できます。</summary>
            <typeparam name="T">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">サブスクライブする監視可能なシーケンス。</param>
            <param name="token">ソース シーケンスからのサブスクライブ解除を通知できる CancellationToken。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> は null です。</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>CancellationToken を使用してサブスクライブ解除をサポートし、監視可能なシーケンスに要素ハンドラーをサブスクライブします。</summary>
            <typeparam name="T">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">サブスクライブする監視可能なシーケンス。</param>
            <param name="onNext">監視可能なシーケンス内の各要素に対して呼び出すアクション。</param>
            <param name="token">ソース シーケンスからのサブスクライブ解除を通知できる CancellationToken。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="onNext"/> は null です。</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Threading.CancellationToken)">
            <summary>CancellationToken を使用してサブスクライブ解除をサポートし、要素ハンドラーと例外ハンドラーを監視可能なシーケンスにサブスクライブします。</summary>
            <typeparam name="T">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">サブスクライブする監視可能なシーケンス。</param>
            <param name="onNext">監視可能なシーケンス内の各要素に対して呼び出すアクション。</param>
            <param name="onError">監視可能なシーケンスの例外的な終了時に呼び出すアクション。</param>
            <param name="token">ソース シーケンスからのサブスクライブ解除を通知できる CancellationToken。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="onNext"/>、あるいは <paramref name="onError"/> は null です。</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action,System.Threading.CancellationToken)">
            <summary>CancellationToken を使用してサブスクライブ解除をサポートし、要素ハンドラーと完了ハンドラーを監視可能なシーケンスにサブスクライブします。</summary>
            <typeparam name="T">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">サブスクライブする監視可能なシーケンス。</param>
            <param name="onNext">監視可能なシーケンス内の各要素に対して呼び出すアクション。</param>
            <param name="onCompleted">監視可能なシーケンスの正常な終了時に呼び出すアクション。</param>
            <param name="token">ソース シーケンスからのサブスクライブ解除を通知できる CancellationToken。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="onNext"/>、あるいは <paramref name="onCompleted"/> は null です。</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,System.Threading.CancellationToken)">
            <summary>CancellationToken を使用してサブスクライブ解除をサポートし、要素ハンドラー、例外ハンドラー、および完了ハンドラーを監視可能なシーケンスにサブスクライブします。</summary>
            <typeparam name="T">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">サブスクライブする監視可能なシーケンス。</param>
            <param name="onNext">監視可能なシーケンス内の各要素に対して呼び出すアクション。</param>
            <param name="onError">監視可能なシーケンスの例外的な終了時に呼び出すアクション。</param>
            <param name="onCompleted">監視可能なシーケンスの正常な終了時に呼び出すアクション。</param>
            <param name="token">ソース シーケンスからのサブスクライブ解除を通知できる CancellationToken。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="onNext"/>、<paramref name="onError"/>、<paramref name="onCompleted"/> は null です。</exception>
        </member>
        <member name="M:System.ObservableExtensions.SubscribeSafe``1(System.IObservable{``0},System.IObserver{``0})">
            <summary>指定されたソースをサブスクライブし、Subscribe メソッドの呼び出し中に同期例外をオブザーバーの OnError チャネルに再ルーティングします。このメソッドは通常、クエリ演算子の書き込みで使用されます。</summary>
            <typeparam name="T">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">サブスクライブする監視可能なシーケンス。</param>
            <param name="observer">監視可能なシーケンスに渡され、例外の伝達に使用されるオブザーバー。</param>
            <returns>監視可能なシーケンスのサブスクライブを解除するために使用される IDisposable オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="observer"/> は null です。</exception>
        </member>
        <member name="T:System.Reactive.Observer">
            <summary>オブザーバーを作成するための一連の静的メソッドを提供します。</summary>
        </member>
        <member name="M:System.Reactive.Observer.ToObserver``1(System.Action{System.Reactive.Notification{``0}})">
            <summary>通知コールバックからオブザーバーを作成します。</summary>
            <typeparam name="T">オブザーバーが受け取る要素のタイプ。</typeparam>
            <param name="handler">通知を処理するアクション。</param>
            <returns>受信する各メッセージに対応する通知を使用して、指定されたハンドラーを呼び出すオブザーバー オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.ToNotifier``1(System.IObserver{``0})">
            <summary>オブザーバーからの通知コールバックを作成します。</summary>
            <typeparam name="T">オブザーバーが受け取る要素のタイプ。</typeparam>
            <param name="observer">オブザーバー オブジェクト。</param>
            <returns>入力通知を基になるオブザーバーに転送するアクション。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.Create``1(System.Action{``0})">
            <summary>指定された OnNext アクションからオブザーバーを作成します。</summary>
            <typeparam name="T">オブザーバーが受け取る要素のタイプ。</typeparam>
            <param name="onNext">オブザーバーの OnNext アクションの実装。</param>
            <returns>指定されたアクションを使用して実装されるオブザーバー オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception})">
            <summary>指定された OnNext アクションと OnError アクションからオブザーバーを作成します。</summary>
            <typeparam name="T">オブザーバーが受け取る要素のタイプ。</typeparam>
            <param name="onNext">オブザーバーの OnNext アクションの実装。</param>
            <param name="onError">オブザーバーの OnError アクションの実装。</param>
            <returns>指定されたアクションを使用して実装されるオブザーバー オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> または <paramref name="onError"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action)">
            <summary>指定された OnNext アクションと OnCompleted アクションからオブザーバーを作成します。</summary>
            <typeparam name="T">オブザーバーが受け取る要素のタイプ。</typeparam>
            <param name="onNext">オブザーバーの OnNext アクションの実装。</param>
            <param name="onCompleted">オブザーバーの OnCompleted アクション実装。</param>
            <returns>指定されたアクションを使用して実装されるオブザーバー オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> または <paramref name="onCompleted"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>指定された OnNext アクション、OnError アクション、および OnCompleted アクションからオブザーバーを作成します。</summary>
            <typeparam name="T">オブザーバーが受け取る要素のタイプ。</typeparam>
            <param name="onNext">オブザーバーの OnNext アクションの実装。</param>
            <param name="onError">オブザーバーの OnError アクションの実装。</param>
            <param name="onCompleted">オブザーバーの OnCompleted アクション実装。</param>
            <returns>指定されたアクションを使用して実装されるオブザーバー オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> または <paramref name="onError"/>、あるいは <paramref name="onCompleted"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.AsObserver``1(System.IObserver{``0})">
            <summary>オブザーバーの ID を非表示にします。</summary>
            <typeparam name="T">ソース オブザーバーが受信した要素のタイプ。</typeparam>
            <param name="observer">非表示にするアイデンティティのあるオブザーバー。</param>
            <returns>指定されたオブザーバーの ID を非表示にするオブザーバー。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.Checked``1(System.IObserver{``0})">
            <summary>オブザーバーへのアクセスをチェックして文法違反を確認します。これには、複数の OnError または OnCompleted 呼び出しのチェックと、いずれかのオブザーバー メソッドでの再入が含まれます。違反が検出されると、問題のあるオブザーバー メソッド呼び出しから InvalidOperationException がスローされます。</summary>
            <typeparam name="T">ソース オブザーバーが受信した要素のタイプ。</typeparam>
            <param name="observer">文法違反がないかコールバック呼び出しをチェックする必要があるオブザーバー。</param>
            <returns>オブザーバー文法に対してコールバック呼び出しをチェックするオブザーバー。チェックに合格した場合は、指定されたオブザーバーにコールバックを転送します。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0})">
            <summary>複数のスレッドからコールバック メソッドを同時に呼び出すことができないオブザーバーへのアクセスを同期します。このオーバーロードは、オブザーバーへのアクセスを調整する場合に便利です。同じスレッド上で再入可能なオブザーバー コールバックは引き続き可能です。</summary>
            <typeparam name="T">ソース オブザーバーが受信した要素のタイプ。</typeparam>
            <param name="observer">コールバックを同期する必要があるオブザーバー。</param>
            <returns>同期された方法で指定されたオブザーバーにコールバックを配信するオブザーバー。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> は null です。</exception>
            <remarks><see cref="T:System.Threading.Monitor">モニター</see>は同期の実行に使用されるため、同じスレッドからの再入に対する保護はありません。  したがって、オーバーラップしたオブザーバー コールバックは引き続き可能で、オブザーバー文法に従って無効な動作です。この動作から保護するには、<see cref="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Boolean)"/>オーバーロードを使用して、2 番目のパラメーターに true を渡します。</remarks>
        </member>
        <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Boolean)">
            <summary>コールバック メソッドを同時に呼び出すことができないオブザーバーへのアクセスを同期します。このオーバーロードは、オブザーバーへのアクセスを調整する場合に便利です。この <paramref name="preventReentrancy"/> パラメーターは、同期に使用されるロックのタイプを構成します。</summary>
            <typeparam name="T">ソース オブザーバーが受信した要素のタイプ。</typeparam>
            <param name="observer">コールバックを同期する必要があるオブザーバー。</param>
            <param name="preventReentrancy">true に設定すると、再入可能なオブザーバー コールバックがキューに入れられ、順次オブザーバーに配信されます。</param>
            <returns>同期された方法で指定されたオブザーバーにコールバックを配信するオブザーバー。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> は null です。</exception>
            <remarks><paramref name="preventReentrancy"/> パラメーターが false に設定されている場合、動作は同期に<see cref="T:System.Threading.Monitor">モニター</see>を使用する <see cref="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0})"/> オーバーロードと同じです。<paramref name="preventReentrancy"/> パラメーターが true に設定されている場合、再入可能な呼び出しがあれば、<see cref="T:System.Reactive.Concurrency.AsyncLock"/> を使用して指定されたオブザーバーにコールバックを入れます。 </remarks>
        </member>
        <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Object)">
            <summary><see cref="T:System.Threading.Monitor">モニター</see> ベースのロックで使用するために指定されたゲート オブジェクトを使い、オブザーバーへのアクセスを同期して、そのコールバック メソッドを複数のスレッドで同時に呼び出せないようにします。このオーバーロードは、共通ゲート オブジェクトで同期して共有状態にアクセスする複数のオブザーバーを調整する場合に便利です。同じスレッド上で再入可能なオブザーバー コールバックは引き続き可能です。</summary>
            <typeparam name="T">ソース オブザーバーが受信した要素のタイプ。</typeparam>
            <param name="observer">コールバックを同期する必要があるオブザーバー。</param>
            <param name="gate">各オブザーバーの呼び出しを同期するゲート オブジェクト。</param>
            <returns>同期された方法で指定されたオブザーバーにコールバックを配信するオブザーバー。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> または <paramref name="gate"/> は null です。</exception>
            <remarks><see cref="T:System.Threading.Monitor">モニター</see>は同期の実行に使用されるため、同じスレッドからの再入に対する保護はありません。したがって、オーバーラップしたオブザーバー コールバックは引き続き可能で、オブザーバー文法に従って無効な動作です。この動作から保護するには、<see cref="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Reactive.Concurrency.AsyncLock)"/> オーバーロードを使用します。</remarks>
        </member>
        <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Reactive.Concurrency.AsyncLock)">
            <summary>指定された非同期ロックを使用して同時および再入可能アクセスから保護し、オブザーバーへのアクセスを同期してコールバック メソッドを同時に呼び出すことができないようにします。このオーバーロードは、共通の非同期ロックで同期することにより、共有状態にアクセスする複数のオブザーバーを調整する場合に便利です。</summary>
            <typeparam name="T">ソース オブザーバーが受信した要素のタイプ。</typeparam>
            <param name="observer">コールバックを同期する必要があるオブザーバー。</param>
            <param name="asyncLock">各オブザーバーの呼び出しを同期するゲート オブジェクト。</param>
            <returns>同期された方法で指定されたオブザーバーにコールバックを配信するオブザーバー。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> または <paramref name="asyncLock"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.NotifyOn``1(System.IObserver{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>特定の Scheduler でオブザーバー メソッドの呼び出しをスケジュールします。</summary>
            <typeparam name="T">ソース オブザーバーが受信した要素のタイプ。</typeparam>
            <param name="observer">メッセージをスケジュールするオブザーバー。</param>
            <param name="scheduler">オブザーバー メッセージをスケジュールする Scheduler。</param>
            <returns>特定の Scheduler でメッセージがスケジュールされるオブザーバー。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> または <paramref name="scheduler"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.NotifyOn``1(System.IObserver{``0},System.Threading.SynchronizationContext)">
            <summary>特定の同期コンテキストでオブザーバー メソッドの呼び出しをスケジュールします。</summary>
            <typeparam name="T">ソース オブザーバーが受信した要素のタイプ。</typeparam>
            <param name="observer">メッセージをスケジュールするオブザーバー。</param>
            <param name="context">オブザーバー メッセージをスケジュールする同期コンテキスト。</param>
            <returns>特定の同期コンテキストでメッセージがスケジュールされるオブザーバー。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> または <paramref name="context"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.ToProgress``1(System.IObserver{``0})">
            <summary>オブザーバーを進行状況オブジェクトに変換します。</summary>
            <typeparam name="T">ソース オブザーバーが受信した進行状況オブジェクトのタイプ。</typeparam>
            <param name="observer">変換するオブザーバー。</param>
            <returns>レポート メッセージがオブザーバーの OnNext メッセージに対応する進行状況オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.ToProgress``1(System.IObserver{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>指定された Scheduler を使用して進行状況レポート メソッドを呼び出し、オブザーバーを進行状況オブジェクトに変換します。</summary>
            <typeparam name="T">ソース オブザーバーが受信した進行状況オブジェクトのタイプ。</typeparam>
            <param name="observer">変換するオブザーバー。</param>
            <param name="scheduler">進捗状況を報告する Scheduler。</param>
            <returns>レポート メッセージがオブザーバーの OnNext メッセージに対応する進行状況オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> または <paramref name="scheduler"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Observer.ToObserver``1(System.IProgress{``0})">
            <summary>進行状況オブジェクトをオブザーバーに変換します。</summary>
            <typeparam name="T">進行状況レポーターが受け取った進行状況オブジェクトのタイプ。</typeparam>
            <param name="progress">変換する進行状況オブジェクト。</param>
            <returns>OnNext メッセージが進行状況オブジェクトのレポート メッセージに対応するオブザーバー。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="progress"/> は null です。</exception>
        </member>
        <member name="T:System.Reactive.AnonymousObservable`1">
            <summary>Subscribe メソッドのデリゲート ベースの実装から IObservable&lt;T&gt; インスタンスを作成するクラス。</summary>
            <typeparam name="T">シーケンス内の要素のタイプ。</typeparam>
        </member>
        <member name="T:System.Reactive.ObservableBase`1">
            <summary>IObservable&lt;T&gt; インターフェイスの実装のための抽象的な基本クラス。</summary>
            <remarks>監視可能なシーケンスを作成するために名前の付いたタイプが必要ない場合 (つまり、再利用可能なタイプではなくインスタンスが必要な場合)、Observable.Create メソッドを使用して、指定されたサブスクリプション動作のある監視可能なシーケンスを作成します。</remarks>
            <typeparam name="T">シーケンス内の要素のタイプ。</typeparam>
        </member>
        <member name="M:System.Reactive.ObservableBase`1.Subscribe(System.IObserver{`0})">
            <summary>特定のオブザーバーを監視可能なシーケンスにサブスクライブします。</summary>
            <param name="observer">監視可能なシーケンスから通知を受け取るオブザーバー。</param>
            <returns>監視可能なシーケンスへのオブザーバーのサブスクリプションを表す破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.ObservableBase`1.SubscribeCore(System.IObserver{`0})">
            <summary>このメソッドは、監視可能なシーケンスのコア サブスクリプション ロジックを使用して実装します。</summary>
            <param name="observer">通知の送信先のオブザーバー。</param>
            <returns>監視可能なシーケンスへのオブザーバーのサブスクリプションを表す破棄可能オブジェクト。</returns>
        </member>
        <member name="M:System.Reactive.AnonymousObservable`1.#ctor(System.Func{System.IObserver{`0},System.IDisposable})">
            <summary>指定されたサブスクリプション関数から監視可能なシーケンス オブジェクトを作成します。</summary>
            <param name="subscribe">Subscribe メソッドの実装。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscribe"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.AnonymousObservable`1.SubscribeCore(System.IObserver{`0})">
            <summary>コンストラクタに提供されたサブスクリプション関数を呼び出します。</summary>
            <param name="observer">通知の送信先のオブザーバー。</param>
            <returns>監視可能なシーケンスへのオブザーバーのサブスクリプションを表す破棄可能オブジェクト。</returns>
        </member>
        <member name="T:System.Reactive.AnonymousObserver`1">
            <summary>On* メソッドのデリゲート ベースの実装からIObserver&lt;T&gt; インスタンスを作成するクラス。</summary>
            <typeparam name="T">シーケンス内の要素のタイプ。</typeparam>
        </member>
        <member name="T:System.Reactive.ObserverBase`1">
            <summary>IObserver&lt;T&gt; インターフェイスの実装のための抽象的な基本クラス。</summary>
            <remarks>この基本クラスは、OnError と OnCompleted が端末メッセージであるオブザーバーの文法を強制します。</remarks>
            <typeparam name="T">シーケンス内の要素のタイプ。</typeparam>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.#ctor">
            <summary>停止しない状態で新しいオブザーバーを作成します。</summary>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.OnNext(`0)">
            <summary>シーケンス内の新しい要素をオブザーバーに通知します。</summary>
            <param name="value">シーケンス内の次の要素。</param>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.OnNextCore(`0)">
            <summary>このメソッドを実装して、シーケンス内の新しい要素の受け取り量に反応します。</summary>
            <param name="value">シーケンス内の次の要素。</param>
            <remarks>このメソッドは、オブザーバーがまだ停止していない場合にのみ呼び出されます。</remarks>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.OnError(System.Exception)">
            <summary>例外が発生したことをオブザーバーに知らせます。</summary>
            <param name="error">発生したエラー。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="error"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.OnErrorCore(System.Exception)">
            <summary>例外の発生に対応するために、このメソッドを実装します。</summary>
            <param name="error">発生したエラー。</param>
            <remarks>このメソッドは、オブザーバーがまだ停止していない場合にのみ呼び出され、オブザーバーを停止させます。</remarks>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.OnCompleted">
            <summary>シーケンスの終了をオブザーバーに知らせます。</summary>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.OnCompletedCore">
            <summary>このメソッドを実装して、シーケンスの終了に対応します。</summary>
            <remarks>このメソッドは、オブザーバーがまだ停止していない場合にのみ呼び出され、オブザーバーを停止させます。</remarks>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.Dispose">
            <summary>オブザーバーを破棄し、停止状態に移ります。</summary>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.Dispose(System.Boolean)">
            <summary>IDisposable のコア実装。</summary>
            <param name="disposing">Dispose 呼び出しが IDisposable.Dispose メソッドによってトリガーされた場合は true、ファイナライザーによってトリガーされた場合は false です。</param>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>指定された OnNext アクション、OnError アクション、および OnCompleted アクションからオブザーバーを作成します。</summary>
            <param name="onNext">オブザーバーの OnNext アクションの実装。</param>
            <param name="onError">オブザーバーの OnError アクションの実装。</param>
            <param name="onCompleted">オブザーバーの OnCompleted アクション実装。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> または <paramref name="onError"/>、あるいは <paramref name="onCompleted"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0})">
            <summary>指定された OnNext アクションからオブザーバーを作成します。</summary>
            <param name="onNext">オブザーバーの OnNext アクションの実装。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0},System.Action{System.Exception})">
            <summary>指定された OnNext アクションと OnError アクションからオブザーバーを作成します。</summary>
            <param name="onNext">オブザーバーの OnNext アクションの実装。</param>
            <param name="onError">オブザーバーの OnError アクションの実装。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> または <paramref name="onError"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0},System.Action)">
            <summary>指定された OnNext アクションと OnCompleted アクションからオブザーバーを作成します。</summary>
            <param name="onNext">オブザーバーの OnNext アクションの実装。</param>
            <param name="onCompleted">オブザーバーの OnCompleted アクション実装。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> または <paramref name="onCompleted"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.OnNextCore(`0)">
            <summary>onNext アクションを呼び出します。</summary>
            <param name="value">シーケンス内の次の要素。</param>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.OnErrorCore(System.Exception)">
            <summary>onError アクションを呼び出します。</summary>
            <param name="error">発生したエラー。</param>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.OnCompletedCore">
            <summary>on Completed アクションを呼び出します。</summary>
        </member>
        <member name="T:System.Reactive.AnonymousSafeObserver`1">
            <summary>このクラスは、ObserverBase、AnonymousObserver、および SafeObserver のロジックを 1 つのクラスに融合します。オブザーバーを保護する必要がある場合、このタイプのインスタンスは、入力が AnonymousObserver であれば SafeObserver.Create によって作成できます。これは一般的に、On* ハンドラーのでりげーとぉ受諾する Subscribe拡張機能メソッドを使用する際、エンド ユーザーによって使用されます。融合を行うことで、呼び出し履歴の深さを減らし、デバッグやパフォーマンスを向上させます。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.AsyncLock">
            <summary>非同期ロック。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.AsyncLock.Wait(System.Action)">
            <summary>実行するアクションをキューに入れます。呼び出し元がロックを取得し、所有者になると、キューは処理されます。ロックが既に所有されている場合、アクションはキューに入れられ、所有者によって処理されす。</summary>
            <param name="action">実行向けにキューに入れるアクション。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.AsyncLock.Dispose">
            <summary>キュー内の作業項目をクリアし、キューに入れられている作業をさらにドロップします。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ConcurrencyAbstractionLayer">
            <summary>(インフラ) 同時開催抽象化レイヤー。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.ConcurrencyAbstractionLayer.Current">
            <summary>現在の CAL を取得します。CAL がまだ設定されていない場合は、既定値に初期化されます。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.IConcurrencyAbstractionLayer">
            <summary>(インフラ) 同時開催抽象化レイヤーのインターフェイス。</summary>
            <remarks>このタイプは Rx インフラストラクチャで使用され、一般の使用や実装向けではありません。タイプの機能とその使用の上位互換性について保証はありません。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartTimer(System.Action{System.Object},System.Object,System.TimeSpan)">
            <summary>指定された相対時間に実行するメソッドをキューに入れます。</summary>
            <param name="action">実行するメソッド。</param>
            <param name="state">メソッドに渡す状態。</param>
            <param name="dueTime">メソッドを実行する時間。</param>
            <returns>タイマーを停止するために使用できる破棄可能なオブジェクト。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartPeriodicTimer(System.Action,System.TimeSpan)">
            <summary>指定した期間に基づいて定期的に実行するメソッドをキューに入れます。</summary>
            <param name="action">実行するメソッド。安全に再入できなくてはなりません。</param>
            <param name="period">メソッドを定期的に実行する期間。</param>
            <returns>タイマーを停止するために使用できる破棄可能なオブジェクト。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.QueueUserWorkItem(System.Action{System.Object},System.Object)">
            <summary>実行メソッドをキューに入れます。</summary>
            <param name="action">実行するメソッド。</param>
            <param name="state">メソッドに渡す状態。</param>
            <returns>キューに入れられたメソッドを取り消すために使用できる破棄可能なオブジェクト。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.Sleep(System.TimeSpan)">
            <summary>スリープ操作をブロックします。</summary>
            <param name="timeout">スリープの時間。</param>
        </member>
        <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartStopwatch">
            <summary>新しいストップウォッチ オブジェクトを開始します。</summary>
            <returns>新しいストップウォッチ オブジェクト。要求の時点で開始されます。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartThread(System.Action{System.Object},System.Object)">
            <summary>実行時間の長い新しいスレッドを開始します。</summary>
            <param name="action">実行するメソッド。</param>
            <param name="state">メソッドに渡す状態。</param>
        </member>
        <member name="P:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.SupportsLongRunning">
            <summary>実行時間の長いスケジューリングがサポートされているかどうかを取得します。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.Scheduler">
            <summary>一般的に使用される Scheduler にアクセスするための一連の静的プロパティを提供します。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.DisableOptimizations(System.Reactive.Concurrency.IScheduler)">
            <summary>インターフェイス ベースの最適化 (長時間実行スケジューリングなど) なしで、元の Scheduler を表す Scheduler を返します。</summary>
            <param name="scheduler">Scheduler は、すべての最適化を無効にします。</param>
            <returns>元の Scheduler へのプロキシ経由にしますが、最適化は有効ではありません。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.DisableOptimizations(System.Reactive.Concurrency.IScheduler,System.Type[])">
            <summary>インターフェイス ベースの最適化の指定されたセット (長時間実行スケジューリングなど) なしで、元の Scheduler を表す Scheduler を返します。</summary>
            <param name="scheduler">指定された最適化を無効にする Scheduler。</param>
            <param name="optimizationInterfaces">無効にする必要がある最適化インターフェイスのタイプ。</param>
            <returns>元の Scheduler にへのプロキシ経由にしますが、指定された最適化は有効ではありません。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="optimizationInterfaces"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Catch``1(System.Reactive.Concurrency.IScheduler,System.Func{``0,System.Boolean})">
            <summary>元の Scheduler をラップする Scheduler を返し、スケジュールされたアクションの例外処理を追加します。</summary>
            <typeparam name="TException">チェックする例外のタイプ。</typeparam>
            <param name="scheduler">例外フィルターを適用する Scheduler。</param>
            <param name="handler">例外がキャッチされた場合に実行されるハンドラー。ハンドラがー false を返した場合は、例外が再びスローされます。</param>
            <returns>元の Scheduler の周りをラッパーし、例外処理を強制します。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="handler"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.SchedulePeriodic``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Func{``0,``0})">
            <summary>Scheduler の機能を動的に検出して、定期的な作業をスケジュールします。Scheduler が定期的なスケジューリングをサポートしている場合、要求は定期的なスケジューリング実装に転送されます。Scheduler がストップウォッチ機能を提供する場合、定期的なタスクは、時間の遅延を修正するためにストップウォッチを使い、再帰的なスケジューリングを使用してエミュレートされます。それ以外の場合、定期的なタスクは再帰的スケジューリングを使用してエミュレートされます。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="scheduler">定期的な作業を実行する Scheduler。</param>
            <param name="state">最初の繰り返し後にアクションに渡される初期状態。</param>
            <param name="period">作業を定期的に実行する期間。</param>
            <param name="action">実行するアクション。状態が更新される可能性があります。</param>
            <returns>スケジュールされた定期アクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> は TimeSpan.Zero 未満です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.SchedulePeriodic``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Action{``0})">
            <summary>Scheduler の機能を動的に検出して、定期的な作業をスケジュールします。Scheduler が定期的なスケジューリングをサポートしている場合、要求は定期的なスケジューリング実装に転送されます。Scheduler がストップウォッチ機能を提供する場合、定期的なタスクは、時間の遅延を修正するためにストップウォッチを使い、再帰的なスケジューリングを使用してエミュレートされます。それ以外の場合、定期的なタスクは再帰的スケジューリングを使用してエミュレートされます。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="scheduler">アクションを実行する Scheduler。</param>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="period">作業を定期的に実行する期間。</param>
            <param name="action">実行するアクション。</param>
            <returns>スケジュールされた定期アクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> は TimeSpan.Zero 未満です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.SchedulePeriodic(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action)">
            <summary>Scheduler の機能を動的に検出して、定期的な作業をスケジュールします。Scheduler が定期的なスケジューリングをサポートしている場合、要求は定期的なスケジューリング実装に転送されます。Scheduler がストップウォッチ機能を提供する場合、定期的なタスクは、時間の遅延を修正するためにストップウォッチを使い、再帰的なスケジューリングを使用してエミュレートされます。それ以外の場合、定期的なタスクは再帰的スケジューリングを使用してエミュレートされます。</summary>
            <param name="scheduler">アクションを実行する Scheduler。</param>
            <param name="period">作業を定期的に実行する期間。</param>
            <param name="action">実行するアクション。</param>
            <returns>スケジュールされた定期アクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> は TimeSpan.Zero 未満です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.StartStopwatch(System.Reactive.Concurrency.IScheduler)">
            <summary>Scheduler の機能を動的に検出して、新しいストップウォッチ オブジェクトを開始します。Scheduler がストップウォッチ機能を提供する場合、要求はストップウォッチ プロバイダーの実装に転送されます。それ以外の場合、ストップウォッチは Scheduler の絶対時間の概念を使用してエミュレートされます。</summary>
            <param name="scheduler">ストップウォッチを取得する Scheduler。</param>
            <returns>新しいストップウォッチ オブジェクト。要求の時点で開始されます。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> は null です。</exception>
            <remarks>結果として得られるストップウォッチ オブジェクトは、単調でない動作を持つことができます。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.AsLongRunning(System.Reactive.Concurrency.IScheduler)">
            <summary>指定された Scheduler の ISchedulerLongRunning 実装を返します。または、このような実装がない場合は null になります。</summary>
            <param name="scheduler">ISchedulerLongRunning 実装を取得する Scheduler。</param>
            <returns>可能な場合は Scheduler の ISchedulerLongRunning 実装。それ以外の場合は null です。</returns>
            <remarks>クエリ演算子の作成者は、Scheduler サービスの傍受または再定義を可能にするために必要な IServiceProvider パターンを使用して Scheduler サービスを検出するために、このヘルパー メソッドを使用できます。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.AsStopwatchProvider(System.Reactive.Concurrency.IScheduler)">
            <summary>指定された Scheduler の IStopwatchProvider 実装を返します。このような実装を利用できない場合は null です。</summary>
            <param name="scheduler">IStopwatchProvider の実装を取得する Scheduler。</param>
            <returns>利用できる場合は Scheduler の IStopwatchProvider 実装。それ以外の場合は null です。</returns>
            <remarks>
            <para>クエリ演算子の作成者は、Scheduler サービスの傍受または再定義を可能にするために必要な IServiceProvider パターンを使用して Scheduler サービスを検出するために、このヘルパー メソッドを使用できます。</para>
            <para>ストップウォッチが必要な場合、ただしScheduler のクロックに基づくエムレーション ストップウォッチを使用できる場合は、<see cref="M:System.Reactive.Concurrency.Scheduler.StartStopwatch(System.Reactive.Concurrency.IScheduler)"/> の使用を検討してください。この方法は、ストップウォッチ プロバイダー Scheduler サービスをベスト エフォートで使用することをお勧めします。これが見つからなくても呼び出し元はストップウォッチを再び使用しません。</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.AsPeriodic(System.Reactive.Concurrency.IScheduler)">
            <summary>指定された Scheduler の IStopwatchProvider 実装を返します。このような実装を利用できない場合は null です。</summary>
            <param name="scheduler">IStopwatchProvider の実装を取得する Scheduler。</param>
            <returns>利用できる場合は Scheduler の IStopwatchProvider 実装。それ以外の場合は null です。</returns>
            <remarks>
            <para>クエリ演算子の作成者は、Scheduler サービスの傍受または再定義を可能にするために必要な IServiceProvider パターンを使用して Scheduler サービスを検出するために、このヘルパー メソッドを使用できます。</para>
            <para>定期的なスケジューリングが必要で、他の Scheduler サービスを使用した定期的な動作のエミュレーションが望ましい場合に備えて、IScheduler の Scheduler.SchedulePeriodic 拡張メソッドを使用することを検討してください。このメソッドの使用は、定期的なスケジューリング サービスのベスト エフォートの使用としてお勧めします。この機能が見つからなければ、呼び出し元は定期的なスケジューリングを使用します。</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Yield(System.Reactive.Concurrency.IScheduler)">
            <summary>Scheduler の現在の作業項目の実行を一時停止して、Scheduler の別の作業項目に渡します。呼び出し元は、Yield の呼び出し結果を待ってから、現在の作業項目の残りの部分 (継続と呼ばれます) をスケジュールする必要があります。</summary>
            <param name="scheduler">作業を一時停止する Scheduler。</param>
            <returns>継続をスケジュールするために待機する Scheduler 操作オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Yield(System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken)">
            <summary>Scheduler の現在の作業項目の実行を一時停止して、Scheduler の別の作業項目に渡します。呼び出し元は、Yield の呼び出し結果を待ってから、現在の作業項目の残りの部分 (継続と呼ばれます) をスケジュールする必要があります。</summary>
            <param name="scheduler">作業を一時停止する Scheduler。</param>
            <param name="cancellationToken">実行する継続を取り消すキャンセル トークン。</param>
            <returns>継続をスケジュールするために待機する Scheduler 操作オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Sleep(System.Reactive.Concurrency.IScheduler,System.TimeSpan)">
            <summary>指定された期間、Scheduler の現在の作業項目の実行を中断します。呼び出し元は、指定された期間の後、Sleep の呼び出し結果を待ってから現在の作業項目 (継続と呼ばれます) の残りの部分をスケジュールする必要があります。</summary>
            <param name="scheduler">作業を一時停止する Scheduler。</param>
            <param name="dueTime">継続を実行する時刻。</param>
            <returns>継続をスケジュールするために待機する Scheduler 操作オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Sleep(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>指定された期間、Scheduler の現在の作業項目の実行を中断します。呼び出し元は、指定された期間の後、Sleep の呼び出し結果を待ってから現在の作業項目 (継続と呼ばれます) の残りの部分をスケジュールする必要があります。</summary>
            <param name="scheduler">作業を一時停止する Scheduler。</param>
            <param name="dueTime">継続を実行する時刻。</param>
            <param name="cancellationToken">実行する継続を取り消すキャンセル トークン。</param>
            <returns>継続をスケジュールするために待機する Scheduler 操作オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Sleep(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset)">
            <summary>指定された期限まで、Scheduler の現在の作業項目の実行を一時停止します。呼び出し元は、Sleep の呼び出し結果を待ってから、指定された期限に現在の作業項目 (継続と呼ばれます) の残りをスケジュールする必要があります。</summary>
            <param name="scheduler">作業を一時停止する Scheduler。</param>
            <param name="dueTime">継続を実行する時刻。</param>
            <returns>継続をスケジュールするために待機する Scheduler 操作オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Sleep(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>指定された期限まで、Scheduler の現在の作業項目の実行を一時停止します。呼び出し元は、Sleep の呼び出し結果を待ってから、指定された期限に現在の作業項目 (継続と呼ばれます) の残りをスケジュールする必要があります。</summary>
            <param name="scheduler">作業を一時停止する Scheduler。</param>
            <param name="dueTime">継続を実行する時刻。</param>
            <param name="cancellationToken">実行する継続を取り消すキャンセル トークン。</param>
            <returns>継続をスケジュールするために待機する Scheduler 操作オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync``1(System.Reactive.Concurrency.IScheduler,``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>非同期メソッドを使用して作業をスケジュールし、命令型コーディング スタイルで協調的なスケジューリングが行えるようにします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="scheduler">作業をスケジュールする Scheduler。</param>
            <param name="state">非同期メソッドに渡す状態。</param>
            <param name="action">作業を実行する非同期メソッド。Yield および Sleep 操作を使用して、協調的なスケジューリングとキャンセル ポイントの注入を行います。</param>
            <returns>協調キャンセル ポイントまたは非同期メソッドに渡されるキャンセル トークンを介して未処理の作業を取り消すことが可能になる破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync``1(System.Reactive.Concurrency.IScheduler,``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>非同期メソッドを使用して作業をスケジュールし、命令型コーディング スタイルで協調的なスケジューリングが行えるようにします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="scheduler">作業をスケジュールする Scheduler。</param>
            <param name="state">非同期メソッドに渡す状態。</param>
            <param name="action">作業を実行する非同期メソッド。Yield および Sleep 操作を使用して、協調的なスケジューリングとキャンセル ポイントの注入を行います。</param>
            <returns>協調キャンセル ポイントまたは非同期メソッドに渡されるキャンセル トークンを介して未処理の作業を取り消すことが可能になる破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync(System.Reactive.Concurrency.IScheduler,System.Func{System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>非同期メソッドを使用して作業をスケジュールし、命令型コーディング スタイルで協調的なスケジューリングが行えるようにします。</summary>
            <param name="scheduler">作業をスケジュールする Scheduler。</param>
            <param name="action">作業を実行する非同期メソッド。Yield および Sleep 操作を使用して、協調的なスケジューリングとキャンセル ポイントの注入を行います。</param>
            <returns>協調キャンセル ポイントまたは非同期メソッドに渡されるキャンセル トークンを介して未処理の作業を取り消すことが可能になる破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync(System.Reactive.Concurrency.IScheduler,System.Func{System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>非同期メソッドを使用して作業をスケジュールし、命令型コーディング スタイルで協調的なスケジューリングが行えるようにします。</summary>
            <param name="scheduler">作業をスケジュールする Scheduler。</param>
            <param name="action">作業を実行する非同期メソッド。Yield および Sleep 操作を使用して、協調的なスケジューリングとキャンセル ポイントの注入を行います。</param>
            <returns>協調キャンセル ポイントまたは非同期メソッドに渡されるキャンセル トークンを介して未処理の作業を取り消すことが可能になる破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>非同期メソッドを使用して作業をスケジュールし、命令型コーディング スタイルで協調的なスケジューリングが行えるようにします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="scheduler">作業をスケジュールする Scheduler。</param>
            <param name="state">非同期メソッドに渡す状態。</param>
            <param name="dueTime">その後にアクションを実行する相対時間。</param>
            <param name="action">作業を実行する非同期メソッド。Yield および Sleep 操作を使用して、協調的なスケジューリングとキャンセル ポイントの注入を行います。</param>
            <returns>協調キャンセル ポイントまたは非同期メソッドに渡されるキャンセル トークンを介して未処理の作業を取り消すことが可能になる破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>非同期メソッドを使用して作業をスケジュールし、命令型コーディング スタイルで協調的なスケジューリングが行えるようにします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="scheduler">作業をスケジュールする Scheduler。</param>
            <param name="state">非同期メソッドに渡す状態。</param>
            <param name="dueTime">その後にアクションを実行する相対時間。</param>
            <param name="action">作業を実行する非同期メソッド。Yield および Sleep 操作を使用して、協調的なスケジューリングとキャンセル ポイントの注入を行います。</param>
            <returns>協調キャンセル ポイントまたは非同期メソッドに渡されるキャンセル トークンを介して未処理の作業を取り消すことが可能になる破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>非同期メソッドを使用して作業をスケジュールし、命令型コーディング スタイルで協調的なスケジューリングが行えるようにします。</summary>
            <param name="scheduler">作業をスケジュールする Scheduler。</param>
            <param name="dueTime">その後にアクションを実行する相対時間。</param>
            <param name="action">作業を実行する非同期メソッド。Yield および Sleep 操作を使用して、協調的なスケジューリングとキャンセル ポイントの注入を行います。</param>
            <returns>協調キャンセル ポイントまたは非同期メソッドに渡されるキャンセル トークンを介して未処理の作業を取り消すことが可能になる破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>非同期メソッドを使用して作業をスケジュールし、命令型コーディング スタイルで協調的なスケジューリングが行えるようにします。</summary>
            <param name="scheduler">作業をスケジュールする Scheduler。</param>
            <param name="dueTime">その後にアクションを実行する相対時間。</param>
            <param name="action">作業を実行する非同期メソッド。Yield および Sleep 操作を使用して、協調的なスケジューリングとキャンセル ポイントの注入を行います。</param>
            <returns>協調キャンセル ポイントまたは非同期メソッドに渡されるキャンセル トークンを介して未処理の作業を取り消すことが可能になる破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>非同期メソッドを使用して作業をスケジュールし、命令型コーディング スタイルで協調的なスケジューリングが行えるようにします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="scheduler">作業をスケジュールする Scheduler。</param>
            <param name="state">非同期メソッドに渡す状態。</param>
            <param name="dueTime">アクションを実行する絶対時間。</param>
            <param name="action">作業を実行する非同期メソッド。Yield および Sleep 操作を使用して、協調的なスケジューリングとキャンセル ポイントの注入を行います。</param>
            <returns>協調キャンセル ポイントまたは非同期メソッドに渡されるキャンセル トークンを介して未処理の作業を取り消すことが可能になる破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>非同期メソッドを使用して作業をスケジュールし、命令型コーディング スタイルで協調的なスケジューリングが行えるようにします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="scheduler">作業をスケジュールする Scheduler。</param>
            <param name="state">非同期メソッドに渡す状態。</param>
            <param name="dueTime">アクションを実行する絶対時間。</param>
            <param name="action">作業を実行する非同期メソッド。Yield および Sleep 操作を使用して、協調的なスケジューリングとキャンセル ポイントの注入を行います。</param>
            <returns>協調キャンセル ポイントまたは非同期メソッドに渡されるキャンセル トークンを介して未処理の作業を取り消すことが可能になる破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>非同期メソッドを使用して作業をスケジュールし、命令型コーディング スタイルで協調的なスケジューリングが行えるようにします。</summary>
            <param name="scheduler">作業をスケジュールする Scheduler。</param>
            <param name="dueTime">アクションを実行する絶対時間。</param>
            <param name="action">作業を実行する非同期メソッド。Yield および Sleep 操作を使用して、協調的なスケジューリングとキャンセル ポイントの注入を行います。</param>
            <returns>協調キャンセル ポイントまたは非同期メソッドに渡されるキャンセル トークンを介して未処理の作業を取り消すことが可能になる破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>非同期メソッドを使用して作業をスケジュールし、命令型コーディング スタイルで協調的なスケジューリングが行えるようにします。</summary>
            <param name="scheduler">作業をスケジュールする Scheduler。</param>
            <param name="dueTime">アクションを実行する絶対時間。</param>
            <param name="action">作業を実行する非同期メソッド。Yield および Sleep 操作を使用して、協調的なスケジューリングとキャンセル ポイントの注入を行います。</param>
            <returns>協調キャンセル ポイントまたは非同期メソッドに渡されるキャンセル トークンを介して未処理の作業を取り消すことが可能になる破棄可能オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Normalize(System.TimeSpan)">
            <summary>指定された TimeSpan 値を正の値に正規化します。</summary>
            <param name="timeSpan">正規化する TimeSpan 値。</param>
            <returns>ゼロまたは正の値の場合は指定された TimeSpan 値、それ以外の場合は TimeSpan.Zero です。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.Action{System.Action})">
            <summary>再帰的に実行されるアクションをスケジュールします。</summary>
            <param name="scheduler">再帰的なアクションを実行する Scheduler。</param>
            <param name="action">再帰的に実行するアクション。アクションに渡されるパラメーターは、アクションの再帰的なスケジューリングをトリガーするために使用されます。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.Action{``0,System.Action{``0}})">
            <summary>再帰的に実行されるアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="scheduler">再帰的なアクションを実行する Scheduler。</param>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">再帰的に実行するアクション。アクションに渡される最後のパラメーターは、再帰的な呼び出し状態で渡されるアクションの再帰的なスケジューリングをトリガーするために使用されます。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action{System.Action{System.TimeSpan}})">
            <summary>指定された相対期限の後に再帰的に実行されるアクションをスケジュールします。</summary>
            <param name="scheduler">再帰的なアクションを実行する Scheduler。</param>
            <param name="action">再帰的に実行するアクション。アクションに渡されるパラメーターは、指定された相対時間にアクションの再帰的なスケジューリングをトリガーするために使用されます。</param>
            <param name="dueTime">アクションを初めて実行する相対時間。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Action{``0,System.Action{``0,System.TimeSpan}})">
            <summary>指定された相対期限の後に再帰的に実行されるアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="scheduler">再帰的なアクションを実行する Scheduler。</param>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">再帰的に実行するアクション。アクションに渡される最後のパラメーターは、再帰的な期限と呼び出し状態を渡し、アクションの再帰的なスケジューリングをトリガーするために使用されます。</param>
            <param name="dueTime">アクションを初めて実行する相対時間。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Action{System.Action{System.DateTimeOffset}})">
            <summary>指定された絶対期限に再帰的に実行されるアクションをスケジュールします。</summary>
            <param name="scheduler">再帰的なアクションを実行する Scheduler。</param>
            <param name="action">再帰的に実行するアクション。アクションに渡されるパラメーターは、指定された絶対時間にアクションの再帰的なスケジューリングをトリガーするために使用されます。</param>
            <param name="dueTime">アクションを初めて実行する絶対時間。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Action{``0,System.Action{``0,System.DateTimeOffset}})">
            <summary>指定された絶対期限に再帰的に実行されるアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="scheduler">再帰的なアクションを実行する Scheduler。</param>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">再帰的に実行するアクション。アクションに渡される最後のパラメーターは、再帰的な期限と呼び出し状態を渡し、アクションの再帰的なスケジューリングをトリガーするために使用されます。</param>
            <param name="dueTime">アクションを初めて実行する絶対時間。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.Action)">
            <summary>実行するアクションをスケジュールします。</summary>
            <param name="scheduler">アクションを実行する Scheduler。</param>
            <param name="action">実行するアクション。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action)">
            <summary>指定された相対期限の後に実行されるアクションをスケジュールします。</summary>
            <param name="scheduler">アクションを実行する Scheduler。</param>
            <param name="action">実行するアクション。</param>
            <param name="dueTime">その後にアクションを実行する相対時間。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Action)">
            <summary>指定された絶対期限に実行されるアクションをスケジュールします。</summary>
            <param name="scheduler">アクションを実行する Scheduler。</param>
            <param name="action">実行するアクション。</param>
            <param name="dueTime">アクションを実行する絶対時間。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleLongRunning(System.Reactive.Concurrency.ISchedulerLongRunning,System.Action{System.Reactive.Disposables.ICancelable})">
            <summary>実行するアクションをスケジュールします。</summary>
            <param name="scheduler">アクションを実行する Scheduler。</param>
            <param name="action">実行するアクション。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.Now">
            <summary>ローカル コンピューターのシステム クロックに従って現在の時刻を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.Immediate">
            <summary>現在のスレッドですぐに作業をスケジュールする Scheduler を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.CurrentThread">
            <summary>現在のスレッドでできるだけ早く作業をスケジュールする Scheduler を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.Default">
            <summary>プラットフォームの既定の Scheduler で作業をスケジュールする Scheduler を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.ThreadPool">
            <summary>スレッド プールでの作業をスケジュールする Scheduler を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.NewThread">
            <summary>既定のスレッド作成オプションを使用して、新しいスレッドで作業をスケジュールする Scheduler を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.TaskPool">
            <summary>既定の TaskScheduler を使用して、タスク並列ライブラリ (TPL) タスク プールで作業をスケジュールする Scheduler を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.LocalScheduler">
            <summary>時間ベースの操作にローカル システム クロックを使用する、マシン ローカル Scheduler の抽象基本クラス。</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.MAXERRORRATIO">
            <summary>タイマー ドリフトの最大誤差比。10s のコンピューターは10E-4の順序で日常的にドリフトしているため、マージンには余裕を持たせています。この値は、短期キューの作業を再評価する長期キュー タイマーの早期到着を計算するために使用されます。例: -------------------------------...---------------------*-----$ ^ ^ | | early due 0.999 1.0 また、早期と期限の間に少なくとも LONGTOSHORT のギャップを作り、キューなどを管理するための宛先 Scheduler への礼儀として、作業を短期に移行するために十分な時間をとっています。</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.s_gate">
            <summary>キューを保護し、スケジューリングの決定とシステム クロック変更管理を同期するゲート。</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.s_longTerm">
            <summary>長期作業キュー。エンキュー時に計算される SHORTTERM を超える期限の作業が含まれます。</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.s_nextLongTermTimer">
            <summary>長期キューで最初の項目を再評価してディスパッチする長期タイマー用の破棄可能なリソース。シリアル破棄可能を使用して、「現在のものを破棄して新しいものを割り当てる」 ロジックを容易にします。破棄可能自体は決して破棄されることはありません。</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.s_nextLongTermWorkItem">
            <summary>現在の長期タイマーが実行されている長期キューの先頭にある項目。キュー内の変更を検出し、現在のタイマーを置き換えるか、使用し続けることができるか判定するために使用します (以前の長期作業はキューに追加されていないためです)。</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.s_shortTerm">
            <summary>短期作業キュー。エンキュー時または作業項目の移行を引き起こす長期キューの再評価後に計算される、期限の近い作業が含まれます。このキューは、システム クロックの変更が発生した場合に備えて、短期項目を長期キューに再配置できるように保持されます。</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.s_shortTermWork">
            <summary>現在の短期作業の Schedule 呼び出しのすべてに対する破棄可能なハンドルのセット。システム クロックの変更後に取り消せるようにします。</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.SHORTTERM">
            <summary>項目が短期的な作業と見なされるか、長期から短期に移されるしきい値。</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.LONGTOSHORT">
            <summary>キューが短期的な作業のために再評価される前に、長期タイマーが起動する最小しきい値。この値は、確実にタイマーが起動し、短期キューに切り替えるため、 SHORTTERM 未満になるよう選択します。</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.RETRYSHORT">
            <summary>絶対期限と比較して短期タイマーの起動が早すぎるタイミングを判定するために使用されるしきい値。オペレーティング システムで時間調整が行われると、スケジュールされた作業が早く完了してしまう可能性があるのですが、このような事態を避ける最後のチャンスになります (参照: GetSystemTimeAdjustment)。</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.MAXSUPPORTEDTIMER">
            <summary><see cref="T:System.Threading.Timer"/> でサポートされる最長間隔。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.Enqueue``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>タイマー キューまたは短期作業リストに絶対時間でスケジュールされた作業をエンキューします。</summary>
            <param name="scheduler">作業を実行する Scheduler。通常、呼び出し元の観点からは &quot;this&quot; (LocalScheduler.Schedule) ですが、すべての Rx ローカル Scheduler に単一つの (静的) タイマー キューがあるため、パラメーターは保持されます。</param>
            <param name="state">アクションに渡す状態。</param>
            <param name="dueTime">作業を実行する絶対時間。タイマー キューは、指定された時刻に近い作業を実行し、システム クロックの変更も考慮します。</param>
            <param name="action">実行するアクション。Scheduler で繰り返される可能性があります。</param>
            <returns>作業の実行を阻止する破棄可能なオブジェクト。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.ScheduleShortTermWork(System.Reactive.Concurrency.LocalScheduler.WorkItem)">
            <summary>短期的な期限の作業をスケジュールします。これにより、短い TimeSpan 値の基になる Scheduler への相対的なスケジューリングの呼び出しが発生します。その間にシステム クロックが変更された場合、短期作業の取り消しと再評価が試行されます。</summary>
            <param name="item">短期的にスケジュールする作業項目。呼び出し元は、作業が実際に短期的であることを判断する責任があります。</param>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.ExecuteNextShortTermWorkItem(System.Reactive.Concurrency.IScheduler,System.IDisposable)">
            <summary>コールバックして、次の短期作業項目を処理します。</summary>
            <param name="scheduler">基になる Scheduler によって提供される再帰 Scheduler。</param>
            <param name="cancel">タイマーがトリガーされた作業を識別するために使用される破棄可能 (使用方法についてはコードを参照)。</param>
            <returns>空の使い捨て。再帰的な作業の取り消しは、元の WorkItem を介して送信されます。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.ScheduleLongTermWork(System.Reactive.Concurrency.LocalScheduler.WorkItem)">
            <summary>長期的な期限の作業をスケジュールします。これにより、作業がキューに入れられ、最終的に短期作業リストに移行されます。</summary>
            <param name="item">長期的にスケジュールする作業項目。呼び出し元は、作業が実際に長期的であることを判断する責任があります。</param>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.UpdateLongTermProcessingTimer">
            <summary>作業を長期キューの先頭から短期作業リストに移行する期間タイマーを更新します。</summary>
            <remarks>Scheduler ロックで呼び出す必要があります。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.EvaluateLongTermQueue(System.Object)">
            <summary>長期キューを評価し、短期作業を短期リストに移行し、それに応じて新しい長期処理タイマーを調整します。</summary>
            <param name="state">無視されます。</param>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.SystemClockChanged(System.Object,System.Reactive.PlatformServices.SystemClockChangedEventArgs)">
            <summary>内部スケジューリング キューを調整して再評価するために、システム クロックの変更が観察されたときに呼び出されるコールバック。</summary>
            <param name="args">現在使用されていません。</param>
            <param name="sender">現在使用されていません。</param>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>実行するアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">実行するアクション。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 後に実行されるアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">実行するアクション。</param>
            <param name="dueTime">その後にアクションを実行する相対時間。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 時に実行されるアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">実行するアクション。</param>
            <param name="dueTime">アクションを実行する絶対時間。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.StartStopwatch">
            <summary>新しいストップウォッチ オブジェクトを開始します。</summary>
            <returns>新しいストップウォッチ オブジェクト。要求の時点で開始されます。</returns>
            <remarks>プラットフォーム固有の Scheduler 実装は、より効率的な IStopwatch 実装を提供するために IStopwatchProvider を再実装する必要があります (可能な場合)。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.GetService(System.Type)">
            <summary>インターフェイスのタイプ別に Scheduler サービスを検出します。基本クラスの実装は、派生クラスによって実装された各 Scheduler インターフェイスに対して要求されたサービスを返します。サービス検出をより詳細に制御するために、派生タイプはこのメソッドをオーバーライドできます。</summary>
            <param name="serviceType">検出する Scheduler サービス インターフェイスのタイプ。</param>
            <returns>要求されたサービスを実装するオブジェクト (使用可能な場合)。それ以外の場合は null です。</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.LocalScheduler.Now">
            <summary>Scheduler の現在時刻の概念を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.LocalScheduler.WorkItem">
            <summary>絶対時間 Scheduler の作業項目を表します。</summary>
            <remarks>このタイプは ScheduleItem と非常によく似ていますが、ターゲット Scheduler のカスタマイズを許可するには別の Invoke シグネチャが必要です (再帰的なスケジューリング コンテキストで呼び出された場合などは、ExecuteNextShortTermWorkItem を参照してください)。</remarks>
        </member>
        <member name="T:System.Reactive.Concurrency.LocalScheduler.WorkItem`1">
            <summary>Scheduler 呼び出し状態で終了する作業項目を表します。サブタイピングは、Scheduler キューを共通タイプにするために使用されます。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.CurrentThreadScheduler">
            <summary>現在のスレッドの作業単位をスケジュールするオブジェクトを表します。</summary>
            <seealso cref="P:System.Reactive.Concurrency.Scheduler.CurrentThread">この静的プロパティを通じて公開されるこのタイプのシングルトン インスタンス。</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.CurrentThreadScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 後に実行されるアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">実行するアクション。</param>
            <param name="dueTime">その後にアクションを実行する相対時間。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> は null です。</exception>
        </member>
        <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.Instance">
            <summary>現在のスレッド Scheduler のシングルトン インスタンスを取得します。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.ScheduleRequired">
            <summary>呼び出し元が Schedule メソッドを呼び出す必要があるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.IsScheduleRequired">
            <summary>呼び出し元が Schedule メソッドを呼び出す必要があるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ImmediateScheduler">
            <summary>現在のスレッドですぐに実行する作業単位をスケジュールするオブジェクトを表します。</summary>
            <seealso cref="P:System.Reactive.Concurrency.Scheduler.Immediate">この静的プロパティを通じて公開されるこのタイプのシングルトン インスタンス。</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.ImmediateScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>実行するアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">実行するアクション。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.ImmediateScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 後に実行されるアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">実行するアクション。</param>
            <param name="dueTime">その後にアクションを実行する相対時間。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> は null です。</exception>
        </member>
        <member name="P:System.Reactive.Concurrency.ImmediateScheduler.Instance">
            <summary>即時 Scheduler のシングルトン インスタンスを取得します。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ScheduledItem`1">
            <summary>スケジュールされた作業項目の抽象基本クラス。</summary>
            <typeparam name="TAbsolute">絶対時間表現タイプ。</typeparam>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.#ctor(`0,System.Collections.Generic.IComparer{`0})">
            <summary>指定された時刻に実行する新しくスケジュールされた作業項目を作成します。</summary>
            <param name="dueTime">作業項目を実行する絶対時間。</param>
            <param name="comparer">スケジュールされた時刻に基づいて作業項目を比較するために使う比較関数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.Invoke">
            <summary>作業項目を呼び出します。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.InvokeCore">
            <summary>このメソッドを実装して作業項目の呼び出しを実行し、詳細な取り消しのために破棄可能なオブジェクトを返します。</summary>
            <returns>作業項目や派生作業項目を取り消すために使用される破棄可能オブジェクト。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.CompareTo(System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>絶対時間値に基づいて、作業項目を別の作業項目と比較します。</summary>
            <param name="other">現在の作業項目を比較する作業項目。</param>
            <returns>この作業項目と指定された作業項目の間の相対順序。</returns>
            <remarks>不等式演算子は、IComparable 実装と一致する結果を提供するためにオーバーロードされます。等値演算子は、従来の参照等値セマンティクスを実装します。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_LessThan(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>指定した 1 つの ScheduledItem&lt;TAbsolute&gt; オブジェクトの期限が、指定された 2 番目の ScheduledItem&lt;TAbsolute&gt; より前かどうかを判断します。</summary>
            <param name="left">比較する最初のオブジェクト。</param>
            <param name="right">比較する 2 番目のオブジェクト。</param>
            <returns>左の DueTime 値が右の DueTime 値より前の場合は true、それ以外の場合は false です。</returns>
            <remarks>この演算子は、IComparable 実装と一致する結果を提供します。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_LessThanOrEqual(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>指定された 1 つの ScheduledItem&lt;TAbsolute&gt; オブジェクトの期限が、指定された 2 番目の ScheduledItem&lt;TAbsolute&gt; オブジェクトの前または同じかを判断します。</summary>
            <param name="left">比較する最初のオブジェクト。</param>
            <param name="right">比較する 2 番目のオブジェクト。</param>
            <returns>左の DueTime 値が右の DueTime 値より前または同時の場合は true、それ以外の場合は false です。</returns>
            <remarks>この演算子は、IComparable 実装と一致する結果を提供します。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_GreaterThan(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>指定された 1 つの ScheduledItem&lt;TAbsolute&gt; オブジェクトの期限が、指定された 2 番目の ScheduledItem&lt;TAbsolute&gt; オブジェクトの後かどうかを判断します。</summary>
            <param name="left">比較する最初のオブジェクト。</param>
            <param name="right">比較する 2 番目のオブジェクト。</param>
            <returns>左の DueTime 値が右の DueTime 値より後の場合は true、それ以外の場合は false です。</returns>
            <remarks>この演算子は、IComparable 実装と一致する結果を提供します。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_GreaterThanOrEqual(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>指定された 1 つの ScheduledItem&lt;TAbsolute&gt; オブジェクトの期限が、指定された 2 番目の ScheduledItem&lt;TAbsolute&gt; オブジェクトの後、または同じかどうかを判断します。</summary>
            <param name="left">比較する最初のオブジェクト。</param>
            <param name="right">比較する 2 番目のオブジェクト。</param>
            <returns>左の DueTime 値が右の DueTime 値より後または同時の場合は true、それ以外の場合は false です。</returns>
            <remarks>この演算子は、IComparable 実装と一致する結果を提供します。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_Equality(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>指定された 2 つの ScheduledItem&lt;TAbsolute, TValue&gt; オブジェクトが等しいかどうかを判断します。</summary>
            <param name="left">比較する最初のオブジェクト。</param>
            <param name="right">比較する 2 番目のオブジェクト。</param>
            <returns>両方の ScheduledItem&lt;TAbsolute, TValue&gt; が等しい場合は true、それ以外の場合は false です。</returns>
            <remarks>この演算子は、IComparable 実装と一致する結果を提供しません。その代わり、参照等値を実装します。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_Inequality(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>指定された 2 つの ScheduledItem&lt;TAbsolute, TValue&gt; オブジェクトが等しくないかどうかを判断します。</summary>
            <param name="left">比較する最初のオブジェクト。</param>
            <param name="right">比較する 2 番目のオブジェクト。</param>
            <returns>両方の ScheduledItem&lt;TAbsolute, TValue&gt; が等しくない場合は true、それ以外の場合は false です。</returns>
            <remarks>この演算子は、IComparable 実装と一致する結果を提供しません。その代わり、参照等値を実装します。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.Equals(System.Object)">
            <summary>ScheduledItem&lt;TAbsolute&gt; オブジェクトが指定されたオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">現在の ScheduledItem&lt;TAbsolute&gt; オブジェクトと比較するオブジェクト。</param>
            <returns>obj パラメーターが ScheduledItem&lt;TAbsolute&gt; オブジェクトで、現在の ScheduledItem&lt;TAbsolute&gt; オブジェクトと等しい場合は true、それ以外の場合は false です。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.GetHashCode">
            <summary>現在の ScheduledItem&lt;TAbsolute&gt; オブジェクトのハッシュ コードを返します。</summary>
            <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.Cancel">
            <summary>InvokeCore によって返されるリソースをできるだけ早く破棄して、作業項目を取り消します。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.ScheduledItem`1.DueTime">
            <summary>項目の呼び出しの期限が切れる絶対時間を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.ScheduledItem`1.IsCanceled">
            <summary>作業項目が取り消し要求を受信したかどうかを取得します。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ScheduledItem`2">
            <summary>IScheduler.Schedule メソッド呼び出しの具体化に基づいて、スケジュールされた作業項目を表します。</summary>
            <typeparam name="TAbsolute">絶対時間表現タイプ。</typeparam>
            <typeparam name="TValue">スケジュールされたアクションに渡された状態の型。</typeparam>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`2.#ctor(System.Reactive.Concurrency.IScheduler,`1,System.Func{System.Reactive.Concurrency.IScheduler,`1,System.IDisposable},`0,System.Collections.Generic.IComparer{`0})">
            <summary>具体化された作業項目を作成します。</summary>
            <param name="scheduler">スケジュールされたアクションを呼び出す再帰 Scheduler。</param>
            <param name="state">スケジュールされたアクションに渡す状態。</param>
            <param name="action">スケジュールされたアクション。</param>
            <param name="dueTime">スケジュールされたアクションを実行する時間。</param>
            <param name="comparer">スケジュールされた時刻に基づいて作業項目を比較するために使う比較関数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/>、あるいは <paramref name="comparer"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`2.#ctor(System.Reactive.Concurrency.IScheduler,`1,System.Func{System.Reactive.Concurrency.IScheduler,`1,System.IDisposable},`0)">
            <summary>具体化された作業項目を作成します。</summary>
            <param name="scheduler">スケジュールされたアクションを呼び出す再帰 Scheduler。</param>
            <param name="state">スケジュールされたアクションに渡す状態。</param>
            <param name="action">スケジュールされたアクション。</param>
            <param name="dueTime">スケジュールされたアクションを実行する時間。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`2.InvokeCore">
            <summary>teikyou された再帰 Scheduler と状態を使用して、スケジュールされたアクションを呼び出します。</summary>
            <returns>スケジュールされたアクションによって返される取り消しリソース。</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.SchedulerOperation">
            <summary>待機可能な Scheduler 操作を表します。オブジェクトを待機すると、継続が元の Scheduler の作業キューに戻されます。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerOperation.ConfigureAwait(System.Boolean)">
            <summary>継続が元の同期コンテキストで実行されるかどうかを制御します (既定では false)。</summary>
            <param name="continueOnCapturedContext">true は、キャプチャされた同期コンテキストで継続を実行する場合は true、それ以外の場合は false (既定) です。</param>
            <returns>構成済みの待機動作がある Scheduler 操作オブジェクト。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerOperation.GetAwaiter">
            <summary>継続を戻すために使用される Scheduler 操作の待機側を取得します。</summary>
            <returns>Scheduler 操作の待機側。</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.SchedulerOperationAwaiter">
            <summary>(インフラストラクチャ) C# await 式および Visual Basic Await 式で生成されたコードで使用される Scheduler 操作待機側タイプ。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerOperationAwaiter.GetResult">
            <summary>Scheduler 操作を完了し、取り消しが要求された場合に OperationCanceledException をスローします。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerOperationAwaiter.OnCompleted(System.Action)">
            <summary>Scheduler 操作で継続を登録します。</summary>
            <param name="continuation">元の Scheduler で実行する継続。</param>
        </member>
        <member name="P:System.Reactive.Concurrency.SchedulerOperationAwaiter.IsCompleted">
            <summary>Scheduler 操作が完了したかどうかを示します。キャンセルが既に要求されていない限り、false を返します。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.SchedulerQueue`1">
            <summary>スケジュールされた項目を絶対時間で並べ替えた効率的な Scheduler キュー。</summary>
            <typeparam name="TAbsolute">絶対時間表現タイプ。</typeparam>
            <remarks>このタイプはスレッド セーフではありません。ユーザーは、適切な同期を確保する必要があります。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.#ctor">
            <summary>既定の初期容量を持つ新しい Scheduler キューを作成します。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.#ctor(System.Int32)">
            <summary>指定された初期容量を持つ新しい Scheduler キューを作成します。</summary>
            <param name="capacity">Scheduler キューの初期容量。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> は 0 未満です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Enqueue(System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>指定された作業項目をエンキューしてスケジュールします。</summary>
            <param name="scheduledItem">スケジュールする作業項目。</param>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Remove(System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>指定された作業項目を Scheduler キューから削除します。</summary>
            <param name="scheduledItem">Scheduler キューから削除する作業項目。</param>
            <returns>アイテムが見つかった場合は true、それ以外の場合は false です。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Dequeue">
            <summary>Scheduler キューから次の作業項目をデキューします。</summary>
            <returns>Scheduler キュー内の次の作業項目 (削除済み)。</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Peek">
            <summary>Scheduler キュー内の次の作業項目をピークします。</summary>
            <returns>Scheduler キュー内の次の作業項目 (削除されていません)。</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.SchedulerQueue`1.Count">
            <summary>Scheduler キュー内のスケジュールされた項目数を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.Synchronization">
            <summary>監視可能なシーケンスの基本的な同期およびスケジューリング サービスを提供します。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.Synchronization.SubscribeOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>指定された Scheduler でサブスクリプションロジックとサブスクリプション解除ロジックを実行するために、ソース シーケンスをラップします。</summary>
            <typeparam name="TSource">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">ソース シーケンス。</param>
            <param name="scheduler">サブスクリプションおよびサブスクリプション解除アクションを実行する Scheduler。</param>
            <returns>指定された Scheduler でサブスクリプションとサブスクリプション解除が発生するソース シーケンス。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="scheduler"/> は null です。</exception>
            <remarks>指定された Scheduler では、ソース シーケンスにサブスクライブしてソース シーケンスにサブスクリプションを破棄した場合の副作用のみが実行されます。指定された Scheduler でオブザーバー コールバックを呼び出し、コールバック処理を専用スレッドにオフロードしたりする場合は、 <see cref="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)"/> を使用します。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.Synchronization.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
            <summary>指定された同期コンテキストでサブスクリプションとサブスクリプション解除ロジックを実行するためにソース シーケンスをラップします。</summary>
            <typeparam name="TSource">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">ソース シーケンス。</param>
            <param name="context">サブスクリプションとサブスクリプション解除アクションを実行する同期コンテキスト。</param>
            <returns>指定された同期コンテキストでサブスクリプションとサブスクリプション解除が発生するソース シーケンス。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="context"/> は null です。</exception>
            <remarks>ソース シーケンスにサブスクライブし、ソース シーケンスにサブスクリプションを破棄する副作用のみが、指定された同期コンテキストで実行されます。指定された同期コンテキストでオブザーバー コールバックを呼び出し、同期コンテキストで表される UI スレッドにコールバックを投稿する場合などには、<see cref="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)"/> を使用します。</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>指定した Scheduler でオブザーバー コールバックを実行するためにソース シーケンスをラップします。</summary>
            <typeparam name="TSource">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">ソース シーケンス。</param>
            <param name="scheduler">オブザーバーに通知する Scheduler。</param>
            <returns>指定した Scheduler で観測が行われるソース シーケンス。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="scheduler"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
            <summary>指定した同期コンテキストでオブザーバー コールバックを実行するためにソース シーケンスをラップします。</summary>
            <typeparam name="TSource">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">ソース シーケンス。</param>
            <param name="context">オブザーバーに通知する同期コンテキスト。</param>
            <returns>指定された同期コンテキストで観測が行われるソース シーケンス。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="context"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Synchronization.Synchronize``1(System.IObservable{``0})">
            <summary>オブザーバー コールバックが正しくシリアル化されるようにソース シーケンスをラップします。</summary>
            <typeparam name="TSource">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">ソース シーケンス。</param>
            <returns>オブザーバーへの発信呼び出しが同期されるソース シーケンス。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Synchronization.Synchronize``1(System.IObservable{``0},System.Object)">
            <summary>指定されたゲート オブジェクトを使用してオブザーバー コールバックが同期されるようにソース シーケンスをラップします。</summary>
            <typeparam name="TSource">ソース シーケンス内の要素のタイプ。</typeparam>
            <param name="source">ソース シーケンス。</param>
            <param name="gate">各オブザーバーの呼び出しを同期するゲート オブジェクト。</param>
            <returns>オブザーバーへの発信呼び出しが特定のゲート オブジェクトで同期されるソース シーケンス。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> または <paramref name="gate"/> は null です。</exception>
        </member>
        <member name="T:System.Reactive.Producer`1">
            <summary>クエリ演算子を実装するための基本クラス。Observable.Create を使用する場合よりもパフォーマンス上の利点があります。</summary>
            <typeparam name="TSource">結果のシーケンスの要素のタイプ。</typeparam>
        </member>
        <member name="T:System.Reactive.IProducer`1">
            <summary>分散コメントのあるインターフェイス。SubscribeSafe で機能を検出する際のタイプ チェックを改善できます。</summary>
            <typeparam name="TSource">結果のシーケンスの要素のタイプ。</typeparam>
        </member>
        <member name="M:System.Reactive.Producer`1.Subscribe(System.IObserver{`0})">
            <summary>パブリックに表示される Subscribe メソッド。</summary>
            <param name="observer">通知を送信するオブザーバー。プロデューサーの実装では、オブザーバーに関する正しいメッセージ文法を確認する必要があります。</param>
            <returns>サブスクリプションをキャンセルする IDisposable。これにより、基になるシンクにサブスクリプション解除が通知され、それ以降のメッセージはオブザーバーに送信されなくなります。</returns>
        </member>
        <member name="M:System.Reactive.Producer`1.Run(System.IObserver{`0},System.IDisposable,System.Action{System.IDisposable})">
            <summary>プロデューサー オブジェクトへの新しいサブスクリプションを呼び出したクエリ演算子のコア実装。</summary>
            <param name="observer">通知を送信するオブザーバー。プロデューサーの実装では、オブザーバーに関する正しいメッセージ文法を確認する必要があります。</param>
            <param name="cancel">Run 呼び出しから返されたサブスクリプション破棄可能オブジェクトは、シンクに転送できるように渡され、最終的なメッセージの送信後 (または他の理由で早期に) サブスクリプションを破棄できます。</param>
            <param name="setSink">コールバックを使用してシンク オブジェクトをサブスクライバーに通信し、コンシューマーが Dispose 呼び出しをシンクにトンネルできるようにし、処理を停止できます。</param>
            <returns>演算子がイベントの処理に使用するすべてのリソースやサブスクリプションを表す破棄可能。</returns>
            <remarks>このメソッドに渡される <paramref name="observer">オブザーバー</paramref>は、OnError または OnCompleted 呼び出し時に自動デタッチ動作を使用して保護されません。  実装は、適切なリソースの破棄を確保し、メッセージ文法を強制的に実行する必要があります。</remarks>
        </member>
        <member name="T:System.Reactive.Sink`1">
            <summary>クエリ演算子を実装するための基本クラス。発信オブザーバーをミュートするために破棄できる軽量シンクを提供します。</summary>
            <typeparam name="TSource">結果のシーケンスの要素のタイプ。</typeparam>
            <remarks>シンクの実装は、関連するオブザーバーでメッセージ文法を強制的に実行する必要があります。ターミナル メッセージの送信後、関連リソースの取り消しをトリガーし、発信オブザーバーをミュートするために、ペアリング Dispose 呼び出しを行う必要があります。</remarks>
        </member>
        <member name="T:System.Reactive.Concurrency.SynchronizationContextScheduler">
            <summary>以下で作業単位をスケジュールするオブジェクトを表します： <seealso cref="T:System.Threading.SynchronizationContext"/>。</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext)">
            <summary>提供された <see cref="T:System.Threading.SynchronizationContext"/> で作業単位をスケジュールするオブジェクトを作成します。</summary>
            <param name="context">作業単位をスケジュールする同期コンテキスト。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext,System.Boolean)">
            <summary>提供された <see cref="T:System.Threading.SynchronizationContext"/> で作業単位をスケジュールするオブジェクトを作成します。</summary>
            <param name="context">作業単位をスケジュールする同期コンテキスト。</param>
            <param name="alwaysPost">呼び出し元が同じ同期コンテキストにあるかどうかに関係なく、スケジューリングが常に同期コンテキストに投稿するかどうかを構成します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>実行するアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">実行するアクション。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 後に実行されるアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">実行するアクション。</param>
            <param name="dueTime">その後にアクションを実行する相対時間。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> は null です。</exception>
        </member>
        <member name="T:System.Reactive.Concurrency.DefaultScheduler">
            <summary>プラットフォームの既定の Scheduler で作業単位をスケジュールするオブジェクトを表します。</summary>
            <seealso cref="P:System.Reactive.Concurrency.Scheduler.Default">この静的プロパティを通じて公開されるこのタイプのシングルトン インスタンス。</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.DefaultScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>実行するアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">実行するアクション。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.DefaultScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>System.Threading.Timer オブジェクトを使用して、dueTime 後に実行されるアクションをスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="state">実行するアクションに渡される状態。</param>
            <param name="action">実行するアクション。</param>
            <param name="dueTime">その後にアクションを実行する相対時間。</param>
            <returns>スケジュールされたアクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.DefaultScheduler.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
            <summary>System.Threading.Timer オブジェクトを使用して、定期的な作業をスケジュールします。</summary>
            <typeparam name="TState">スケジュールされたアクションに渡される状態のタイプ。</typeparam>
            <param name="state">最初の繰り返し後にアクションに渡される初期状態。</param>
            <param name="period">作業を定期的に実行する期間。</param>
            <param name="action">実行するアクション。状態が更新される可能性があります。</param>
            <returns>スケジュールされた定期アクション (ベスト エフォート) を取り消すために使用される破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> は TimeSpan.Zero 未満です。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.DefaultScheduler.GetService(System.Type)">
            <summary>インターフェイスのタイプ別に Scheduler サービスを検出します。</summary>
            <param name="serviceType">検出する Scheduler サービス インターフェイスのタイプ。</param>
            <returns>要求されたサービスを実装するオブジェクト (使用可能な場合)。それ以外の場合は null です。</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.DefaultScheduler.Instance">
            <summary>既定の Scheduler のシングルトン インスタンスを取得します。</summary>
        </member>
        <member name="T:System.Reactive.Disposables.AnonymousDisposable">
            <summary>アクション ベースの破棄可能を表します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.AnonymousDisposable.#ctor(System.Action)">
            <summary>廃棄に使用される特定のアクションを使用して、新しい破棄可能を作成します。</summary>
            <param name="dispose">Dispose を呼び出した後に実行される廃棄アクション。</param>
        </member>
        <member name="M:System.Reactive.Disposables.AnonymousDisposable.Dispose">
            <summary>現在のインスタンスがまだ破棄されていない場合にのみ、破棄アクションを呼び出します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.AnonymousDisposable.IsDisposed">
            <summary>オブジェクトが破棄されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Disposables.BooleanDisposable">
            <summary>破棄状態を確認できる破棄可能なリソースを表します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.BooleanDisposable.#ctor">
            <summary><see cref="T:System.Reactive.Disposables.BooleanDisposable"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.BooleanDisposable.Dispose">
            <summary>状態を破棄に設定します。これは <see cref="P:System.Reactive.Disposables.BooleanDisposable.IsDisposed"/> プロパティを介して監視できます。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.BooleanDisposable.IsDisposed">
            <summary>オブジェクトが破棄されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Disposables.CancellationDisposable">
            <summary>破棄後に取り消し要求状態に設定される <seealso cref="T:System.Threading.CancellationToken"/> がある破棄可能なリソースを表します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.CancellationDisposable.#ctor(System.Threading.CancellationTokenSource)">
            <summary><see cref="T:System.Reactive.Disposables.CancellationDisposable"/> クラスの新しいインスタンスを初期化します。これは既存の <seealso cref="T:System.Threading.CancellationTokenSource"/>を使用します。</summary>
            <param name="cts"><seealso cref="T:System.Threading.CancellationTokenSource"/> はキャンセルに使用されます。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cts"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CancellationDisposable.#ctor">
            <summary><see cref="T:System.Reactive.Disposables.CancellationDisposable"/> クラスの新しいインスタンスを初期化します。これは新しい <seealso cref="T:System.Threading.CancellationTokenSource"/>を使用します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.CancellationDisposable.Dispose">
            <summary>基になる <seealso cref="T:System.Threading.CancellationTokenSource"/>を取り消します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.CancellationDisposable.Token">
            <summary>この CancellationDisposable で使用する <see cref="T:System.Threading.CancellationToken"/> を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.CancellationDisposable.IsDisposed">
            <summary>オブジェクトが破棄されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Disposables.CompositeDisposable">
            <summary>一緒に破棄される破棄可能リソースのグループを表します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor">
            <summary>最初は破棄可能を含めず、<see cref="T:System.Reactive.Disposables.CompositeDisposable"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.Int32)">
            <summary>指定された数の破棄可能を使用して、<see cref="T:System.Reactive.Disposables.CompositeDisposable"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="capacity">新しい CompositeDisposable が最初に格納できる破棄可能の数。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> は 0 未満です。</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.IDisposable[])">
            <summary>破棄可能のグループから <see cref="T:System.Reactive.Disposables.CompositeDisposable"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="disposables">一緒に破棄される使い捨て。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposables"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>破棄可能のグループから <see cref="T:System.Reactive.Disposables.CompositeDisposable"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="disposables">一緒に破棄される使い捨て。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposables"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Add(System.IDisposable)">
            <summary>CompositeDisposable に破棄可能を追加するか、Composite Disposable が破棄された場合は破棄可能を破棄します。</summary>
            <param name="item">追加する破棄可能。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Remove(System.IDisposable)">
            <summary>CompositeDisposable から破棄可能の最初の発生を削除して破棄します。</summary>
            <param name="item">削除する破棄可能。</param>
            <returns>見つかった場合は true、それ以外の場合は false です。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Dispose">
            <summary>グループ内のすべての破棄可能を破棄し、グループから削除します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Clear">
            <summary>CompositeDisposable からすべての破棄可能を削除して破棄しますが、CompositeDisposable は破棄しません。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Contains(System.IDisposable)">
            <summary>CompositeDisposable に特定の破棄可能が含まれているかどうかを判定します。</summary>
            <param name="item">検索する破棄可能。</param>
            <returns>破棄可能が見つかった場合は true、それ以外の場合は false です。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.CopyTo(System.IDisposable[],System.Int32)">
            <summary>CompositeDisposable に含まれる破棄可能を、特定の配列インデックスから始めて配列にコピーします。</summary>
            <param name="array">含まれている破棄可能をコピーする配列。</param>
            <param name="arrayIndex">グループの最初の破棄可能をコピーするターゲット インデックス。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> は null です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> は 0 未満です。-または- <paramref name="arrayIndex"/> は配列の長さ以上です。</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.GetEnumerator">
            <summary>CompositeDisposable を介して反復する列挙子を返します。</summary>
            <returns>使い捨てに反復する列挙子。</returns>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.System#Collections#IEnumerable#GetEnumerator">
            <summary>CompositeDisposable を介して反復する列挙子を返します。</summary>
            <returns>使い捨てに反復する列挙子。</returns>
        </member>
        <member name="P:System.Reactive.Disposables.CompositeDisposable.Count">
            <summary>CompositeDisposable に含まれる破棄可能の数を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.CompositeDisposable.IsReadOnly">
            <summary>常に false を返します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.CompositeDisposable.IsDisposed">
            <summary>オブジェクトが破棄されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Disposables.ContextDisposable">
            <summary>破棄呼び出しが指定された以下に転記される破棄可能なリソースを表します: <seealso cref="T:System.Threading.SynchronizationContext"/>。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.ContextDisposable.#ctor(System.Threading.SynchronizationContext,System.IDisposable)">
            <summary>指定された破棄可能なリソースを破棄するために指定された <see cref="T:System.Threading.SynchronizationContext"/> を使用する <see cref="T:System.Reactive.Disposables.ContextDisposable"/>  クラスの新しいインスタンスを初期化します。</summary>
            <param name="context">廃棄を実行するコンテキスト。</param>
            <param name="disposable">指定された同期コンテキストで実行する Dispose 操作のある破棄可能。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> または <paramref name="disposable"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Disposables.ContextDisposable.Dispose">
            <summary>提供された <see cref="T:System.Threading.SynchronizationContext"/> の基になる破棄可能を破棄します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.ContextDisposable.Context">
            <summary>提供された <see cref="T:System.Threading.SynchronizationContext"/> を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.ContextDisposable.IsDisposed">
            <summary>オブジェクトが破棄されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Disposables.DefaultDisposable">
            <summary>廃棄時に何もしない破棄可能を表します。</summary>
        </member>
        <member name="F:System.Reactive.Disposables.DefaultDisposable.Instance">
            <summary>既定のシングルトン破棄可能。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.DefaultDisposable.Dispose">
            <summary>何もしません。</summary>
        </member>
        <member name="T:System.Reactive.Disposables.Disposable">
            <summary>Disposable を作成するための一連の静的メソッドを提供します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.Disposable.Create(System.Action)">
            <summary>破棄時に指定されたアクションを呼び出す破棄可能なオブジェクトを作成します。</summary>
            <param name="dispose"><see cref="M:System.IDisposable.Dispose"/> への最初の呼出し中に実行するアクション。アクションが実行されるのは、せいぜい 1 回です。</param>
            <returns>破棄時に特定のアクションを実行する破棄可能なオブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dispose"/> は null です。</exception>
        </member>
        <member name="P:System.Reactive.Disposables.Disposable.Empty">
            <summary>破棄時に何もしない破棄可能を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Disposables.MultipleAssignmentDisposable">
            <summary>基になる破棄可能なリソースを別の破棄可能なリソースにスワップできる破棄可能なリソースを表します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.MultipleAssignmentDisposable.#ctor">
            <summary>現在、基になる破棄可能がない <see cref="T:System.Reactive.Disposables.MultipleAssignmentDisposable"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.MultipleAssignmentDisposable.Dispose">
            <summary>基になる使い捨てだけでなく、将来のすべての置換を破棄します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.MultipleAssignmentDisposable.IsDisposed">
            <summary>オブジェクトが破棄されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.MultipleAssignmentDisposable.Disposable">
            <summary>基になる破棄可能を取得または設定します。破棄後、このプロパティを取得した結果は未定義になります。</summary>
            <remarks>MutableDisposable が既に破棄されている場合、このプロパティへの割り当てにより、特定の破棄可能オブジェクトが即座に破棄されます。</remarks>
        </member>
        <member name="T:System.Reactive.Disposables.RefCountDisposable">
            <summary><see cref="M:System.Reactive.Disposables.RefCountDisposable.GetDisposable">に依存する破棄可能オブジェクト</see>がすべて破棄された場合にのみ、基になる破棄可能なリソースを破棄する破棄可能なリソースを表します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.RefCountDisposable.#ctor(System.IDisposable)">
            <summary>指定された破棄可能で <see cref="T:System.Reactive.Disposables.RefCountDisposable"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="disposable">基になる破棄可能。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposable"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Disposables.RefCountDisposable.GetDisposable">
            <summary>従属的な破棄可能を返します。これは破棄されると、基になる破棄可能で refcount が減少します。</summary>
            <returns>基になる破棄可能の有効期間を管理する参照カウントに寄与する従属的な破棄可能。</returns>
        </member>
        <member name="M:System.Reactive.Disposables.RefCountDisposable.Dispose">
            <summary>すべての従属的な破棄可能が破棄された場合にのみ、基になる破棄可能を破棄します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.RefCountDisposable.IsDisposed">
            <summary>オブジェクトが破棄されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Disposables.ScheduledDisposable">
            <summary>廃棄呼び出しが指定された <seealso cref="T:System.Reactive.Concurrency.IScheduler"/>でスケジュールされる破棄可能なリソースを表します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.ScheduledDisposable.#ctor(System.Reactive.Concurrency.IScheduler,System.IDisposable)">
            <summary>破棄可能を破棄する<see cref="T:System.Reactive.Concurrency.IScheduler"/> で使用する <see cref="T:System.Reactive.Disposables.ScheduledDisposable"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="scheduler">使い捨てリソースが破棄される Scheduler。</param>
            <param name="disposable">特定の Scheduler で破棄する破棄可能なリソース。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> または <paramref name="disposable"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Disposables.ScheduledDisposable.Dispose">
            <summary>提供された Scheduler でラップされた破棄可能を破棄します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.ScheduledDisposable.Scheduler">
            <summary>破棄可能なリソースが破棄される Scheduler を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.ScheduledDisposable.Disposable">
            <summary>基になる破棄可能を取得します。破棄後、結果は未定義になります。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.ScheduledDisposable.IsDisposed">
            <summary>オブジェクトが破棄されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Disposables.SerialDisposable">
            <summary>基になる破棄可能なリソースを別の破棄可能なリソースに置き換え、以前の基になる破棄可能なリソースを自動的に破棄できる破棄可能なリソースを表します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.SerialDisposable.#ctor">
            <summary><see cref="T:System.Reactive.Disposables.SerialDisposable"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.SerialDisposable.Dispose">
            <summary>基になる使い捨てだけでなく、将来のすべての置換を破棄します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.SerialDisposable.IsDisposed">
            <summary>オブジェクトが破棄されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.SerialDisposable.Disposable">
            <summary>基になる破棄可能を取得または設定します。</summary>
            <remarks>SerialDisposable が既に破棄されている場合、このプロパティに割り当てると、特定の破棄可能なオブジェクトが即座に破棄されます。このプロパティを割り当てると、前の破棄可能なオブジェクトが破棄されます。</remarks>
        </member>
        <member name="T:System.Reactive.Disposables.SingleAssignmentDisposable">
            <summary>基になる破棄可能なリソースの単一の割り当てのみを許可する破棄可能なリソースを表します。基になる破棄可能なリソースが既に設定されている場合、基になる破棄可能なリソースを設定しようとすると、<see cref="T:System.InvalidOperationException"/> がスローされます。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.SingleAssignmentDisposable.#ctor">
            <summary><see cref="T:System.Reactive.Disposables.SingleAssignmentDisposable"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:System.Reactive.Disposables.SingleAssignmentDisposable.Dispose">
            <summary>基になる破棄可能を破棄します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.SingleAssignmentDisposable.IsDisposed">
            <summary>オブジェクトが破棄されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:System.Reactive.Disposables.SingleAssignmentDisposable.Disposable">
            <summary>基になる破棄可能を取得または設定します。破棄後、このプロパティを取得した結果は未定義になります。</summary>
            <exception cref="T:System.InvalidOperationException">SingleAssignmentDisposable が既に割り当てられている場合にスローされます。</exception>
        </member>
        <member name="T:System.Reactive.PlatformServices.IExceptionServices">
            <summary>(インフラストラクチャ) 例外を再スローするサービス。</summary>
            <remarks>このタイプは Rx インフラストラクチャで使用され、一般の使用や実装向けではありません。タイプの機能とその使用の上位互換性について保証はありません。</remarks>
        </member>
        <member name="M:System.Reactive.PlatformServices.IExceptionServices.Rethrow(System.Exception)">
            <summary>指定された例外を再スローします。</summary>
            <param name="exception">再スローする例外。</param>
        </member>
        <member name="T:System.Reactive.PlatformServices.HostLifecycleService">
            <summary>(インフラストラクチャ) ホストのライフサイクル管理サービスへのアクセスを提供します。</summary>
        </member>
        <member name="M:System.Reactive.PlatformServices.HostLifecycleService.AddRef">
            <summary>ホスト ライフサイクル マネージャーへの参照を追加し、通知を送信します。</summary>
        </member>
        <member name="M:System.Reactive.PlatformServices.HostLifecycleService.Release">
            <summary>ホスト ライフサイクル マネージャーへの参照を削除し、削除された参照が最後の参照だった場合に通知の送信を停止します。</summary>
        </member>
        <member name="E:System.Reactive.PlatformServices.HostLifecycleService.Suspending">
            <summary>ホストがアプリケーションを中断したときに発生するイベント。</summary>
        </member>
        <member name="E:System.Reactive.PlatformServices.HostLifecycleService.Resuming">
            <summary>ホストがアプリケーションを再開したときに発生するイベント。</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.IHostLifecycleNotifications">
            <summary>(インフラストラクチャ) ホストのライフサイクル イベントに関する通知を提供します。</summary>
        </member>
        <member name="E:System.Reactive.PlatformServices.IHostLifecycleNotifications.Suspending">
            <summary>ホストが中断したときに発生するイベント。</summary>
        </member>
        <member name="E:System.Reactive.PlatformServices.IHostLifecycleNotifications.Resuming">
            <summary>ホストが再開したときに発生するイベント。</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.HostSuspendingEventArgs">
            <summary>(インフラストラクチャ) ホスト中断イベントのイベント引数。</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.HostResumingEventArgs">
            <summary>(インフラストラクチャ) ホスト再開イベントのイベント引数。</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.IPlatformEnlightenmentProvider">
            <summary>(インフラストラクチャ) 啓発プロバイダーのインターフェイス。</summary>
            <remarks>このタイプは Rx インフラストラクチャで使用され、一般の使用や実装向けではありません。タイプの機能とその使用の上位互換性について保証はありません。</remarks>
        </member>
        <member name="M:System.Reactive.PlatformServices.IPlatformEnlightenmentProvider.GetService``1(System.Object[])">
            <summary>(インファストラクチャ) 指定されたサービスの取得を試みます。</summary>
            <typeparam name="T">サービスのタイプ。</typeparam>
            <param name="args">引数の省略可能なセット。</param>
            <returns>サービス インスタンス、またはこれが見つからない場合は null です。</returns>
        </member>
        <member name="T:System.Reactive.PlatformServices.PlatformEnlightenmentProvider">
            <summary>(インフラストラクチャ) プラットフォーム固有のフレームワーク啓発向けのプロバイダー。</summary>
            <remarks>このタイプは Rx インフラストラクチャで使用され、一般の使用や実装向けではありません。</remarks>
        </member>
        <member name="P:System.Reactive.PlatformServices.PlatformEnlightenmentProvider.Current">
            <summary>(インフラストラクチャ) 現在の啓発プロバイダーを取得します。まだ何も読み込まれていない場合、このプロパティにアクセスするとプロバイダの解決がトリガーされます。</summary>
            <remarks>このメンバーは Rx インフラストラクチャで使用され、一般の使用や実装向けではありません。</remarks>
        </member>
        <member name="T:System.Reactive.PlatformServices.SystemClock">
            <summary>(インフラストラクチャ) ローカル システム クロック サービスへのアクセスを提供します。</summary>
            <remarks>このタイプは Rx インフラストラクチャで使用され、一般の使用や実装向けではありません。タイプの機能とその使用の上位互換性について保証はありません。</remarks>
        </member>
        <member name="M:System.Reactive.PlatformServices.SystemClock.AddRef">
            <summary>システム クロック モニターへの参照を追加し、通知を送信します。</summary>
            <exception cref="T:System.NotSupportedException">システムがクロック変更通知の送信をサポートしていない場合にスローされます。</exception>
        </member>
        <member name="M:System.Reactive.PlatformServices.SystemClock.Release">
            <summary>システム クロック モニターへの参照を削除し、削除された参照が最後の参照の場合は通知の送信を停止します。</summary>
        </member>
        <member name="P:System.Reactive.PlatformServices.SystemClock.UtcNow">
            <summary>ローカル システム クロック時刻を取得します。</summary>
        </member>
        <member name="E:System.Reactive.PlatformServices.SystemClock.SystemClockChanged">
            <summary>システム クロックの変更が検出されたときに発生するイベント (AddRef 呼び出しで示される関心がある場合)。</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.ISystemClock">
            <summary>(インフラストラクチャ) ローカル システム クロックへのアクセスを提供します。</summary>
            <remarks>このタイプは Rx インフラストラクチャで使用され、一般の使用や実装向けではありません。タイプの機能とその使用の上位互換性について保証はありません。</remarks>
        </member>
        <member name="P:System.Reactive.PlatformServices.ISystemClock.UtcNow">
            <summary>現在の時刻を取得します。</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.INotifySystemClockChanged">
            <summary>(インフラストラクチャ) システム クロックの変更についてローカル Scheduler に通知するメカニズムを提供します。</summary>
            <remarks>このタイプは Rx インフラストラクチャで使用され、一般の使用や実装向けではありません。タイプの機能とその使用の上位互換性について保証はありません。</remarks>
        </member>
        <member name="E:System.Reactive.PlatformServices.INotifySystemClockChanged.SystemClockChanged">
            <summary>システム クロックの変更が検出されたときに発生するイベント。</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.SystemClockChangedEventArgs">
            <summary>(インフラストラクチャ) システム クロック変更通知のイベント引数。</summary>
            <remarks>このタイプは Rx インフラストラクチャで使用され、一般の使用や実装向けではありません。タイプの機能とその使用の上位互換性について保証はありません。</remarks>
        </member>
        <member name="M:System.Reactive.PlatformServices.SystemClockChangedEventArgs.#ctor">
            <summary>不明な古い時刻と新しい時刻がある新しいシステム クロック通知オブジェクトを作成します。</summary>
        </member>
        <member name="M:System.Reactive.PlatformServices.SystemClockChangedEventArgs.#ctor(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>指定された古い時刻と新しい時刻がある新しいシステム クロック通知オブジェクトを作成します。</summary>
            <param name="oldTime">システム クロックが変更される前の時刻、または不明な場合は DateTimeOffset.MinValue。</param>
            <param name="newTime">システム クロックが変更された後の時刻、または不明な場合は DateTimeOffset.MaxValue。</param>
        </member>
        <member name="P:System.Reactive.PlatformServices.SystemClockChangedEventArgs.OldTime">
            <summary>システム クロックが変更される前の時刻、または不明な場合は DateTimeOffset.MinValue を取得します。</summary>
        </member>
        <member name="P:System.Reactive.PlatformServices.SystemClockChangedEventArgs.NewTime">
            <summary>システム クロックが変更された後の時刻、または不明な場合は DateTimeOffset.MaxValue を取得します。</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.DefaultSystemClock">
            <summary>(インフラストラクチャ) ローカル システム クロックへのアクセスを提供します。</summary>
        </member>
        <member name="P:System.Reactive.PlatformServices.DefaultSystemClock.UtcNow">
            <summary>現在の時刻を取得します。</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor">
            <summary>(インフラストラクチャ) 定期的なタイマーに基づいてシステム クロックの変更を監視します。</summary>
        </member>
        <member name="M:System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor.#ctor(System.TimeSpan)">
            <summary>指定されたポーリング間隔でシステム クロックの変更に対する新しいモニターを作成します。</summary>
            <param name="period">システム クロック変更のポーリング間隔。</param>
        </member>
        <member name="E:System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor.SystemClockChanged">
            <summary>システム クロックの変更が検出されたときに発生するイベント。</summary>
        </member>
        <member name="T:System.Reactive.NotificationKind">
            <summary>通知のタイプを示します。</summary>
        </member>
        <member name="F:System.Reactive.NotificationKind.OnNext">
            <summary>OnNext 通知を表します。</summary>
        </member>
        <member name="F:System.Reactive.NotificationKind.OnError">
            <summary>OnError 通知を表します。</summary>
        </member>
        <member name="F:System.Reactive.NotificationKind.OnCompleted">
            <summary>OnCompleted 通知を表します。</summary>
        </member>
        <member name="T:System.Reactive.Notification`1">
            <summary>オブザーバーへの通知を表します。</summary>
            <typeparam name="T">オブザーバーが受け取る要素のタイプ。</typeparam>
        </member>
        <member name="M:System.Reactive.Notification`1.#ctor">
            <summary>派生タイプで使用される既定のコンストラクター。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.Equals(System.Reactive.Notification{`0})">
            <summary>現在の Notification&lt;T&gt; オブジェクトに、指定された Notification&lt;T&gt; 値と同じオブザーバー メッセージ ペイロードがあるかどうかを判定します。</summary>
            <param name="other">現在の Notification&lt;T&gt; オブジェクトと比較するオブジェクト。</param>
            <returns>両方の Notification&lt;T&gt; オブジェクトに同じオブザーバー メッセージ ペイロードがある場合は true、それ以外の場合は false です。</returns>
            <remarks>Notification&lt;T&gt; オブジェクトの等値は、通知の Kind や Value または Exception (該当する場合) など、それらが表すオブザーバー メッセージ ペイロードの等値に基づいています。つまり、2 つの Notification&lt;T&gt; オブジェクトは、同じオブザーバー メソッド呼び出しを表さなくても、Kind が同じで、オブザーバー メソッドに渡すパラメーターが等しい場合は等しくなる可能性があります。2 つの Notification&lt;T&gt; オブジェクトが同じオブザーバー メソッド呼び出しを表しているかどうかを判断する場合は、代わりに Object.ReferenceEquals ID 等値を使用します。</remarks>
        </member>
        <member name="M:System.Reactive.Notification`1.op_Equality(System.Reactive.Notification{`0},System.Reactive.Notification{`0})">
            <summary>指定された 2 つの Notification&lt;T&gt; オブジェクトのオブザーバー メッセージ ペイロードが同じかどうかを判定します。</summary>
            <param name="left">比較する最初の Notification&lt;T&gt;、または null。</param>
            <param name="right">比較する 2 番目の Notification&lt;T&gt;、または null。</param>
            <returns>最初の Notification&lt;T&gt; 値のオブザーバー メッセージ ペイロードが 2 番目の Notification&lt;T&gt; 値と同じ場合は true、それ以外の場合は false です。</returns>
            <remarks>Notification&lt;T&gt; オブジェクトの等値は、通知の Kind や Value または Exception (該当する場合) など、それらが表すオブザーバー メッセージ ペイロードの等値に基づいています。つまり、2 つの Notification&lt;T&gt; オブジェクトは、同じオブザーバー メソッド呼び出しを表さなくても、Kind が同じで、オブザーバー メソッドに渡すパラメーターが等しい場合は等しくなる可能性があります。2 つの Notification&lt;T&gt; オブジェクトが同じオブザーバー メソッド呼び出しを表しているかどうかを判断する場合は、代わりに Object.ReferenceEquals ID 等値を使用します。</remarks>
        </member>
        <member name="M:System.Reactive.Notification`1.op_Inequality(System.Reactive.Notification{`0},System.Reactive.Notification{`0})">
            <summary>指定された 2 つの Notification&lt;T&gt; オブジェクトに異なるオブザーバー メッセージ ペイロードがあるかどうかを判定指定します。</summary>
            <param name="left">比較する最初の Notification&lt;T&gt;、または null。</param>
            <param name="right">比較する 2 番目の Notification&lt;T&gt;、または null。</param>
            <returns>最初の Notification&lt;T&gt; 値に 2 番目の Notification&lt;T&gt; 値とは異なるオブザーバー メッセージ ペイロードがある場合は true、それ以外の場合は false です。</returns>
            <remarks>Notification&lt;T&gt; オブジェクトの等値は、通知の Kind や Value または Exception (該当する場合) など、それらが表すオブザーバー メッセージ ペイロードの等値に基づいています。つまり、2 つの Notification&lt;T&gt; オブジェクトは、同じオブザーバー メソッド呼び出しを表さなくても、Kind が同じで、オブザーバー メソッドに渡すパラメーターが等しい場合は等しくなる可能性があります。2 つの Notification&lt;T&gt; オブジェクトが別のオブザーバー メソッド呼び出しを表すかどうかを判断する場合は、代わりに Object.ReferenceEquals ID 等値を使用します。</remarks>
        </member>
        <member name="M:System.Reactive.Notification`1.Equals(System.Object)">
            <summary>指定された System.Object が現在の Notification&lt;T&gt; と等しいかどうかを判断します。</summary>
            <param name="obj">現在の Notification&lt;T&gt; と比較する System.Object。</param>
            <returns>指定された System.Object が現在の Notification&lt;T&gt; と等しい場合は true、それ以外の場合は false です。</returns>
            <remarks>Notification&lt;T&gt; オブジェクトの等値は、通知の Kind や Value または Exception (該当する場合) など、それらが表すオブザーバー メッセージ ペイロードの等値に基づいています。つまり、2 つの Notification&lt;T&gt; オブジェクトは、同じオブザーバー メソッド呼び出しを表さなくても、Kind が同じで、オブザーバー メソッドに渡すパラメーターが等しい場合は等しくなる可能性があります。2 つの Notification&lt;T&gt; オブジェクトが同じオブザーバー メソッド呼び出しを表しているかどうかを判断する場合は、代わりに Object.ReferenceEquals ID 等値を使用します。</remarks>
        </member>
        <member name="M:System.Reactive.Notification`1.Accept(System.IObserver{`0})">
            <summary>通知に対応するオブザーバーのメソッドを呼び出します。</summary>
            <param name="observer">通知を呼び出すオブザーバー。</param>
        </member>
        <member name="M:System.Reactive.Notification`1.Accept``1(System.Reactive.IObserver{`0,``0})">
            <summary>通知に対応するオブザーバーのメソッドを呼び出し、生成された結果を返します。</summary>
            <typeparam name="TResult">オブザーバーの通知ハンドラーから返される結果のタイプ。</typeparam>
            <param name="observer">通知を呼び出すオブザーバー。</param>
            <returns>観察によって生成される結果。</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>通知に対応するデリゲートを呼び出します。</summary>
            <param name="onNext">OnNext 通知を呼び出すデリゲート。</param>
            <param name="onError">OnError 通知を呼び出すデリゲート。</param>
            <param name="onCompleted">OnCompleted 通知を呼び出すデリゲート。</param>
        </member>
        <member name="M:System.Reactive.Notification`1.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
            <summary>通知に対応するデリゲートを呼び出し、生成された結果を返します。</summary>
            <typeparam name="TResult">通知ハンドラー デリゲートから返される結果のタイプ。</typeparam>
            <param name="onNext">OnNext 通知を呼び出すデリゲート。</param>
            <param name="onError">OnError 通知を呼び出すデリゲート。</param>
            <param name="onCompleted">OnCompleted 通知を呼び出すデリゲート。</param>
            <returns>観察によって生成される結果。</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.ToObservable">
            <summary>即時 Scheduler を使用して、単一の通知で監視可能なシーケンスを返します。</summary>
            <returns>サブスクリプション時に通知の動作を表示する監視可能なシーケンス。</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.ToObservable(System.Reactive.Concurrency.IScheduler)">
            <summary>単一の通知がある監視可能なシーケンスを返します。</summary>
            <param name="scheduler">通知呼び出しを送信する Scheduler。</param>
            <returns>サブスクリプション時に通知の動作を表示する監視可能なシーケンス。</returns>
        </member>
        <member name="P:System.Reactive.Notification`1.Value">
            <summary>OnNext 通知の値を返すか、例外をスローします。</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.HasValue">
            <summary>通知に値があるかどうかを示す値を返します。</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.Exception">
            <summary>OnError 通知の例外を返すか、null を返します。</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.Kind">
            <summary>表される通知の種類を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Notification`1.OnNextNotification">
            <summary>オブザーバーへの OnNext 通知を表します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.#ctor(`0)">
            <summary>新しい値の通知を作成します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Equals(System.Reactive.Notification{`0})">
            <summary>このインスタンスと指定されたオブジェクトが等しいかどうかを示します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.ToString">
            <summary>このインスタンスの文字列表現を返します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Accept(System.IObserver{`0})">
            <summary>通知に対応するオブザーバーのメソッドを呼び出します。</summary>
            <param name="observer">通知を呼び出すオブザーバー。</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Accept``1(System.Reactive.IObserver{`0,``0})">
            <summary>通知に対応するオブザーバーのメソッドを呼び出し、生成された結果を返します。</summary>
            <param name="observer">通知を呼び出すオブザーバー。</param>
            <returns>観察によって生成される結果。</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>通知に対応するデリゲートを呼び出します。</summary>
            <param name="onNext">OnNext 通知を呼び出すデリゲート。</param>
            <param name="onError">OnError 通知を呼び出すデリゲート。</param>
            <param name="onCompleted">OnCompleted 通知を呼び出すデリゲート。</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
            <summary>通知に対応するデリゲートを呼び出し、生成された結果を返します。</summary>
            <param name="onNext">OnNext 通知を呼び出すデリゲート。</param>
            <param name="onError">OnError 通知を呼び出すデリゲート。</param>
            <param name="onCompleted">OnCompleted 通知を呼び出すデリゲート。</param>
            <returns>観察によって生成される結果。</returns>
        </member>
        <member name="P:System.Reactive.Notification`1.OnNextNotification.Value">
            <summary>OnNext 通知の値を返します。</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnNextNotification.Exception">
            <summary>null を返します。</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnNextNotification.HasValue">
            <summary>true を返します。</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnNextNotification.Kind">
            <summary>NotificationKind.OnNext を返します。</summary>
        </member>
        <member name="T:System.Reactive.Notification`1.OnErrorNotification">
            <summary>オブザーバーへの OnError 通知を表します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.#ctor(System.Exception)">
            <summary>例外の通知を作成します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Equals(System.Reactive.Notification{`0})">
            <summary>このインスタンスと他のインスタンスが等しいかどうかを示します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.ToString">
            <summary>このインスタンスの文字列表現を返します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Accept(System.IObserver{`0})">
            <summary>通知に対応するオブザーバーのメソッドを呼び出します。</summary>
            <param name="observer">通知を呼び出すオブザーバー。</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Accept``1(System.Reactive.IObserver{`0,``0})">
            <summary>通知に対応するオブザーバーのメソッドを呼び出し、生成された結果を返します。</summary>
            <param name="observer">通知を呼び出すオブザーバー。</param>
            <returns>観察によって生成される結果。</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>通知に対応するデリゲートを呼び出します。</summary>
            <param name="onNext">OnNext 通知を呼び出すデリゲート。</param>
            <param name="onError">OnError 通知を呼び出すデリゲート。</param>
            <param name="onCompleted">OnCompleted 通知を呼び出すデリゲート。</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
            <summary>通知に対応するデリゲートを呼び出し、生成された結果を返します。</summary>
            <param name="onNext">OnNext 通知を呼び出すデリゲート。</param>
            <param name="onError">OnError 通知を呼び出すデリゲート。</param>
            <param name="onCompleted">OnCompleted 通知を呼び出すデリゲート。</param>
            <returns>観察によって生成される結果。</returns>
        </member>
        <member name="P:System.Reactive.Notification`1.OnErrorNotification.Value">
            <summary>例外をスローします。</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnErrorNotification.Exception">
            <summary>例外を返します。</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnErrorNotification.HasValue">
            <summary>false を返します。</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnErrorNotification.Kind">
            <summary>NotificationKind.OnError を返します。</summary>
        </member>
        <member name="T:System.Reactive.Notification`1.OnCompletedNotification">
            <summary>オブザーバーへの OnCompleted 通知を表します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.#ctor">
            <summary>シーケンスの終了の通知を作成します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Equals(System.Reactive.Notification{`0})">
            <summary>このインスタンスと他のインスタンスが等しいかどうかを示します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.ToString">
            <summary>このインスタンスの文字列表現を返します。</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Accept(System.IObserver{`0})">
            <summary>通知に対応するオブザーバーのメソッドを呼び出します。</summary>
            <param name="observer">通知を呼び出すオブザーバー。</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Accept``1(System.Reactive.IObserver{`0,``0})">
            <summary>通知に対応するオブザーバーのメソッドを呼び出し、生成された結果を返します。</summary>
            <param name="observer">通知を呼び出すオブザーバー。</param>
            <returns>観察によって生成される結果。</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>通知に対応するデリゲートを呼び出します。</summary>
            <param name="onNext">OnNext 通知を呼び出すデリゲート。</param>
            <param name="onError">OnError 通知を呼び出すデリゲート。</param>
            <param name="onCompleted">OnCompleted 通知を呼び出すデリゲート。</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
            <summary>通知に対応するデリゲートを呼び出し、生成された結果を返します。</summary>
            <param name="onNext">OnNext 通知を呼び出すデリゲート。</param>
            <param name="onError">OnError 通知を呼び出すデリゲート。</param>
            <param name="onCompleted">OnCompleted 通知を呼び出すデリゲート。</param>
            <returns>観察によって生成される結果。</returns>
        </member>
        <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Value">
            <summary>InvalidOperationException をスローします。</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Exception">
            <summary>null を返します。</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnCompletedNotification.HasValue">
            <summary>false を返します。</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Kind">
            <summary>NotificationKind.OnCompleted を返します。</summary>
        </member>
        <member name="T:System.Reactive.Notification">
            <summary>通知を作成するための一連の静的メソッドを提供します。</summary>
        </member>
        <member name="M:System.Reactive.Notification.CreateOnNext``1(``0)">
            <summary>オブザーバーへの OnNext 通知を表すオブジェクトを作成します。</summary>
            <typeparam name="T">オブザーバーが受け取る要素のタイプ。通知を監視可能なシーケンスに非具体化すると、このタイプはシーケンスの要素タイプとして使用されます。</typeparam>
            <param name="value">通知に含まれる値。</param>
            <returns>値を含む OnNext 通知。</returns>
        </member>
        <member name="M:System.Reactive.Notification.CreateOnError``1(System.Exception)">
            <summary>オブザーバーへの OnError 通知を表すオブジェクトを作成します。</summary>
            <typeparam name="T">オブザーバーが受け取る要素のタイプ。通知を監視可能なシーケンスに非具体化すると、このタイプはシーケンスの要素タイプとして使用されます。</typeparam>
            <param name="error">通知に含まれる例外。</param>
            <returns>例外を含む OnError 通知。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="error"/> は null です。</exception>
        </member>
        <member name="M:System.Reactive.Notification.CreateOnCompleted``1">
            <summary>オブザーバーへの OnCompleted 通知を表すオブジェクトを作成します。</summary>
            <typeparam name="T">オブザーバーが受け取る要素のタイプ。通知を監視可能なシーケンスに非具体化すると、このタイプはシーケンスの要素タイプとして使用されます。</typeparam>
            <returns>OnCompleted 通知。</returns>
        </member>
        <member name="T:System.Reactive.Unit">
            <summary>単一の値があるタイプを表します。この型は、多くの場合、void を返すメソッド (C#) または Sub プロシージャ (Visual Basic) の正常な完了を示すために使用されます。</summary>
        </member>
        <member name="M:System.Reactive.Unit.Equals(System.Reactive.Unit)">
            <summary>指定された Unit 値が現在の Unit と等しいかどうかを判定します。Unit には単一の値があるため、常に true が返されます。</summary>
            <param name="other">現在の Unit 値と比較するオブジェクト。</param>
            <returns>Unit には単一の値があるため、常に true が返されます。</returns>
        </member>
        <member name="M:System.Reactive.Unit.Equals(System.Object)">
            <summary>指定された System.Object が現在の Unit と等しいかどうかを判定します。</summary>
            <param name="obj">現在の Unit と比較する System.Object。</param>
            <returns>指定された System.Object が Unit 値の場合は true、それ以外の場合は false です。</returns>
        </member>
        <member name="M:System.Reactive.Unit.GetHashCode">
            <summary>現在の Unit 値のハッシュ コードを返します。</summary>
            <returns>現在の Unit 値のハッシュ コード。</returns>
        </member>
        <member name="M:System.Reactive.Unit.ToString">
            <summary>現在の Unit 値の文字列表現を返します。</summary>
            <returns>現在の Unit 値の文字列表現。</returns>
        </member>
        <member name="M:System.Reactive.Unit.op_Equality(System.Reactive.Unit,System.Reactive.Unit)">
            <summary>指定された 2 つの Unit 値が等しいかどうかを判定します。Unit には単一の値があるため、常に true が返されます。</summary>
            <param name="first">比較する最初の Unit 値。</param>
            <param name="second">比較する 2 番目の Unit 値。</param>
            <returns>Unit には単一の値があるため、常に true が返されます。</returns>
        </member>
        <member name="M:System.Reactive.Unit.op_Inequality(System.Reactive.Unit,System.Reactive.Unit)">
            <summary>指定された 2 つの Unit 値が等しくないかどうかを判定します。Unit には単一の値があるため、常に false が返されます。</summary>
            <param name="first">比較する最初の Unit 値。</param>
            <param name="second">比較する 2 番目の Unit 値。</param>
            <returns>Unit には単一の値があるため、常に false が返されます。</returns>
        </member>
        <member name="P:System.Reactive.Unit.Default">
            <summary>単一の Unit 値を取得します。</summary>
        </member>
        <member name="T:System.Reactive.Strings_Core">
            <summary>ローカライズされた文字列などを検索するための厳密に型指定されたリソース クラス。</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.ResourceManager">
            <summary>このクラスで使用されるキャッシュされた ResourceManager インスタンスを返します。</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.Culture">
            <summary>この厳密に型指定されたリソース クラスを使用するすべてのリソース検索に対して、現在のスレッドの CurrentUICulture プロパティをオーバーライドします。</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.CANT_OBTAIN_SCHEDULER">
            <summary>Scheduler の使用と同様のローカライズされた文字列を検索します。API サーフェスのリファクタリングとプラットフォーム固有の依存関係の削除により、{0} プロパティはもうサポートされていません。ターゲット プラットフォームに System.Reactive.PlatformServices を含め、代わりに {0}Scheduler タイプを使用してください。</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.COMPLETED_NO_VALUE">
            <summary>「OnCompleted notification doesn&apos;t have a value.」に似たローカライズされた文字列を検索します。</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.DISPOSABLE_ALREADY_ASSIGNED">
            <summary>「Disposable has already been assigned.」に似たローカライズされた文字列を検索します。</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.FAILED_CLOCK_MONITORING">
            <summary>「Failed to start monitoring system clock changes.」に似たローカライズされた文字列を検索します。</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.HEAP_EMPTY">
            <summary>「Heap is empty.」に似たローカライズされた文字列を検索します。</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.REENTRANCY_DETECTED">
            <summary>「Reentrancy has been detected.」に似たローカライズされた文字列を検索します。</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.OBSERVER_TERMINATED">
            <summary>「Observer has already terminated.」に似たローカライズされた文字列を検索します。</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.SCHEDULER_OPERATION_ALREADY_AWAITED">
            <summary>「This scheduler operation has already been awaited.」に似たローカライズされた文字列を検索します。</summary>
        </member>
    </members>
</doc>