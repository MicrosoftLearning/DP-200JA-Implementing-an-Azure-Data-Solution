<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Newtonsoft.Json</name>
    </assembly>
    <members>
        <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
            <summary>BSON OID (オブジェクト ID) を表します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>OID の値を取得または設定します。</summary>
            <value>OID の値。</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonObjectId"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">OID 値。</param>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonReader">
            <summary>シリアル化された JSON データへのキャッシュされていない転送専用の高速アクセスを提供する閲覧者を表します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>バイナリ データ読み取りが、正しくない Json.NET 3.5 書き込み済みバイナリと互換性があるかどうかを示す値を取得または設定します。</summary>
            <value>バイナリ データの読み取りが正しくないJson.NET 3.5 書き込み済みバイナリと互換性がある場合は <c>true</c>、、それ以外の場合は <c>false</c>です。  </value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>ルート オブジェクトを JSON 配列として読み取るかどうかを示す値を取得または設定します。</summary>
            <value>ルート オブジェクトが JSON 配列として読み取られる場合は <c>true</c> 、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>BSON から <see cref="T:System.DateTime"/> 値を読み取るときに使用される <see cref="T:System.DateTimeKind" /> 値を取得または設定します。</summary>
            <value>BSON から <see cref="T:System.DateTime"/> を読み取るときに使用される <see cref="T:System.DateTimeKind" />。</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonReader"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="stream">ストリーム。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonReader"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="reader">閲覧者。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonReader"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="stream">ストリーム。</param>
            <param name="readRootValueAsArray"><c>true</c> に設定すると、ルート オブジェクトは JSON 配列として読み取られます。 </param>
            <param name="dateTimeKindHandling">BSON から <see cref="T:System.DateTime"/> を読み取るときに使用される <see cref="T:System.DateTimeKind" />。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonReader"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="reader">閲覧者。</param>
            <param name="readRootValueAsArray"><c>true</c> に設定すると、ルート オブジェクトは JSON 配列として読み取られます。</param>
            <param name="dateTimeKindHandling">BSON から <see cref="T:System.DateTime"/> を読み取るときに使用される <see cref="T:System.DateTimeKind" />。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>ストリームから次の JSON トークンを読み取ります。</summary>
            <returns>次のトークンが正常に読み取られた場合は <c>true</c>、読み取るトークンがこれ以上ない場合は <c>false</c> です。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
            <summary><see cref="T:Newtonsoft.Json.JsonReader.State"/> を Closed に変更します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonWriter">
            <summary>JSON データを生成する、高速でキャッシュされていない転送専用の方法を提供するライターを表します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary><see cref="T:System.DateTime"/> 値を BSON に書き込むときに使用される<see cref="T:System.DateTimeKind" /> を取得または設定します。<see cref="F:System.DateTimeKind.Unspecified" /> に設定すると、変換は行われなくなります。</summary>
            <value><see cref="T:System.DateTime"/> 値を BSON に書き込むときに使用される <see cref="T:System.DateTimeKind" /></value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonWriter"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="stream">ストリーム。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonWriter"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="writer">ライター。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>バッファー内のものをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>終了を書き込みます。</summary>
            <param name="token">トークン。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>指定されたテキストをすくむコメント <code>/*...*/ </code>を書き出します。</summary>
            <param name="text">コメント内に配置するテキスト。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>特定の名前でコンストラクターの開始を書き込みます。</summary>
            <param name="name">コンストラクターの名前。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>生の JSON を書き込みます。</summary>
            <param name="json">書き込む生 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>値が予想される生の JSON を書き込み、ライターの状態を更新します。</summary>
            <param name="json">書き込む生 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>JSON 配列の先頭を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>JSON オブジェクトの先頭を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>JSON オブジェクトに名前と値のペアのプロパティ名を書き込みます。</summary>
            <param name="name">プロパティの名前。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>このストリームと基になるストリームを閉じます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary><see cref="T:System.Object"/> 値を書き込みます。値を単一の JSON トークンとして書き込むことができない場合は、エラーが発生します。</summary>
            <param name="value">書き込む <see cref="T:System.Object"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>null 値を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>未定義の値を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary><see cref="T:System.String"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.String"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary><see cref="T:System.Int32"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Int32"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary><see cref="T:System.UInt32"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.UInt32"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary><see cref="T:System.Int64"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Int64"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary><see cref="T:System.UInt64"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.UInt64"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary><see cref="T:System.Single"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Single"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary><see cref="T:System.Double"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Double"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary><see cref="T:System.Boolean"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Boolean"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary><see cref="T:System.Int16"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Int16"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary><see cref="T:System.UInt16"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.UInt16"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary><see cref="T:System.Char"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Char"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary><see cref="T:System.Byte"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Byte"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary><see cref="T:System.SByte"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.SByte"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary><see cref="T:System.Decimal"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Decimal"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary><see cref="T:System.DateTime"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.DateTime"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary><see cref="T:System.DateTimeOffset"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.DateTimeOffset"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary><see cref="T:System.Byte"/>[] 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Byte"/>[] 値</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary><see cref="T:System.Guid"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Guid"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary><see cref="T:System.TimeSpan"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.TimeSpan"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary><see cref="T:System.Uri"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Uri"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>BSON オブジェクト ID を表す <see cref="T:System.Byte"/>[] 値を書き込みます。</summary>
            <param name="value">書き込むオブジェクト ID 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>BSON 正規表現を書き込みます。</summary>
            <param name="pattern">正規表現パターン。</param>
            <param name="options">正規表現オプション。</param>
        </member>
        <member name="T:Newtonsoft.Json.ConstructorHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> による逆シリアル化中にオブジェクトを初期化する際のコンストラクターの使用方法を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
            <summary>最初にパブリック既定コンストラクターを使用してから、単一のパラメーター化されたコンストラクター、次に非パブリック既定コンストラクターに戻ります。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>Json.NET は、パラメーター化されたコンストラクタに戻す前に、非パブリック既定コンストラクターを使用します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
            <summary>バイナリ値を基本の 64 文字列値との間で変換します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定されたオブジェクトタイプを変換できるかどうかを判定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>このインスタンスが指定されたオブジェクトのタイプを変換できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonObjectId"/> を JSON および BSON との間で変換します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定されたオブジェクトタイプを変換できるかどうかを判定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>このインスタンスが指定されたオブジェクトのタイプを変換できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>カスタム オブジェクトを作成します</summary>
            <typeparam name="T">変換するオブジェクトのタイプ。</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>シリアライザーによって設定されるオブジェクトを作成します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>作成されたオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>このインスタンスが指定されたオブジェクトタイプを変換できるかどうかを判定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>このインスタンスが指定されたオブジェクトのタイプを変換できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>この <see cref="T:Newtonsoft.Json.JsonConverter"/> が JSON を書き込むことができるかどうかを示す値を取得します。</summary>
            <value>この <see cref="T:Newtonsoft.Json.JsonConverter"/> が JSON を書き込むことができる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
            <summary><see cref="T:System.Data.DataSet"/> と JSON の間で変換を行います。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定された値のタイプを変換できるかどうかを判定します。</summary>
            <param name="valueType">値のタイプ。</param>
            <returns>このインスタンスが指定された値のタイプを変換できる場合は <c>true</c>、その他の場合は <c>false</c> です。  </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
            <summary><see cref="T:System.Data.DataTable"/> と JSON の間で変換を行います。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定された値のタイプを変換できるかどうかを判定します。</summary>
            <param name="valueType">値のタイプ。</param>
            <returns>このインスタンスが指定された値のタイプを変換できる場合は <c>true</c>、その他の場合は <c>false</c> です。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary><see cref="T:System.DateTime"/> を JSON との間での変換するための基本クラスを提供します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>このインスタンスが指定されたオブジェクトタイプを変換できるかどうかを判定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>このインスタンスが指定されたオブジェクトのタイプを変換できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
            <summary>F# 判別共用体タイプを JSON との間で変換します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定されたオブジェクトタイプを変換できるかどうかを判定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>このインスタンスが指定されたオブジェクトのタイプを変換できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
            <summary>エンティティ フレームワーク EntityKey を JSON との間で変換します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定されたオブジェクトタイプを変換できるかどうかを判定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>このインスタンスが指定されたオブジェクトのタイプを変換できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
            <summary>ExpandoObject を JSON との間で変換します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定されたオブジェクトタイプを変換できるかどうかを判定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>このインスタンスが指定されたオブジェクトのタイプを変換できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>この <see cref="T:Newtonsoft.Json.JsonConverter"/> が JSON を書き込むことができるかどうかを示す値を取得します。</summary>
            <value>この <see cref="T:Newtonsoft.Json.JsonConverter"/> が JSON を書き込むことができる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary><see cref="T:System.DateTime"/> を ISO 8601 日付形式 (2008-04-12T12:53Z など) との間でを変換します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>JSON との間で日付を変換するときに使用される日付時刻スタイルを取得または設定します。</summary>
            <value>JSON との間で日付を変換するときに使用される日付時刻スタイル。</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>JSON との間で日付を変換するときに使用される日付時刻形式を取得または設定します。</summary>
            <value>JSON との間で日付を変換するときに使用される日付時刻形式。</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>JSON との間で日付を変換するときに使用されるカルチャを取得または設定します。</summary>
            <value>JSON との間で日付を変換するときに使用されるカルチャ。</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary><see cref="T:System.DateTime"/> を JavaScript 日付コンストラクター (新しい日付(52231943)など) との間で変換します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">変換される JSON の既存のプロパティ値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary><see cref="T:System.Collections.Generic.KeyValuePair`2"/> と JSON の間で変換を行います。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定されたオブジェクトタイプを変換できるかどうかを判定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>このインスタンスが指定されたオブジェクトのタイプを変換できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.RegexConverter">
            <summary><see cref="T:System.Text.RegularExpressions.Regex"/> を JSON および BSON との間で変換します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定されたオブジェクトタイプを変換できるかどうかを判定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>このインスタンスが指定されたオブジェクトのタイプを変換できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
            <summary><see cref="T:System.Enum"/> を名前文字列値との間で変換します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>書き込まれた列挙型のテキストをキャメル ケースにするかどうかを示す値を取得または設定します。</summary>
            <value>書き込まれた列挙型のテキストがキャメル ケースの場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>整数値を許可するかどうかを示す値を取得または設定します。</summary>
            <value>整数が許可されている場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Converters.StringEnumConverter"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
            <summary><see cref="T:Newtonsoft.Json.Converters.StringEnumConverter"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="camelCaseText">書き込まれた列挙型のテキストがキャメル ケースの場合は <c>true</c>、それ以外の場合は <c>false</c> です。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定されたオブジェクトタイプを変換できるかどうかを判定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>このインスタンスが指定されたオブジェクトのタイプを変換できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.VersionConverter">
            <summary><see cref="T:System.Version"/> を文字列 (例: &quot;1.2.3.4&quot;) との間で変換します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">変換される JSON の既存のプロパティ値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定されたオブジェクトタイプを変換できるかどうかを判定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>このインスタンスが指定されたオブジェクトのタイプを変換できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
            <summary>XML を JSON との間で変換します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>JSON 構造に複数のルート要素が生成されている場合は、XML への逆シリアル化の際に挿入するルート要素の名前を取得または設定します。</summary>
            <value>逆シリアル化されたルート要素の名前。</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>Json.NET 配列属性を書き込むかどうかを示すフラグを取得または設定します。この属性は、書き込まれた XML を JSON に戻すときに配列を保持する上で役立ちます。</summary>
            <value>配列属性が XML に書き込まれている場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>ルート JSON オブジェクトを書き込むかどうかを示す値を取得または設定します。</summary>
            <value>JSON ルート オブジェクトが省略されている場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>attributeName  が名前空間属性かどうかをチェックします。</summary>
            <param name="attributeName">テストする属性名。</param>
            <param name="prefix">属性名のプレフィックスがある場合はそのプレフィックス、それ以外の場合は空の文字列です。</param>
            <returns>属性名が名前空間属性の場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定された値のタイプを変換できるかどうかを判定します。</summary>
            <param name="valueType">値のタイプ。</param>
            <returns>このインスタンスが指定された値のタイプを変換できる場合は <c>true</c>、その他の場合は <c>false</c> です。</returns>
        </member>
        <member name="T:Newtonsoft.Json.FloatParseHandling">
            <summary>JSON テキストの読み取り時に浮動小数点数 (1.0 や 9.9 など) を解析する方法を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
            <summary>浮動小数点数は <see cref="F:Newtonsoft.Json.FloatParseHandling.Double"/> に解析されます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
            <summary>浮動小数点数は <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal"/> に解析されます。</summary>
        </member>
        <member name="T:Newtonsoft.Json.DateFormatHandling">
            <summary>JSON テキストの書き込み時に日付を書式設定する方法を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>日付は ISO 8601 形式で書き込まれます (例: &quot;2012-03-21T05:40Z&quot;)。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>日付は Microsoft JSON 形式で書き込まれます (例: \/Date(1198908717056)\/&quot;)。</summary>
        </member>
        <member name="T:Newtonsoft.Json.DateParseHandling">
            <summary>JSON テキストの読み取り時に日付書式設定された文字列 (例: &quot;\/Date(1198908717056)\/&quot; および &quot;2012-03-21T05:40Z&quot;) を解析する方法を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.None">
            <summary>日付書式設定された文字列は日付タイプに解析されず、文字列として読み取られます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>日付書式設定された文字列 (例: &quot;\/Date(1198908717056)\/&quot; および &quot;2012-03-21T05:40Z&quot;) は <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime"/> に解析されます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
            <summary>日付書式設定された文字列 (例: &quot;\/Date(1198908717056)\/&quot; および &quot;2012-03-21T05:40Z&quot;) は <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset"/> に解析されます。</summary>
        </member>
        <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
            <summary>文字列と <see cref="T:System.DateTime"/> の間で変換するときに時間値を処理する方法を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>現地時間として扱います。<see cref="T:System.DateTime"/> オブジェクトが協定世界時 (UTC) を表す場合は、ローカル時刻に変換されます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>UTC として扱います。<see cref="T:System.DateTime"/> オブジェクトがローカル時刻を表す場合は、UTC に変換されます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary><see cref="T:System.DateTime"/> が文字列に変換されている場合は、ローカル時刻として扱います。文字列が <see cref="T:System.DateTime"/> に変換されている場合、タイム ゾーンが指定されていれば、ローカル時刻に変換します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>変換時にタイム ゾーン情報を保持する必要があります。</summary>
        </member>
        <member name="T:Newtonsoft.Json.DefaultValueHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> の既定値処理オプションを指定します。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" /> <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" /></example>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>オブジェクトをシリアル化する場合、メンバー値がメンバーの既定値と同じメンバーを含めます。含まれるメンバーは JSON に書き込まれます。逆シリアル化の影響は受けません。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>JSON に書き込まれないようにオブジェクトをシリアル化する場合は、メンバー値がメンバーの既定値と同じメンバーを無視します。このオプションは、すべての既定値を無視します (例: オブジェクトおよび Nullable タイプでは <c>null</c>、整数や小数点、浮動小数点数では <c>0</c>、ブール値では <c>false</c>)。     無視される既定値は、<see cref="T:System.ComponentModel.DefaultValueAttribute"/> をプロパティに配置することで変更できます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>逆シリアル化の際、既定値はあっても JSON がないメンバーは既定値に設定されません。</summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>オブジェクトをシリアル化する場合、メンバー値がメンバーの既定値と同じメンバーを無視し、逆シリアル化の際にメンバーをデフォルト値に設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.FloatFormatHandling">
            <summary>特殊な浮動小数点数を書き込むときの浮動小数点形式の処理オプションを指定します (例: <see cref="T:Newtonsoft.Json.JsonWriter"/> のある<see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.PositiveInfinity"/>、 <see cref="F:System.Double.NegativeInfinity"/>)。  </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
            <summary>&quot;NaN&quot; 、&quot;Infinity&quot;、&quot;-Infinity&quot; など、特殊な浮動小数点値を文字列として書き込みます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
            <summary>特殊な浮動小数点値を JSON のシンボルとして書き込みます (例: NaN、Infinity、-Infinity など)。これにより、無効な JSON が生成されます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
            <summary>JSON のプロパティの既定値として特別な浮動小数点値を書き込みます (例: <see cref="T:System.Double"/> プロパティの場合は 0.0、<see cref="T:System.Nullable`1"/> プロパティの場合は null)。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Formatting">
            <summary><see cref="T:Newtonsoft.Json.JsonTextWriter"/> の書式設定オプションを指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.None">
            <summary>特別な書式設定は適用されません。これは既定です。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.Indented">
            <summary><see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation"/> および <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar"/>の設定に従って子オブジェクトをインデントします。</summary>
        </member>
        <member name="T:Newtonsoft.Json.IArrayPool`1">
            <summary>プールされた配列を使用するためのインターフェイスを提供します。</summary>
            <typeparam name="T">配列のタイプの内容。</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)">
            <summary>プールから配列を借ります。この配列は、不要になった場合に返す必要があります。</summary>
            <param name="minimumLength">配列の最小限必要な長さ。返される配列は長くなっている場合があります。</param>
            <returns>プールから借りた配列。この配列は、不要になった場合に返す必要があります。</returns>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Return(`0[])">
            <summary>プールに配列を返します。</summary>
            <param name="array">返される配列。</param>
        </member>
        <member name="T:Newtonsoft.Json.IJsonLineInfo">
            <summary>クラスが行および位置情報を返せるようにインターフェイスを提供します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>クラスが行情報を返すことができるかどうかを示す値を取得します。</summary>
            <returns>LineNumber と LinePosition を提供できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>現在の行番号を取得します。</summary>
            <value>現在の行番号、または行情報を利用できない場合は 0 (たとえば、HasLineInfo が false を返す場合)。</value>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>現在の行位置を取得します。</summary>
            <value>現在の行位置、または行情報を使用できない場合は 0 (たとえば、HasLineInfo が false を返す場合)。</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonArrayAttribute">
            <summary>コレクションをシリアル化する方法を <see cref="T:Newtonsoft.Json.JsonSerializer"/> に指示します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>null 項目をコレクションで許可するかどうかを示す値を取得または設定します。</summary>
            <value>null 項目がコレクションで許可されている場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonArrayAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>配列にnull 項目を含めることができるかどうかを示すフラグがある <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="allowNullItems">配列に null 項目を含めることができるかどうかを示すフラグ。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>指定されたコンテナー ID のある <see cref="T:Newtonsoft.Json.JsonArrayAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="id">コンテナー ID。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
            <summary>オブジェクトを逆シリアル化する場合は指定されたコンストラクターを使用するよう <see cref="T:Newtonsoft.Json.JsonSerializer"/> に指示します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonContainerAttribute">
            <summary>オブジェクトをシリアル化する方法を <see cref="T:Newtonsoft.Json.JsonSerializer"/> に指示します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>ID を取得または設定します。</summary>
            <value>ID。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>タイトルを取得または設定します。</summary>
            <value>タイトル。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>説明を取得または設定します。</summary>
            <value>説明。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>コレクションの項目コンバーターを取得または設定します。</summary>
            <value>コレクションの項目コンバーター。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterParameters">
            <summary>ItemConverterType によって記述された <see cref="T:Newtonsoft.Json.JsonConverter"/> を構築するときに使用するパラメーター リスト。null の場合は、既定のコンストラクターが使用されます。null 以外の場合は、これらのパラメーターの数、順序、および型に正確に一致するコンストラクターが <see cref="T:Newtonsoft.Json.JsonConverter"/> で定義されていなくてはなりません。</summary>
            <example>[JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, &quot;Four&quot; })]</example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType">
            <summary><see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> の <see cref="T:System.Type"/>  を取得または設定します。 </summary>
            <value><see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> の <see cref="T:System.Type"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyParameters">
            <summary>NamingStrategyType で説明されている <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> を構築するときに使用するパラメーター リスト。null の場合は、既定のコンストラクターが使用されます。null 以外の場合は、これらのパラメーターの数、順序、および型に正確に一致するコンストラクターが <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> で定義されていなくてはなりません。</summary>
            <example>[JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, &quot;Four&quot; })]</example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>オブジェクト参照を保持するかどうかを示す値を取得または設定します。</summary>
            <value>オブジェクト参照を保持するには <c>true</c>、それ以外の場合は <c>false</c> です。   既定は <c>false</c> です。 </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>コレクションの項目参照を保持するかどうかを示す値を取得または設定します。</summary>
            <value>コレクションの項目オブジェクト参照を保持するには <c>true</c>、それ以外の場合は <c>false</c> です。既定は <c>false</c> です。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>コレクションの項目をシリアル化するときに使用される参照ループ処理を取得または設定します。</summary>
            <value>参照ループ処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>コレクションの項目をシリアル化するときに使用されるタイプ名処理を取得または設定します。</summary>
            <value>タイプ名の処理。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonContainerAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>指定されたコンテナー ID のある <see cref="T:Newtonsoft.Json.JsonContainerAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="id">コンテナー ID。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConvert">
            <summary>共通言語ランタイムのタイプと JSON のタイプを変換するメソッドを提供します。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" /></example>
        </member>
        <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings">
            <summary>既定の <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を作成する関数を取得または設定します。既定の設定は、 <see cref="T:Newtonsoft.Json.JsonConvert"/>、および <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1"/> と <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)"/> のシリアル化メソッドで自動的に使用されます。既定の設定を使用せずにシリアル化するには、<see cref="M:Newtonsoft.Json.JsonSerializer.Create"/> で <see cref="T:Newtonsoft.Json.JsonSerializer"/> を作成します。 </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.True">
            <summary>JavaScript のブール値 true を文字列として表します。このフィールドは読み取り専用です。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.False">
            <summary>JavaScript のブール値 false を文字列として表します。このフィールドは読み取り専用です。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Null">
            <summary>JavaScript の null を文字列として表します。このフィールドは読み取り専用です。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
            <summary>JavaScript の未定義を文字列として表します。このフィールドは読み取り専用です。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>JavaScript の正の無限大を文字列として表します。このフィールドは読み取り専用です。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>JavaScript の負の無限大を文字列として表します。このフィールドは読み取り専用です。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NaN">
            <summary>JavaScript の NaN を文字列として表します。このフィールドは読み取り専用です。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary><see cref="T:System.DateTime"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.DateTime"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
            <summary><see cref="T:Newtonsoft.Json.DateFormatHandling"/> を使用して、<see cref="T:System.DateTime"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <param name="format">日付が変換される形式。</param>
            <param name="timeZoneHandling">日付が文字列に変換される場合のタイム ゾーンの処理。</param>
            <returns><see cref="T:System.DateTime"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary><see cref="T:System.DateTimeOffset"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.DateTimeOffset"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
            <summary><see cref="T:Newtonsoft.Json.DateFormatHandling"/> を使用して、<see cref="T:System.DateTimeOffset"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <param name="format">日付が変換される形式。</param>
            <returns><see cref="T:System.DateTimeOffset"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary><see cref="T:System.Boolean"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.Boolean"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary><see cref="T:System.Char"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.Char"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary><see cref="T:System.Enum"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.Enum"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary><see cref="T:System.Int32"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.Int32"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary><see cref="T:System.Int16"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.Int16"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary><see cref="T:System.UInt16"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.UInt16"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary><see cref="T:System.UInt32"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.UInt32"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary><see cref="T:System.Int64"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.Int64"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary><see cref="T:System.UInt64"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.UInt64"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary><see cref="T:System.Single"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.Single"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary><see cref="T:System.Double"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.Double"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary><see cref="T:System.Byte"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.Byte"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary><see cref="T:System.SByte"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.SByte"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary><see cref="T:System.Decimal"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.SByte"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary><see cref="T:System.Guid"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.Guid"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary><see cref="T:System.TimeSpan"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.TimeSpan"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary><see cref="T:System.Uri"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.Uri"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary><see cref="T:System.String"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.String"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary><see cref="T:System.String"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <param name="delimiter">文字列区切り文字。</param>
            <returns><see cref="T:System.String"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char,Newtonsoft.Json.StringEscapeHandling)">
            <summary><see cref="T:System.String"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <param name="delimiter">文字列区切り文字。</param>
            <param name="stringEscapeHandling">文字列エスケープ処理。</param>
            <returns><see cref="T:System.String"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary><see cref="T:System.Object"/> を JSON 文字列表現に変換します。</summary>
            <param name="value">変換する値。</param>
            <returns><see cref="T:System.Object"/> の JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>指定されたオブジェクトを JSON 文字列にシリアル化します。</summary>
            <param name="value">シリアル化するオブジェクト。</param>
            <returns>オブジェクトの JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
            <summary>書式設定を使用して、指定されたオブジェクトを JSON 文字列にシリアル化します。</summary>
            <param name="value">シリアル化するオブジェクト。</param>
            <param name="formatting">出力の書式設定方法を示します。</param>
            <returns>オブジェクトの JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
            <summary><see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクションを使用して、指定されたオブジェクトを JSON 文字列にシリアル化します。</summary>
            <param name="value">シリアル化するオブジェクト。</param>
            <param name="converters">シリアル化中に使用されるコレクション コンバーター。</param>
            <returns>オブジェクトの JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>書式設定と<see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクションを使用して、指定されたオブジェクトを JSON 文字列にシリアル化します。</summary>
            <param name="value">シリアル化するオブジェクト。</param>
            <param name="formatting">出力の書式設定方法を示します。</param>
            <param name="converters">シリアル化中に使用されるコレクション コンバーター。</param>
            <returns>オブジェクトの JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して、指定されたオブジェクトを JSON 文字列にシリアル化します。</summary>
            <param name="value">シリアル化するオブジェクト。</param>
            <param name="settings">オブジェクトのシリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
            <returns>オブジェクトの JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>タイプ、書式、および <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して、指定されたオブジェクトを JSON 文字列にシリアル化 します。</summary>
            <param name="value">シリアル化するオブジェクト。</param>
            <param name="settings">オブジェクトのシリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
            <param name="type">シリアル化される値のタイプ。このパラメーターは、値のタイプが一致しない場合に <see cref="T:Newtonsoft.Json.TypeNameHandling"/> を Auto にしてタイプ名を書き込む際に使用されます。タイプの指定はオプションです。</param>
            <returns>オブジェクトの JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>書式設定と <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して、指定されたオブジェクトを JSON 文字列にシリアル化します。</summary>
            <param name="value">シリアル化するオブジェクト。</param>
            <param name="formatting">出力の書式設定方法を示します。</param>
            <param name="settings">オブジェクトのシリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
            <returns>オブジェクトの JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>タイプ、書式、および <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して、指定されたオブジェクトを JSON 文字列にシリアル化 します。</summary>
            <param name="value">シリアル化するオブジェクト。</param>
            <param name="formatting">出力の書式設定方法を示します。</param>
            <param name="settings">オブジェクトのシリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
            <param name="type">シリアル化される値のタイプ。このパラメーターは、値のタイプが一致しない場合に <see cref="T:Newtonsoft.Json.TypeNameHandling"/> を Auto にしてタイプ名を書き込む際に使用されます。タイプの指定はオプションです。</param>
            <returns>オブジェクトの JSON 文字列表現。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object)">
            <summary>指定されたオブジェクトを JSON 文字列に非同期的にシリアル化します。シリアル化は新しいスレッドで行われます。</summary>
            <param name="value">シリアル化するオブジェクト。</param>
            <returns>非同期シリアル化操作を表すタスク。<c>TResult </c>パラメーターの値には、オブジェクトの JSON 文字列表現が含まれます。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting)">
            <summary>書式設定を使用して、指定されたオブジェクトを JSON 文字列に非同期的にシリアル化します。シリアル化は新しいスレッドで行われます。</summary>
            <param name="value">シリアル化するオブジェクト。</param>
            <param name="formatting">出力の書式設定方法を示します。</param>
            <returns>非同期シリアル化操作を表すタスク。<c>TResult </c>パラメーターの値には、オブジェクトの JSON 文字列表現が含まれます。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>書式設定と <see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクションを使用して、指定されたオブジェクトを JSON 文字列に非同期的にシリアル化します。シリアル化は新しいスレッドで行われます。</summary>
            <param name="value">シリアル化するオブジェクト。</param>
            <param name="formatting">出力の書式設定方法を示します。</param>
            <param name="settings">オブジェクトのシリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
            <returns>非同期シリアル化操作を表すタスク。<c>TResult </c>パラメーターの値には、オブジェクトの JSON 文字列表現が含まれます。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>JSON を .NET オブジェクトに逆シリアル化します。</summary>
            <param name="value">逆シリアル化する JSON。</param>
            <returns>JSON 文字列から逆シリアル化されたオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して JSON を .NET オブジェクトに逆シリアル化します。</summary>
            <param name="value">逆シリアル化する JSON。</param>
            <param name="settings">オブジェクトの逆シリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
            <returns>JSON 文字列から逆シリアル化されたオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>指定された .NET タイプに JSON を逆シリアル化します。</summary>
            <param name="value">逆シリアル化する JSON。</param>
            <param name="type">逆シリアル化されるオブジェクトの <see cref="T:System.Type"/>。</param>
            <returns>JSON 文字列から逆シリアル化されたオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>指定された .NET タイプに JSON を逆シリアル化します。</summary>
            <typeparam name="T">逆シリアル化するオブジェクトのタイプ。</typeparam>
            <param name="value">逆シリアル化する JSON。</param>
            <returns>JSON 文字列から逆シリアル化されたオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>特定の匿名タイプに JSON を逆シリアル化します。</summary>
            <typeparam name="T">逆シリアル化する匿名タイプ。これは従来は指定できないため、パラメーターとして渡される匿名タイプから推論する必要があります。</typeparam>
            <param name="value">逆シリアル化する JSON。</param>
            <param name="anonymousTypeObject">匿名タイプのオブジェクト。</param>
            <returns>JSON 文字列から逆シリアル化された匿名タイプ。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して、特定の匿名タイプに JSON を逆シリアル化します。</summary>
            <typeparam name="T">逆シリアル化する匿名タイプ。これは従来は指定できないため、パラメーターとして渡される匿名タイプから推論する必要があります。</typeparam>
            <param name="value">逆シリアル化する JSON。</param>
            <param name="anonymousTypeObject">匿名タイプのオブジェクト。</param>
            <param name="settings">オブジェクトの逆シリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
            <returns>JSON 文字列から逆シリアル化された匿名タイプ。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary><see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクションを使用して、指定された .NET タイプに JSON を逆シリアル化します。</summary>
            <typeparam name="T">逆シリアル化するオブジェクトのタイプ。</typeparam>
            <param name="value">逆シリアル化する JSON。</param>
            <param name="converters">逆シリアル化中に使用するコンバーター。</param>
            <returns>JSON 文字列から逆シリアル化されたオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して、指定された .NET タイプに JSON を逆シリアル化します。</summary>
            <typeparam name="T">逆シリアル化するオブジェクトのタイプ。</typeparam>
            <param name="value">逆シリアル化するオブジェクト。</param>
            <param name="settings">オブジェクトの逆シリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
            <returns>JSON 文字列から逆シリアル化されたオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
            <summary><see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクションを使用して、指定された .NET タイプに JSON を逆シリアル化します。</summary>
            <param name="value">逆シリアル化する JSON。</param>
            <param name="type">逆シリアル化するオブジェクトのタイプ。</param>
            <param name="converters">逆シリアル化中に使用するコンバーター。</param>
            <returns>JSON 文字列から逆シリアル化されたオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して、指定された .NET タイプに JSON を逆シリアル化します。</summary>
            <param name="value">逆シリアル化する JSON。</param>
            <param name="type">逆シリアル化するオブジェクトのタイプ。</param>
            <param name="settings">オブジェクトの逆シリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
            <returns>JSON 文字列から逆シリアル化されたオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
            <summary>指定された .NET タイプに JSON を非同期的に逆シリアル化します。逆シリアル化は、新しいスレッドで行われます。</summary>
            <typeparam name="T">逆シリアル化するオブジェクトのタイプ。</typeparam>
            <param name="value">逆シリアル化する JSON。</param>
            <returns>非同期逆シリアル化操作を表すタスク。<c>TResult </c> パラメーターの値には、JSON 文字列から逆シリアル化されたオブジェクトが含まれます。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して、指定された .NET タイプに JSON を非同期的に逆シリアル化します。逆シリアル化は、新しいスレッドで行われます。</summary>
            <typeparam name="T">逆シリアル化するオブジェクトのタイプ。</typeparam>
            <param name="value">逆シリアル化する JSON。</param>
            <param name="settings">オブジェクトの逆シリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
            <returns>非同期逆シリアル化操作を表すタスク。<c>TResult </c> パラメーターの値には、JSON 文字列から逆シリアル化されたオブジェクトが含まれます。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String)">
            <summary>指定された .NET タイプに JSON を非同期的に逆シリアル化します。逆シリアル化は、新しいスレッドで行われます。</summary>
            <param name="value">逆シリアル化する JSON。</param>
            <returns>非同期逆シリアル化操作を表すタスク。<c>TResult </c> パラメーターの値には、JSON 文字列から逆シリアル化されたオブジェクトが含まれます。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して、指定された .NET タイプに JSON を非同期的に逆シリアル化します。逆シリアル化は、新しいスレッドで行われます。</summary>
            <param name="value">逆シリアル化する JSON。</param>
            <param name="type">逆シリアル化するオブジェクトのタイプ。</param>
            <param name="settings">オブジェクトの逆シリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
            <returns>非同期逆シリアル化操作を表すタスク。<c>TResult </c> パラメーターの値には、JSON 文字列から逆シリアル化されたオブジェクトが含まれます。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>JSON 文字列の値をオブジェクトに設定します。</summary>
            <param name="value">値を設定する元になる JSON。</param>
            <param name="target">値を設定するターゲット オブジェクト。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して、JSON 文字列の値をオブジェクトに設定します。</summary>
            <param name="value">値を設定する元になる JSON。</param>
            <param name="target">値を設定するターゲット オブジェクト。</param>
            <param name="settings">オブジェクトの逆シリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して JSON 文字列の値をオブジェクトに非同期的に設定します。</summary>
            <param name="value">値を設定する元になる JSON。</param>
            <param name="target">値を設定するターゲット オブジェクト。</param>
            <param name="settings">オブジェクトの逆シリアル化に使用される <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。これが null の場合は、既定のシリアル化設定が使用されます。</param>
            <returns>非同期設定操作を表すタスク。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>XML ノードを JSON 文字列にシリアル化します。</summary>
            <param name="node">シリアル化するノード。</param>
            <returns>XmlNode の JSON 文字列。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
            <summary>書式設定を使用して、XML ノードを JSON 文字列にシリアル化します。</summary>
            <param name="node">シリアル化するノード。</param>
            <param name="formatting">出力の書式設定方法を示します。</param>
            <returns>XmlNode の JSON 文字列。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>書式設定を使用して XML ノードを JSON 文字列にシリアル化し、<paramref name="omitRootObject"/> が <c>true</c> の場合はルート オブジェクトを省略します。  </summary>
            <param name="node">シリアル化するノード。</param>
            <param name="formatting">出力の書式設定方法を示します。</param>
            <param name="omitRootObject">ルート オブジェクトの書き込みを省略します。</param>
            <returns>XmlNode の JSON 文字列。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>JSON 文字列から XmlNode を逆シリアル化します。</summary>
            <param name="value">JSON 文字列。</param>
            <returns>逆シリアル化された XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary><paramref name="deserializeRootElementName"/> で指定されたルート要素にネストされた JSON 文字列から XmlNode を逆シリアル化します。</summary>
            <param name="value">JSON 文字列。</param>
            <param name="deserializeRootElementName">逆シリアル化の際に追加するルート要素の名前。</param>
            <returns>逆シリアル化された XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary><paramref name="deserializeRootElementName"/> で指定されたルート要素にネストされた JSON 文字列から XmlNode を逆シリアル化 し、コレクションの .NET 配列属性を書き込みます。</summary>
            <param name="value">JSON 文字列。</param>
            <param name="deserializeRootElementName">逆シリアル化の際に追加するルート要素の名前。</param>
            <param name="writeArrayAttribute">Json.NET 配列属性を書き込むかどうかを示すフラグ。この属性は、書き込まれた XML を JSON に戻すときに配列を保持する上で役立ちます。</param>
            <returns>逆シリアル化された XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
            <summary><see cref="T:System.Xml.Linq.XNode"/>を JSON 文字列にシリアル化します。</summary>
            <param name="node">JSON に変換するノード。</param>
            <returns>XNode の JSON 文字列。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
            <summary>書式設定を使用して <see cref="T:System.Xml.Linq.XNode"/> を JSON 文字列にシリアル化します。</summary>
            <param name="node">JSON に変換するノード。</param>
            <param name="formatting">出力の書式設定方法を示します。</param>
            <returns>XNode の JSON 文字列。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>書式設定を使用して <see cref="T:System.Xml.Linq.XNode"/> を JSON 文字列にシリアル化し、<paramref name="omitRootObject"/> が <c>true</c> の場合はルート オブジェクトを省略します。   </summary>
            <param name="node">シリアル化するノード。</param>
            <param name="formatting">出力の書式設定方法を示します。</param>
            <param name="omitRootObject">ルート オブジェクトの書き込みを省略します。</param>
            <returns>XNode の JSON 文字列。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
            <summary>JSON 文字列から <see cref="T:System.Xml.Linq.XNode"/> を逆シリアル化します。</summary>
            <param name="value">JSON 文字列。</param>
            <returns>逆シリアル化された XNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
            <summary><paramref name="deserializeRootElementName"/> で指定されたルート要素にネストされた JSON 文字列から <see cref="T:System.Xml.Linq.XNode"/> を逆シリアル化します。 </summary>
            <param name="value">JSON 文字列。</param>
            <param name="deserializeRootElementName">逆シリアル化の際に追加するルート要素の名前。</param>
            <returns>逆シリアル化された XNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary><paramref name="deserializeRootElementName"/> で指定されたルート要素にネストされた JSON 文字列から <see cref="T:System.Xml.Linq.XNode"/> を逆シリアル化し、コレクションの .NET 配列属性を書き込みます。 </summary>
            <param name="value">JSON 文字列。</param>
            <param name="deserializeRootElementName">逆シリアル化の際に追加するルート要素の名前。</param>
            <param name="writeArrayAttribute">Json.NET 配列属性を書き込むかどうかを示すフラグ。この属性は、書き込まれた XML を JSON に戻すときに配列を保持する上で役立ちます。</param>
            <returns>逆シリアル化された XNode</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverter">
            <summary>オブジェクトを JSON との間で変換します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を書き込みます。</summary>
            <param name="writer">書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトの JSON 表現を読み取ります。</summary>
            <param name="reader">読み取る <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">オブジェクトのタイプ。</param>
            <param name="existingValue">読み取るオブジェクトの既存の値。</param>
            <param name="serializer">呼び出し元のシリアライザー。</param>
            <returns>オブジェクト値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>このインスタンスが指定されたオブジェクトタイプを変換できるかどうかを判定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>このインスタンスが指定されたオブジェクトのタイプを変換できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
            <summary>
            <para>JsonConverter で生成された JSON の <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を取得します。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
            <returns>JsonConverter によって生成された JSON の <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
            <summary>この <see cref="T:Newtonsoft.Json.JsonConverter"/> が JSON を読み取ることができるかどうかを示す値を取得します。</summary>
            <value>この <see cref="T:Newtonsoft.Json.JsonConverter"/> が JSON を読むことができる場合は <c>true</c>、<c></c>それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>この <see cref="T:Newtonsoft.Json.JsonConverter"/> が JSON を書き込むことができるかどうかを示す値を取得します。</summary>
            <value>この <see cref="T:Newtonsoft.Json.JsonConverter"/> が JSON を書き込むことができる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterAttribute">
            <summary>メンバーまたはクラスをシリアル化する際は指定された <see cref="T:Newtonsoft.Json.JsonConverter"/> を使用するよう <see cref="T:Newtonsoft.Json.JsonSerializer"/> に指示します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary><see cref="T:Newtonsoft.Json.JsonConverter"/> の <see cref="T:System.Type"/> を取得します。 </summary>
            <value><see cref="T:Newtonsoft.Json.JsonConverter"/> の <see cref="T:System.Type"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterParameters">
            <summary>ConverterType で記述した <see cref="T:Newtonsoft.Json.JsonConverter"/> を構築するときに使用するパラメーター リスト。null の場合は、既定のコンストラクターが使用されます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.JsonConverterAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="converterType"><see cref="T:Newtonsoft.Json.JsonConverter"/> のタイプ。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary><see cref="T:Newtonsoft.Json.JsonConverterAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="converterType"><see cref="T:Newtonsoft.Json.JsonConverter"/> のタイプ。</param>
            <param name="converterParameters"><see cref="T:Newtonsoft.Json.JsonConverter"/> を構築するときに使用するパラメーター リスト。null にすることができます。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterCollection">
            <summary><see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクションを表します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>コレクションをシリアル化する方法を <see cref="T:Newtonsoft.Json.JsonSerializer"/> に指示します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonDictionaryAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>指定されたコンテナー ID のある <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="id">コンテナー ID。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonException">
            <summary>JSON シリアル化または逆シリアル化中にエラーが発生したときにスローされる例外。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonException"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>指定されたエラー メッセージを使用して、<see cref="T:Newtonsoft.Json.JsonException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の理由を説明するエラー メッセージ。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>指定されたエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:Newtonsoft.Json.JsonException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の理由を説明するエラー メッセージ。</param>
            <param name="innerException">現在の例外の原因である例外、または内部例外が指定されていない場合は null 参照 (Visual Basic では Nothing)。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary><see cref="T:Newtonsoft.Json.JsonException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">スローされる例外に関するシリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">ソースまたは宛先に関するコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> パラメータは null です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">クラス名は null または <see cref="P:System.Exception.HResult"/> はゼロ (0) です。</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute">
            <summary>指定されたコレクションに一致するクラス メンバーのないプロパティを逆シリアル化し、シリアル化中に値を書き込むよう <see cref="T:Newtonsoft.Json.JsonSerializer"/> に指示します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
            <summary>オブジェクトをシリアル化する際に拡張データを書き込むかどうかを示す値を取得または設定します。</summary>
            <value>オブジェクトをシリアル化するときに拡張データを書き込むには <c>true</c>、それ以外の場合は <c>false</c> です。既定値は <c>true</c>です。 </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
            <summary>オブジェクトを逆シリアル化する際に拡張データを読み取るかどうかを示す値を取得または設定します。</summary>
            <value>オブジェクトを逆シリアル化するときに拡張データを読み取るには <c>true</c>、それ以外の場合は <c>false</c> です。   既定値は <c>true</c>です。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>パブリック フィールドまたはパブリック読み取り/書き込みプロパティ値をシリアル化しないよう <see cref="T:Newtonsoft.Json.JsonSerializer"/> に指示します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonObjectAttribute">
            <summary>オブジェクトをシリアル化する方法を <see cref="T:Newtonsoft.Json.JsonSerializer"/> に指示します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>メンバーのシリアル化を取得または設定します。</summary>
            <value>メンバーのシリアル化。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>オブジェクトのプロパティが必要かどうかを示す値を取得または設定します。</summary>
            <value>オブジェクトのプロパティが必要かどうかを示す値。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
            <summary>指定されたメンバーのシリアル化を使用して、<see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="memberSerialization">メンバーのシリアル化。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>指定されたコンテナー ID のある <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="id">コンテナー ID。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
            <summary>指定された名前で常にメンバーをシリアル化するよう <see cref="T:Newtonsoft.Json.JsonSerializer"/> に指示します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>プロパティのコレクション項目をシリアル化するときに使用する <see cref="T:Newtonsoft.Json.JsonConverter"/> を取得または設定します。</summary>
            <value>コレクションの項目 <see cref="T:Newtonsoft.Json.JsonConverter"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterParameters">
            <summary>ItemConverterType によって記述された <see cref="T:Newtonsoft.Json.JsonConverter"/> を構築するときに使用するパラメーター リスト。null の場合は、既定のコンストラクターが使用されます。null 以外の場合は、これらのパラメーターの数、順序、および型に正確に一致するコンストラクターが <see cref="T:Newtonsoft.Json.JsonConverter"/> で定義されていなくてはなりません。</summary>
            <example>[JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, &quot;Four&quot; })]</example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType">
            <summary><see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> の <see cref="T:System.Type"/>  を取得または設定します。</summary>
            <value><see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> の <see cref="T:System.Type"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyParameters">
            <summary>NamingStrategyType で説明されている <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> を構築するときに使用するパラメーター リスト。null の場合は、既定のコンストラクターが使用されます。null 以外の場合は、これらのパラメーターの数、順序、および型に正確に一致するコンストラクターが <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/> で定義されていなくてはなりません。</summary>
            <example>[JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, &quot;Four&quot; })]</example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>このプロパティをシリアル化する際に使用される null 値の処理を取得または設定します。</summary>
            <value>null 値の処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>このプロパティをシリアル化する際に使用される既定値処理を取得または設定します。</summary>
            <value>既定値の処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>このプロパティをシリアル化する際に使用される参照ループ処理を取得または設定します。</summary>
            <value>参照ループ処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>このプロパティを逆シリアル化する際に使用されるオブジェクト作成処理を取得または設定します。</summary>
            <value>オブジェクト作成処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>このプロパティをシリアル化する際に使用されるタイプ名処理を取得または設定します。</summary>
            <value>タイプ名の処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>このプロパティの値が参照としてシリアル化されているかどうかを取得または設定します。</summary>
            <value>このプロパティの値が参照としてシリアル化されるかどうか。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>メンバーのシリアル化の順序を取得または設定します。</summary>
            <value>シリアル化の数値順序。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>このプロパティが必要かどうかを示す値を取得または設定します。</summary>
            <value>このプロパティが必要かどうかを示す値。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>プロパティの名前を取得または設定します。</summary>
            <value>プロパティの名前。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>プロパティのコレクション項目をシリアル化するときに使用される参照ループ処理を取得または設定します。</summary>
            <value>コレクションの項目参照ループ処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>プロパティのコレクション項目をシリアル化するときに使用されるタイプ名処理を取得または設定します。</summary>
            <value>コレクションの項目タイプ名の処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>このプロパティのコレクション項目を参照としてシリアル化するかどうかを取得または設定します。</summary>
            <value>このプロパティのコレクション項目を参照としてシリアル化するかどうか。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>指定された名前のある <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="propertyName">プロパティの名前。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader">
            <summary>シリアル化された JSON データへのキャッシュされていない転送専用の高速アクセスを提供する閲覧者を表します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader.State">
            <summary>閲覧者の状態を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Start">
            <summary>Read メソッドが呼び出されていません。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Complete">
            <summary>ファイルの終わりに達しました。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Property">
            <summary>閲覧者はプロパティにあります。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>閲覧者はオブジェクトの先頭にあります。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Object">
            <summary>閲覧者はオブジェクト内にあります。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>閲覧者は配列の先頭にあります。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Array">
            <summary>閲覧者は配列内にあります。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Closed">
            <summary>Close メソッドが呼び出されました。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>閲覧者は値を読み取ったばかりです。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>閲覧者はコンストラクターの先頭にあります。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>コンストラクターの閲覧者。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Error">
            <summary>読み取り操作を続行できなくなるエラーが発生しました。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Finished">
            <summary>ファイルの終わりに達しました。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
            <summary>現在の閲覧者の状態を取得します。</summary>
            <value>現在の閲覧者の状態。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
            <summary>閲覧者を閉じた場合、基になるストリームまたは <see cref="T:System.IO.TextReader"/> を閉じるべきかどうかを示す値を取得または設定します。</summary>
            <value>閲覧者を閉じる際、基になるストリームまたは <see cref="T:System.IO.TextReader"/> を終了するには true、それ以外の場合は false です。既定値は true です。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent">
            <summary>複数の JSON コンテンツをエラーなく連続ストリームから読み取ることができるかどうかを示す値を取得または設定します。</summary>
            <value>複数の JSON コンテンツの読み取りをサポートするには true、それ以外の場合は false です。規定値は false です。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>文字列の値を囲むために使用される引用符文字を取得します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>JSON を読み取る際に <see cref="T:System.DateTime"/> タイム ゾーンを処理する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>JSON を読み取る際に日付書式設定された文字列 (例: &quot;\/Date(1198908717056)\/&quot; および &quot;2012-03-21T05:40Z&quot;) を解析する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
            <summary>JSON テキストを読み取る際に浮動小数点数 (1.0 や 9.9 など) がどのように解析されるかを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateFormatString">
            <summary>JSON を読み取る際に、カスタム日付書式設定された文字列の解析方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>JSON を読み取る際に許可される最大深度を取得または設定します。読み取り値がこの深度を越えると、<see cref="T:Newtonsoft.Json.JsonReaderException"/> がスローされます。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.TokenType">
            <summary>現在の JSON トークンのタイプを取得します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Value">
            <summary>現在の JSON トークンのテキスト値を取得します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.ValueType">
            <summary>現在の JSON トークンの共通言語ランタイム (CLR) タイプを取得します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Depth">
            <summary>JSON ドキュメント内の現在のトークンの深度を取得します。</summary>
            <value>JSON ドキュメント内の現在のトークンの深度。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Path">
            <summary>現在の JSON トークンのパスを取得します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Culture">
            <summary>JSON の読み取り時に使用されるカルチャを取得または設定します。既定値は <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> です。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.#ctor">
            <summary>指定された <see cref="T:System.IO.TextReader"/> で <see cref="T:Newtonsoft.Json.JsonReader"/> クラスの新しいインスタンスを初期化します。 </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Read">
            <summary>ストリームから次の JSON トークンを読み取ります。</summary>
            <returns>次のトークンが正常に読み取られた場合は <c>true</c>、読み取るトークンがこれ以上ない場合は <c>false</c> です。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.String"/> として読み取ります。</summary>
            <returns><see cref="T:System.String"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Byte"/>[] として読み取ります。</summary>
            <returns><see cref="T:System.Byte"/>[]、または次の JSON トークンが null の場合は null 参照です。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDouble">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBoolean">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Skip">
            <summary>現在のトークンの子をスキップします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
            <summary>現在のトークンを設定します。</summary>
            <param name="newToken">新しいトークン。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>現在のトークンと値を設定します。</summary>
            <param name="newToken">新しいトークン。</param>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>現在のトークンのタイプに基づいて状態を設定します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.System#IDisposable#Dispose">
            <summary>アンマネージド リソースの解放、リリース、またはリセットに関連するアプリケーション定義タスクを実行します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>アンマネージド リソースと (オプションで) マネージド リソースをリリースします</summary>
            <param name="disposing">マネージド リソースとアンマネージド リソースの両方をリリースする場合は <c>true</c>、アンマネージド リソースのみをリリースする場合は <c>false</c> です。  </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Close">
            <summary><see cref="T:Newtonsoft.Json.JsonReader.State"/> を Closed に変更します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>JSON テキストの読み取り中にエラーが発生したときにスローされる例外。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>エラーが発生した場所を示す行番号を取得します。</summary>
            <value>エラーが発生した場所を示す行番号。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>エラーが発生した場所を示す行位置を取得します。</summary>
            <value>エラーが発生した場所を示す行位置。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.Path">
            <summary>エラーが発生した JSON へのパスを取得します。</summary>
            <value>エラーが発生した JSON へのパス。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonReaderException"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>指定されたエラー メッセージを使用して、<see cref="T:Newtonsoft.Json.JsonReaderException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の理由を説明するエラー メッセージ。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>指定されたエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:Newtonsoft.Json.JsonReaderException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の理由を説明するエラー メッセージ。</param>
            <param name="innerException">現在の例外の原因である例外、または内部例外が指定されていない場合は null 参照 (Visual Basic では Nothing)。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary><see cref="T:Newtonsoft.Json.JsonReaderException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">スローされる例外に関するシリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">ソースまたは宛先に関するコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> パラメータは null です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">クラス名は null または <see cref="P:System.Exception.HResult"/> はゼロ (0) です。</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonRequiredAttribute">
            <summary>メンバーを常にシリアル化し、値を持つようメンバーに要求するよう <see cref="T:Newtonsoft.Json.JsonSerializer"/> に指示します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>JSON シリアル化または逆シリアル化中にエラーが発生したときにスローされる例外。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializationException"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>指定されたエラー メッセージを使用して、<see cref="T:Newtonsoft.Json.JsonSerializationException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の理由を説明するエラー メッセージ。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>指定されたエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:Newtonsoft.Json.JsonSerializationException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の理由を説明するエラー メッセージ。</param>
            <param name="innerException">現在の例外の原因である例外、または内部例外が指定されていない場合は null 参照 (Visual Basic では Nothing)。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializationException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">スローされる例外に関するシリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">ソースまたは宛先に関するコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> パラメータは null です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">クラス名は null または <see cref="P:System.Exception.HResult"/> はゼロ (0) です。</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializer">
            <summary>JSON 形式との間でオブジェクトをシリアル化および逆シリアル化します。<see cref="T:Newtonsoft.Json.JsonSerializer"/>を使用すると、オブジェクトを JSON にエンコードする方法を制御できます。</summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonSerializer.Error">
            <summary>シリアル化および逆シリアル化の間に <see cref="T:Newtonsoft.Json.JsonSerializer"/> エラーが発生した場合に生じます。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>参照を解決する際、シリアライザーが使用する <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/> を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
            <summary>タイプ名を解決する際、シリアライザーが使用する <see cref="T:System.Runtime.Serialization.SerializationBinder"/> を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>トレース メッセージを書き込む際、シリアライザーが使用する を取得または設定します。</summary>
            <value>トレース ライター。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.EqualityComparer">
            <summary>参照を比較する際、シリアライザーが使用する等値比較関数を取得または設定します。</summary>
            <value>等値比較関数。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>シリアライザーがタイプ名の書き込みと読み取りを処理する方法を取得または設定します。</summary>
            <remarks><see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> アプリケーションが外部ソースから JSON を逆シリアル化する場合は、注意して使用する必要があります。<c>TypeNameHandling.None</c>以外の値を使用して逆シリアル化する場合は、着信タイプをカスタム <see cref="T:System.Runtime.Serialization.SerializationBinder"/> で検証する必要があります。</remarks>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>シリアライザーでタイプ名アセンブリを書き込み、解決する方法を取得または設定します。</summary>
            <value>タイプ名アセンブリ形式。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>シリアライザーによってオブジェクト参照を保持する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>参照ループ (参照自体を参照するクラスなど) の処理方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>逆シリアル化の間に欠損しているメンバー (JSON にオブジェクトのメンバーではないプロパティが含まれているなど) を処理する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>シリアル化および逆シリアル化の間に null 値を処理する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>シリアル化および逆シリアル化の間に null 既定値を処理する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>逆シリアル化の間にオブジェクトを作成する方法を取得または設定します。</summary>
            <value>オブジェクト作成処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>逆シリアル化の間にコンストラクターを使用する方法を取得または設定します。</summary>
            <value>コンストラクターの処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>逆シリアル化の間にメタデータ プロパティを使用する方法を取得または設定します。</summary>
            <value>処理するメタデータ プロパティ。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
            <summary>シリアル化の間に使用されるコレクション <see cref="T:Newtonsoft.Json.JsonConverter"/> を取得します。</summary>
            <value>シリアル化の間に使用される <see cref="T:Newtonsoft.Json.JsonConverter"/> コレクション。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>.NET オブジェクトを JSON にシリアル化する際 (またはその逆の場合) にシリアライザーが使用するコントラクト リゾルバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Context">
            <summary>シリアル化コールバック メソッドを呼び出す際にシリアライザーが使用する <see cref="T:System.Runtime.Serialization.StreamingContext"/> を取得または設定します。</summary>
            <value>コンテキスト。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>JSON テキスト出力の書式設定方法を示します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>JSON テキストへの日付の書き込み方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>シリアル化および逆シリアル化の間に <see cref="T:System.DateTime"/> タイム ゾーンを処理する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>JSON を読み取る際に日付書式設定された文字列 (例: &quot;\/Date(1198908717056)\/&quot; および &quot;2012-03-21T05:40Z&quot;) を解析する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
            <summary>JSON テキストを読み取る際に浮動小数点数 (1.0 や 9.9 など) がどのように解析されるかを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
            <summary>特殊な浮動小数点数 (例: <see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.PositiveInfinity"/>、<see cref="F:System.Double.NegativeInfinity"/>) をJSON テキストとして書き込む方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
            <summary>JSON テキストを書き込む際に文字列をエスケープする方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
            <summary>JSON テキストを書き込む際に <see cref="T:System.DateTime"/> および <see cref="T:System.DateTimeOffset"/> 値を書式設定する方法と、JSON テキストの読み取り時に予想される日付形式を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
            <summary>JSON の読み取り時に使用されるカルチャを取得または設定します。既定値は <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> です。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>JSON を読み取る際に許可される最大深度を取得または設定します。読み取り値がこの深度を越えると、<see cref="T:Newtonsoft.Json.JsonReaderException"/> がスローされます。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>オブジェクトの逆シリアル化後にさらなる JSON コンテンツのチェックがあるかどうかを示す値を取得します。</summary>
            <value>オブジェクトを逆シリアル化した後にさらなる JSON コンテンツのチェックが行われる場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create">
            <summary>新しい <see cref="T:Newtonsoft.Json.JsonSerializer"/>インスタンスを作成します。<see cref="T:Newtonsoft.Json.JsonSerializer"/> は、<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> からの既定の設定を使用しません。</summary>
            <returns>新しい <see cref="T:Newtonsoft.Json.JsonSerializer"/> インスタンス。<see cref="T:Newtonsoft.Json.JsonSerializer"/> は、<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> からの既定の設定を使用しません。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>指定された <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して、新しい <see cref="T:Newtonsoft.Json.JsonSerializer"/> インスタンスを作成します。  <see cref="T:Newtonsoft.Json.JsonSerializer"/> は、<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> からの既定の設定を使用しません。</summary>
            <param name="settings"><see cref="T:Newtonsoft.Json.JsonSerializer"/> に適用する設定。</param>
            <returns>指定された <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用する新しい <see cref="T:Newtonsoft.Json.JsonSerializer"/> インスタンス。<see cref="T:Newtonsoft.Json.JsonSerializer"/> は、<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> からの既定の設定を使用しません。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault">
            <summary>新しい <see cref="T:Newtonsoft.Json.JsonSerializer"/>インスタンスを作成します。<see cref="T:Newtonsoft.Json.JsonSerializer"/> は、<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> からの既定の設定を使用します。</summary>
            <returns>新しい <see cref="T:Newtonsoft.Json.JsonSerializer"/> インスタンス。<see cref="T:Newtonsoft.Json.JsonSerializer"/> は、<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> からの既定の設定を使用します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>指定された <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用して、新しい <see cref="T:Newtonsoft.Json.JsonSerializer"/> インスタンスを作成します。<see cref="T:Newtonsoft.Json.JsonSerializer"/> は、<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> からの既定の設定と指定された <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用します。</summary>
            <param name="settings"><see cref="T:Newtonsoft.Json.JsonSerializer"/> に適用する設定。</param>
            <returns>指定された <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用する新しい <see cref="T:Newtonsoft.Json.JsonSerializer"/> インスタンス。<see cref="T:Newtonsoft.Json.JsonSerializer"/> は、<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/> からの既定の設定と指定された <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> を使用します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>JSON 値をターゲット オブジェクトに設定します。</summary>
            <param name="reader">閲覧者の値への JSON 構造を含む <see cref="T:System.IO.TextReader"/>。</param>
            <param name="target">値を設定するターゲット オブジェクト。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
            <summary>JSON 値をターゲット オブジェクトに設定します。</summary>
            <param name="reader">閲覧者の値への JSON 構造を含む <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="target">値を設定するターゲット オブジェクト。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> に含まれる JSON 構造を逆シリアル化します。</summary>
            <param name="reader">逆シリアル化する JSON 構造を含む <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>逆シリアル化されている <see cref="T:System.Object"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>指定された <see cref="T:System.IO.StringReader"/> に含まれている JSON 構造を、指定されたタイプのインスタンスに逆シリアル化します。</summary>
            <param name="reader">オブジェクトを含む <see cref="T:System.IO.TextReader"/>。</param>
            <param name="objectType">逆シリアル化されるオブジェクトの <see cref="T:System.Type"/>。</param>
            <returns>逆シリアル化されている <paramref name="objectType"/> のインスタンス。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
            <summary>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> に含まれている JSON 構造を、指定されたタイプのインスタンスに逆シリアル化します。</summary>
            <param name="reader">オブジェクトを含む <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <typeparam name="T">逆シリアル化するオブジェクトのタイプ。</typeparam>
            <returns>逆シリアル化されている <typeparamref name="T"/> のインスタンス。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> に含まれている JSON 構造を、指定されたタイプのインスタンスに逆シリアル化します。</summary>
            <param name="reader">オブジェクトを含む <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">逆シリアル化されるオブジェクトの <see cref="T:System.Type"/>。</param>
            <returns>逆シリアル化されている <paramref name="objectType"/> のインスタンス。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>指定された <see cref="T:System.Object"/> をシリアル化し、指定された <see cref="T:System.IO.TextWriter"/> を使用して JSON 構造を <c>Stream</c> に書き込みます。</summary>
            <param name="textWriter">JSON 構造体の書き込みに使用される <see cref="T:System.IO.TextWriter"/>。</param>
            <param name="value">シリアル化する <see cref="T:System.Object"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
            <summary>指定された <see cref="T:System.Object"/> をシリアル化し、指定された <see cref="T:System.IO.TextWriter"/> を使用して JSON 構造を <c>Stream</c> に書き込みます。</summary>
            <param name="jsonWriter">JSON 構造体の書き込みに使用される <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">シリアル化する <see cref="T:System.Object"/>。</param>
            <param name="objectType">シリアル化される値のタイプ。このパラメーターは、値のタイプが一致しない場合に <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> を Auto にしてタイプ名を書き込む際に使用されます。タイプの指定はオプションです。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>指定された <see cref="T:System.Object"/> をシリアル化し、指定された <see cref="T:System.IO.TextWriter"/> を使用して JSON 構造を <c>Stream</c> に書き込みます。</summary>
            <param name="textWriter">JSON 構造体の書き込みに使用される <see cref="T:System.IO.TextWriter"/>。</param>
            <param name="value">シリアル化する <see cref="T:System.Object"/>。</param>
            <param name="objectType">シリアル化される値のタイプ。このパラメーターは、値のタイプが一致しない場合に <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> を Auto にしてタイプ名を書き込む際に使用されます。タイプの指定はオプションです。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>指定された <see cref="T:System.Object"/> をシリアル化し、指定された <see cref="T:Newtonsoft.Json.JsonWriter"/> を使用して JSON 構造を <c>Stream</c> に書き込みます。</summary>
            <param name="jsonWriter">JSON 構造体の書き込みに使用される <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">シリアル化する <see cref="T:System.Object"/>。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializerSettings">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> オブジェクトで設定を指定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>参照ループ (参照自体を参照するクラスなど) の処理方法を取得または設定します。</summary>
            <value>参照ループ処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>逆シリアル化の間に欠損しているメンバー (例: JSON にオブジェクトのメンバーではないプロパティが含まれている) を処理する方法を取得または設定します。</summary>
            <value>メンバー処理がありません。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>逆シリアル化の間にオブジェクトを作成する方法を取得または設定します。</summary>
            <value>オブジェクト作成処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>シリアル化および逆シリアル化の間に null 値を処理する方法を取得または設定します。</summary>
            <value>Null 値の処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>シリアル化および逆シリアル化の間に null 規定値を処理する方法を取得または設定します。</summary>
            <value>既定値の処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>シリアル化の間に使用される <see cref="T:Newtonsoft.Json.JsonConverter"/> コレクションを取得または設定します。</summary>
            <value>コンバーター。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>シリアライザーによってオブジェクト参照を保持する方法を取得または設定します。</summary>
            <value>保存参照の処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>シリアライザーがタイプ名の書き込みと読み取りを処理する方法を取得または設定します。</summary>
            <remarks><see cref="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling"/> アプリケーションが外部ソースから JSON を逆シリアル化する場合は、注意して使用する必要があります。<c>TypeNameHandling.None</c>以外の値を使用して逆シリアル化する場合は、着信タイプをカスタム <see cref="T:System.Runtime.Serialization.SerializationBinder"/> で検証する必要があります。</remarks>
            <value>タイプ名の処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>逆シリアル化の間にメタデータ プロパティを使用する方法を取得または設定します。</summary>
            <value>処理するメタデータ プロパティ。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>シリアライザーでタイプ名アセンブリを書き込み、解決する方法を取得または設定します。</summary>
            <value>タイプ名アセンブリ形式。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>逆シリアル化の間にコンストラクターを使用する方法を取得または設定します。</summary>
            <value>コンストラクターの処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>.NET オブジェクトを JSON にシリアル化する際 (またはその逆の場合) にシリアライザーが使用するコントラクト リゾルバーを取得または設定します。</summary>
            <value>コントラクト リゾルバー。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.EqualityComparer">
            <summary>参照を比較する際、シリアライザーが使用する等値比較関数を取得または設定します。</summary>
            <value>等値比較関数。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>参照を解決する際、シリアライザーが使用する <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/> を取得または設定します。</summary>
            <value>参照リゾルバー。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>参照を解決する際にシリアライザーが使用する <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/> を作成する関数を取得または設定します。</summary>
            <value>参照を解決する際にシリアライザーが使用する <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/> を作成する関数。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>トレース メッセージを書き込む際、シリアライザーが使用する を取得または設定します。</summary>
            <value>トレース ライター。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>タイプ名を解決する際、シリアライザーが使用する <see cref="T:System.Runtime.Serialization.SerializationBinder"/> を取得または設定します。</summary>
            <value>バインダー。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>シリアル化および逆シリアル化の間に呼び出されるエラー ハンドラーを取得または設定します。</summary>
            <value>シリアル化および逆シリアル化の間に呼び出されるエラー ハンドラー。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>シリアル化コールバック メソッドを呼び出す際にシリアライザーが使用する <see cref="T:System.Runtime.Serialization.StreamingContext"/> を取得または設定します。</summary>
            <value>コンテキスト。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
            <summary>JSON テキストを書き込む際に <see cref="T:System.DateTime"/> および <see cref="T:System.DateTimeOffset"/> 値を書式設定する方法と、JSON テキストの読み取り時に予想される日付形式を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>JSON を読み取る際に許可される最大深度を取得または設定します。読み取り値がこの深度を越えると、<see cref="T:Newtonsoft.Json.JsonReaderException"/> がスローされます。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>JSON テキスト出力の書式設定方法を示します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>JSON テキストへの日付の書き込み方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>シリアル化および逆シリアル化の間に <see cref="T:System.DateTime"/> タイム ゾーンを処理する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>JSON を読み取る際に日付書式設定された文字列 (例: &quot;\/Date(1198908717056)\/&quot; および &quot;2012-03-21T05:40Z&quot;) を解析する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>特殊な浮動小数点数 (<see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.PositiveInfinity"/>、<see cref="F:System.Double.NegativeInfinity"/> など) をJSON として書き込む方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>JSON テキストを読み取る際に浮動小数点数 (1.0 や 9.9 など) がどのように解析されるかを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>JSON テキストを書き込む際に文字列をエスケープする方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>JSON の読み取り時に使用されるカルチャを取得または設定します。既定値は <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> です。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>オブジェクトの逆シリアル化後に追加のコンテンツのチェックがあるかどうかを示す値を取得します。</summary>
            <value>オブジェクトの逆シリアル化後に追加のコンテンツのチェックがある場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextReader">
            <summary>JSON テキスト データへの高速でキャッシュされていない転送専用のアクセスを提供する閲覧者を表します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>指定された <see cref="T:System.IO.TextReader"/> で <see cref="T:Newtonsoft.Json.JsonReader"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="reader">読み取る XML データを含む <c>TextReader</c>。</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.ArrayPool">
            <summary>閲覧者の文字バッファー プールを取得または設定します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Read">
            <summary>ストリームから次の JSON トークンを読み取ります。</summary>
            <returns>次のトークンが正常に読み取られた場合は <c>true</c>、読み取るトークンがこれ以上ない場合は <c>false</c> です。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.String"/> として読み取ります。</summary>
            <returns><see cref="T:System.String"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Byte"/>[] として読み取ります。</summary>
            <returns><see cref="T:System.Byte"/>[]、または次の JSON トークンが null の場合は null 参照です。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBoolean">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDouble">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Close">
            <summary>状態を closed に変更します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>クラスが行情報を返すことができるかどうかを示す値を取得します。</summary>
            <returns>LineNumber と LinePosition を提供できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>現在の行番号を取得します。</summary>
            <value>現在の行番号、または行情報を利用できない場合は 0 (たとえば、HasLineInfo が false を返す場合)。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>現在の行位置を取得します。</summary>
            <value>現在の行位置、または行情報を使用できない場合は 0 (たとえば、HasLineInfo が false を返す場合)。</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextWriter">
            <summary>JSON データを生成する、高速でキャッシュされていない転送専用の方法を提供するライターを表します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.ArrayPool">
            <summary>ライターの文字配列プールを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary><see cref="T:Newtonsoft.Json.Formatting"/> が <c>Formatting.Indented</c> に設定されている場合に、階層内の各レベルに対して書き込む IndentChars の数を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>属性値の引用で使用する文字を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary><see cref="T:Newtonsoft.Json.Formatting"/> が <c>Formatting.Indented</c> に設定されている場合にインデントで使用する文字を取得または設定します。  </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>オブジェクト名を引用符で囲むかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>指定された <see cref="T:System.IO.TextWriter"/> を使用して <c>JsonWriter</c> クラスのインスタンスを作成します。</summary>
            <param name="textWriter">書き込む先の <c>TextWriter</c>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>バッファー内のものをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
            <summary>このストリームと基になるストリームを閉じます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>JSON オブジェクトの先頭を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>JSON 配列の先頭を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>特定の名前でコンストラクターの開始を書き込みます。</summary>
            <param name="name">コンストラクターの名前。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>指定された終了トークンを書き込みます。</summary>
            <param name="token">書き込む終了トークン。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>JSON オブジェクトに名前と値のペアのプロパティ名を書き込みます。</summary>
            <param name="name">プロパティの名前。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>JSON オブジェクトに名前と値のペアのプロパティ名を書き込みます。</summary>
            <param name="name">プロパティの名前。</param>
            <param name="escape">JSON プロパティ名として書き込まれるときにテキストをエスケープするかどうかを示すフラグ。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>インデント文字を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>JSON 値区切り文字を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>インデント スペースを書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary><see cref="T:System.Object"/> 値を書き込みます。値を単一の JSON トークンとして書き込むことができない場合は、エラーが発生します。</summary>
            <param name="value">書き込む <see cref="T:System.Object"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>null 値を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>未定義の値を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>生の JSON を書き込みます。</summary>
            <param name="json">書き込む生 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary><see cref="T:System.String"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.String"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary><see cref="T:System.Int32"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Int32"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary><see cref="T:System.UInt32"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.UInt32"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary><see cref="T:System.Int64"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Int64"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary><see cref="T:System.UInt64"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.UInt64"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary><see cref="T:System.Single"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Single"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary><see cref="T:System.Double"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Double"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary><see cref="T:System.Boolean"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Boolean"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary><see cref="T:System.Int16"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Int16"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary><see cref="T:System.UInt16"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.UInt16"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary><see cref="T:System.Char"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Char"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary><see cref="T:System.Byte"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Byte"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary><see cref="T:System.SByte"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.SByte"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary><see cref="T:System.Decimal"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Decimal"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary><see cref="T:System.DateTime"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.DateTime"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary><see cref="T:System.Byte"/>[] 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Byte"/>[] 値</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary><see cref="T:System.DateTimeOffset"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.DateTimeOffset"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary><see cref="T:System.Guid"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Guid"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary><see cref="T:System.TimeSpan"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.TimeSpan"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary><see cref="T:System.Uri"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Uri"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>指定されたテキストをすくむコメント <code>/*...*/ </code>を書き出します。</summary>
            <param name="text">コメント内に配置するテキスト。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>指定された空白を書き出します。</summary>
            <param name="ws">空白文字の文字列。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>JSON トークンのタイプを指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary><see cref="M:Newtonsoft.Json.JsonReader.Read"/> メソッドが呼び出されていない場合、これは <see cref="T:Newtonsoft.Json.JsonReader"/>  によって返されます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>オブジェクト開始トークン。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>配列開始トークン。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>コンストラクター開始トークン。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>オブジェクト プロパティ名。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>コメント。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Raw">
            <summary>生 JSON。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>整数。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>浮動小数点数。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>文字列。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>ブール値。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>null トークン。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>未定義のトークン。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>オブジェクト終了トークン。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>配列終了トークン。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>コンストラクター終了トークン。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>日付。</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Bytes">
            <summary>バイト データ。</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonValidatingReader">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>検証を提供する閲覧者を表します。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>スキーマ検証エラーを受信するためのイベント ハンドラーを設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>現在の JSON トークンのテキスト値を取得します。</summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>JSON ドキュメント内の現在のトークンの深度を取得します。</summary>
            <value>JSON ドキュメント内の現在のトークンの深度。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>現在の JSON トークンのパスを取得します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>文字列の値を囲むために使用される引用符文字を取得します。</summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>現在の JSON トークンのタイプを取得します。</summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>現在の JSON トークンの共通言語ランタイム (CLR) タイプを取得します。</summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
            <summary>特定の <see cref="T:Newtonsoft.Json.JsonReader"/> から返すコンテンツを検証する <see cref="T:Newtonsoft.Json.JsonValidatingReader"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="reader">検証中に読み取る先の <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>スキーマを取得または設定します。</summary>
            <value>スキーマ。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>この <see cref="T:Newtonsoft.Json.JsonValidatingReader"/> を構築するために使用する <see cref="T:Newtonsoft.Json.JsonReader"/> を取得します。</summary>
            <value>コンストラクターで指定された <see cref="T:Newtonsoft.Json.JsonReader"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Byte"/>[] として読み取ります。</summary>
            <returns><see cref="T:System.Byte"/>[]、または次の JSON トークンが null の場合は null 参照です。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDouble">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBoolean">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.String"/> として読み取ります。</summary>
            <returns><see cref="T:System.String"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。このメソッドは配列の末端で <c>null</c> を返します。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>ストリームから次の JSON トークンを <see cref="T:System.Nullable`1"/> として読み取ります。</summary>
            <returns><see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>ストリームから次の JSON トークンを読み取ります。</summary>
            <returns>次のトークンが正常に読み取られた場合は <c>true</c>、読み取るトークンがこれ以上ない場合は <c>false</c> です。</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriter">
            <summary>JSON データを生成する、高速でキャッシュされていない転送専用の方法を提供するライターを表します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>ライターを終了すると、基になるストリームまたは <see cref="T:System.IO.TextReader"/> を閉じるべきかどうかを示す値を取得または設定します。</summary>
            <value>ライターの終了時に基になるストリームまたは <see cref="T:System.IO.TextReader"/> を閉じる場合は true、それ以外の場合は false です。既定値は true です。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Top">
            <summary>トップを取得します。</summary>
            <value>トップ。</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
            <summary>ライターの状態を取得します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Path">
            <summary>ライターのパスを取得します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
            <summary>JSON テキスト出力の書式設定方法を示します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>JSON テキストへの日付の書き込み方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>JSON テキストを書き込む際に <see cref="T:System.DateTime"/> タイム ゾーンを処理する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>JSON テキストを書き込む際に文字列をエスケープする方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
            <summary>特殊な浮動小数点数 (<see cref="F:System.Double.NaN"/>、<see cref="F:System.Double.PositiveInfinity"/>、 <see cref="F:System.Double.NegativeInfinity"/> など) を JSON テキストに書き込む方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
            <summary>JSON を書き込む際に <see cref="T:System.DateTime"/> と <see cref="T:System.DateTimeOffset"/> の値を書式設定する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Culture">
            <summary>JSON の書き込み時に使用されるカルチャを取得または設定します。既定値は <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> です。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
            <summary><c>JsonWriter</c> クラスのインスタンスを作成します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Flush">
            <summary>バッファー内のものをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Close">
            <summary>このストリームと基になるストリームを閉じます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>JSON オブジェクトの先頭を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>JSON オブジェクトの末尾を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>JSON 配列の先頭を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>配列の末尾を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>特定の名前でコンストラクターの開始を書き込みます。</summary>
            <param name="name">コンストラクターの名前。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>終了コンストラクターを書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>JSON オブジェクトに名前と値のペアのプロパティ名を書き込みます。</summary>
            <param name="name">プロパティの名前。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>JSON オブジェクトに名前と値のペアのプロパティ名を書き込みます。</summary>
            <param name="name">プロパティの名前。</param>
            <param name="escape">JSON プロパティ名として書き込まれるときにテキストをエスケープするかどうかを示すフラグ。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>現在の JSON オブジェクトまたは配列の末尾を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
            <summary>現在の <see cref="T:Newtonsoft.Json.JsonReader"/> トークンとその子を書き込みます。</summary>
            <param name="reader">トークンを読み取る先の <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>現在の <see cref="T:Newtonsoft.Json.JsonReader"/> トークンを書き込みます。</summary>
            <param name="reader">トークンを読み取る先の <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="writeChildren">現在のトークンの子を書き込むかどうかを示すフラグ。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary><see cref="T:Newtonsoft.Json.JsonToken"/> トークンとその値を書き込みます。</summary>
            <param name="token">書き込む <see cref="T:Newtonsoft.Json.JsonToken"/>。</param>
            <param name="value">書き込む値。値は、関連付けられた値のあるトークンに対してのみ必要です (<see cref="F:Newtonsoft.Json.JsonToken.PropertyName"/> の <see cref="T:System.String"/> プロパティ名など)。null 値は、値のないトークンのメソッドに渡すことができます (<see cref="F:Newtonsoft.Json.JsonToken.StartObject"/> など)。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken)">
            <summary><see cref="T:Newtonsoft.Json.JsonToken"/> トークンを書き込みます。</summary>
            <param name="token">書き込む <see cref="T:Newtonsoft.Json.JsonToken"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>指定された終了トークンを書き込みます。</summary>
            <param name="token">書き込む終了トークン。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>インデント文字を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>JSON 値区切り文字を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>インデント スペースを書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>null 値を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>未定義の値を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>ライターの状態を変更せずに生 JSON を書き込みます。</summary>
            <param name="json">書き込む生 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>値が予想される生の JSON を書き込み、ライターの状態を更新します。</summary>
            <param name="json">書き込む生 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary><see cref="T:System.String"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.String"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary><see cref="T:System.Int32"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Int32"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary><see cref="T:System.UInt32"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.UInt32"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary><see cref="T:System.Int64"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Int64"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary><see cref="T:System.UInt64"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.UInt64"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary><see cref="T:System.Single"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Single"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary><see cref="T:System.Double"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Double"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary><see cref="T:System.Boolean"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Boolean"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary><see cref="T:System.Int16"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Int16"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary><see cref="T:System.UInt16"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.UInt16"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary><see cref="T:System.Char"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Char"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary><see cref="T:System.Byte"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Byte"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary><see cref="T:System.SByte"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.SByte"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary><see cref="T:System.Decimal"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Decimal"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary><see cref="T:System.DateTime"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.DateTime"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary><see cref="T:System.DateTimeOffset"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.DateTimeOffset"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary><see cref="T:System.Guid"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Guid"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary><see cref="T:System.TimeSpan"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.TimeSpan"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary><see cref="T:System.Nullable`1"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Nullable`1"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary><see cref="T:System.Byte"/>[] 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Byte"/>[] 値</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary><see cref="T:System.Uri"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Uri"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary><see cref="T:System.Object"/> 値を書き込みます。値を単一の JSON トークンとして書き込むことができない場合は、エラーが発生します。</summary>
            <param name="value">書き込む <see cref="T:System.Object"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>指定されたテキストをすくむコメント <code>/*...*/ </code>を書き出します。</summary>
            <param name="text">コメント内に配置するテキスト。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>指定された空白を書き出します。</summary>
            <param name="ws">空白文字の文字列。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>アンマネージド リソースと (オプションで) マネージド リソースをリリースします</summary>
            <param name="disposing">マネージド リソースとアンマネージド リソースの両方をリリースする場合は <c>true</c>、アンマネージド リソースのみをリリースする場合は <c>false</c> です。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>JsonWriter の状態を設定します。</summary>
            <param name="token">書き込まれている JsonToken。</param>
            <param name="value">書き込まれている値。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>JSON テキストの読み取り中にエラーが発生したときにスローされる例外。</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriterException.Path">
            <summary>エラーが発生した JSON へのパスを取得します。</summary>
            <value>エラーが発生した JSON へのパス。</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonWriterException"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>指定されたエラー メッセージを使用して、<see cref="T:Newtonsoft.Json.JsonWriterException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の理由を説明するエラー メッセージ。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>指定されたエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:Newtonsoft.Json.JsonWriterException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の理由を説明するエラー メッセージ。</param>
            <param name="innerException">現在の例外の原因である例外、または内部例外が指定されていない場合は null 参照 (Visual Basic では Nothing)。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary><see cref="T:Newtonsoft.Json.JsonWriterException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">スローされる例外に関するシリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">ソースまたは宛先に関するコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> パラメータは null です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">クラス名は null または <see cref="P:System.Exception.HResult"/> はゼロ (0) です。</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.CommentHandling">
            <summary>JSON の読み込み時に JSON コメントを処理する方法を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Ignore">
            <summary>コメントを無視します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Load">
            <summary>タイプ <see cref="F:Newtonsoft.Json.Linq.JTokenType.Comment"/> で <see cref="T:Newtonsoft.Json.Linq.JValue"/> としてコメントを読み込みます。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.LineInfoHandling">
            <summary>JSON の読み込み時に行情報を処理する方法を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Ignore">
            <summary>行情報を無視します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Load">
            <summary>行情報を読み込みます。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Extensions">
            <summary>LINQ から JSON への拡張メソッドが含まれています。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>ソース コレクション内の各トークンの祖先を含むトークンのコレクションを返します。</summary>
            <typeparam name="T">ソース内のオブジェクトのタイプ。<see cref="T:Newtonsoft.Json.Linq.JToken"/> に制約されます。</typeparam>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。 </param>
            <returns>ソース コレクションの各トークンの祖先を含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>ソース コレクション内の各トークンと、ソース コレクション内の各トークンの祖先を含むトークンのコレクションを返します。</summary>
            <typeparam name="T">ソース内のオブジェクトのタイプ。<see cref="T:Newtonsoft.Json.Linq.JToken"/> に制約されます。</typeparam>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>ソース コレクション内の各トークン、ソース コレクション内の各トークンの祖先を含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>ソース コレクション内の各トークンの子孫を含むトークンのコレクションを返します。</summary>
            <typeparam name="T">ソース内のオブジェクトのタイプ。<see cref="T:Newtonsoft.Json.Linq.JContainer"/> に制約されます。</typeparam>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>ソース コレクション内のあらゆるトークンの子孫を含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>ソース コレクション内のあらゆるトークンと、ソース コレクション内の各トークンの子孫を含むトークンのコレクションを返します。</summary>
            <typeparam name="T">ソース内のオブジェクトのタイプ。<see cref="T:Newtonsoft.Json.Linq.JContainer"/> に制約されます。</typeparam>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>ソース コレクション内のあらゆるトークンと、ソース コレクション内のあらゆるトークンの子孫を含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>ソース コレクション内のあらゆるオブジェクトの子プロパティのコレクションを返します。</summary>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JObject"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>ソース コレクション内のあらゆるオブジェクトのプロパティを含む <see cref="T:Newtonsoft.Json.Linq.JProperty"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>  。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>特定のキーを使用して、ソース コレクション内のあらゆるオブジェクトの子値のコレクションを返します。</summary>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <param name="key">トークン キー。</param>
            <returns>特定のキーを使用して、ソース コレクション内のあらゆるトークンの値を含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>ソース コレクション内のあらゆるオブジェクトの子値のコレクションを返します。</summary>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>ソース コレクション内のあらゆるトークンの値を含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>特定のキーを使用して、ソース コレクション内のあらゆるオブジェクトの変換された子値のコレクションを返します。</summary>
            <typeparam name="U">値を変換するタイプ。</typeparam>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <param name="key">トークン キー。</param>
            <returns>特定のキーを使用して、ソース コレクション内のあらゆるトークンの変換された値を含む <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>ソース コレクション内のあらゆるオブジェクトの変換された子値のコレクションを返します。</summary>
            <typeparam name="U">値を変換するタイプ。</typeparam>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>ソース コレクション内のあらゆるトークンの変換された値を含む <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>値を変換します。</summary>
            <typeparam name="U">値を変換するタイプ。</typeparam>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/> としての <see cref="T:Newtonsoft.Json.Linq.JToken"/> キャスト。</param>
            <returns>変換された値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>値を変換します。</summary>
            <typeparam name="T">ソース コレクションのタイプ。</typeparam>
            <typeparam name="U">値を変換するタイプ。</typeparam>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/> としての <see cref="T:Newtonsoft.Json.Linq.JToken"/> キャスト。</param>
            <returns>変換された値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>ソース コレクション内のあらゆる配列の子トークンのコレクションを返します。</summary>
            <typeparam name="T">ソース コレクションのタイプ。</typeparam>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>ソース コレクション内のあらゆるトークンの値を含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>ソース コレクション内のあらゆる配列の変換された子トークンのコレクションを返します。</summary>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <typeparam name="U">値を変換するタイプ。</typeparam>
            <typeparam name="T">ソース コレクションのタイプ。</typeparam>
            <returns>ソース コレクション内のあらゆるトークンの変換された値を含む <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>タイプされた入力を <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> として返します。</summary>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> としてタイプされた入力。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>タイプされた入力を <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> として返します。</summary>
            <typeparam name="T">ソース コレクションのタイプ。</typeparam>
            <param name="source">ソース コレクションを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> としてタイプされた入力。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>オブジェクトのコレクションを表します。</summary>
            <typeparam name="T">トークンのタイプ</typeparam>
        </member>
        <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>指定されたキーのある <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> を取得します。</summary>
            <value></value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JArray">
            <summary>JSON 配列を表します。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" /></example>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>コンテナーの子トークンを取得します。</summary>
            <value>コンテナーの子トークン。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Type">
            <summary>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> のノード タイプを取得します。</summary>
            <value>タイプ。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Linq.JArray"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JArray"/> クラスの新しいインスタンスを別の <see cref="T:Newtonsoft.Json.Linq.JArray"/> オブジェクトから初期化します。</summary>
            <param name="other">コピー元の <see cref="T:Newtonsoft.Json.Linq.JArray"/> オブジェクト。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>指定されたコンテンツで <see cref="T:Newtonsoft.Json.Linq.JArray"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="content">配列のコンテンツ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>指定されたコンテンツで <see cref="T:Newtonsoft.Json.Linq.JArray"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="content">配列のコンテンツ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JArray"/> を <see cref="T:Newtonsoft.Json.JsonReader"/> から読み込みます。 </summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JArray"/> のコンテンツ向けに読み取られる <see cref="T:Newtonsoft.Json.JsonReader"/>。 </param>
            <returns>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> から読み取られた JSON を含む <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JArray"/> を <see cref="T:Newtonsoft.Json.JsonReader"/> から読み込みます。</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JArray"/> のコンテンツ向けに読み取られる <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="settings">JSON を読み込むために使用される <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。これが null の場合は、既定の読み込み設定が使用されます。</param>
            <returns>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> から読み取られた JSON を含む <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>JSON を含む文字列から <see cref="T:Newtonsoft.Json.Linq.JArray"/> を読み込みます。</summary>
            <param name="json">JSON を含む <see cref="T:System.String"/>。</param>
            <returns>JSON を含む文字列から設定される <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>JSON を含む文字列から <see cref="T:Newtonsoft.Json.Linq.JArray"/> を読み込みます。</summary>
            <param name="json">JSON を含む <see cref="T:System.String"/>。</param>
            <param name="settings">JSON を読み込むために使用される <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。これが null の場合は、既定の読み込み設定が使用されます。</param>
            <returns>JSON を含む文字列から設定される <see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>オブジェクトから <see cref="T:Newtonsoft.Json.Linq.JArray"/> を作成します。</summary>
            <param name="o"><see cref="T:Newtonsoft.Json.Linq.JArray"/> を作成するために使用されるオブジェクト。</param>
            <returns>指定されたオブジェクトの値がある <see cref="T:Newtonsoft.Json.Linq.JArray"/></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトから <see cref="T:Newtonsoft.Json.Linq.JArray"/> を作成します。</summary>
            <param name="o"><see cref="T:Newtonsoft.Json.Linq.JArray"/> を作成するために使用されるオブジェクト。</param>
            <param name="jsonSerializer">オブジェクトの読み取りに使用される <see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>指定されたオブジェクトの値がある <see cref="T:Newtonsoft.Json.Linq.JArray"/></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>このトークンを <see cref="T:Newtonsoft.Json.JsonWriter"/> に書き込みます。</summary>
            <param name="writer">このメソッドを書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">トークンを書き込む際に使用される <see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクション。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>指定されたキーのある <see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得します。</summary>
            <value>指定されたキーのある <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>指定されたインデックスで <see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得または設定します。</summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
            <summary><see cref="T:System.Collections.Generic.IList`1"/> で特定の項目のインデックスを判定します。</summary>
            <param name="item"><see cref="T:System.Collections.Generic.IList`1"/> で検索するオブジェクト。</param>
            <returns>リストに含まれている場合は <paramref name="item"/> のインデックス、それ以外の場合は -1。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
            <summary>指定されたインデックスで項目を <see cref="T:System.Collections.Generic.IList`1"/> に挿入します。</summary>
            <param name="index"><paramref name="item"/> を挿入する必要があるゼロから始まるインデックス。</param>
            <param name="item"><see cref="T:System.Collections.Generic.IList`1"/> に挿入するオブジェクト。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> は <see cref="T:System.Collections.Generic.IList`1"/> で有効なインデックスではありません。</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.IList`1"/> は読み取り専用です。</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>指定されたインデックスで <see cref="T:System.Collections.Generic.IList`1"/> 項目を削除します。</summary>
            <param name="index">削除する項目のゼロから始まるインデックス。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> は <see cref="T:System.Collections.Generic.IList`1"/> で有効なインデックスではありません。</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.IList`1"/> は読み取り専用です。</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator">
            <summary>コレクションを介して反復する列挙子を返します。</summary>
            <returns>コレクションを介して反復するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
            <summary><see cref="T:System.Collections.Generic.ICollection`1"/> に項目を追加します。</summary>
            <param name="item"><see cref="T:System.Collections.Generic.ICollection`1"/> に追加するオブジェクト。</param>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/> は読み取り専用です。</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
            <summary><see cref="T:System.Collections.Generic.ICollection`1"/> からすべての項目を削除します。</summary>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/> は読み取り専用です。</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
            <summary><see cref="T:System.Collections.Generic.ICollection`1"/> に特定の値が含まれているかどうか判定します。</summary>
            <param name="item"><see cref="T:System.Collections.Generic.ICollection`1"/> で検索するオブジェクト。</param>
            <returns><paramref name="item"/> が <see cref="T:System.Collections.Generic.ICollection`1"/> で見つかった場合は true、それ以外の場合は false です。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)">
            <summary>コピー先。</summary>
            <param name="array">配列。</param>
            <param name="arrayIndex">配列のインデックス。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly">
            <summary><see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
            <returns><see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用の場合は true、それ以外の場合は false です。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
            <summary>最初に発生した特定のオブジェクトを <see cref="T:System.Collections.Generic.ICollection`1"/> から削除します。</summary>
            <param name="item"><see cref="T:System.Collections.Generic.ICollection`1"/> から削除するオブジェクト。</param>
            <returns><paramref name="item"/> を <see cref="T:System.Collections.Generic.ICollection`1"/> から削除できた場合は true、それ以外の場合は false です。このメソッドは、<paramref name="item"/> が元の <see cref="T:System.Collections.Generic.ICollection`1"/> で見つからない場合、false を返します。 </returns>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/> は読み取り専用です。</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JConstructor">
            <summary>JSON コンストラクターを表します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>コンテナーの子トークンを取得します。</summary>
            <value>コンテナーの子トークン。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>このコンストラクターの名前を取得または設定します。</summary>
            <value>コンストラクター名。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> のノード タイプを取得します。</summary>
            <value>タイプ。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Linq.JConstructor"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JConstructor"/> クラスの新しいインスタンスを別の <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> オブジェクトから初期化します。</summary>
            <param name="other">コピー元の <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> オブジェクト。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>指定された名前とコンテンツを使用して、<see cref="T:Newtonsoft.Json.Linq.JConstructor"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">コンストラクター名。</param>
            <param name="content">コンストラクターのコンテンツ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>指定された名前とコンテンツを使用して、<see cref="T:Newtonsoft.Json.Linq.JConstructor"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">コンストラクター名。</param>
            <param name="content">コンストラクターのコンテンツ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>指定された名前のある <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">コンストラクター名。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>このトークンを <see cref="T:Newtonsoft.Json.JsonWriter"/> に書き込みます。</summary>
            <param name="writer">このメソッドを書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">トークンを書き込む際に使用される <see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクション。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>指定されたキーのある <see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得します。</summary>
            <value>指定されたキーのある <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JConstructor"/> を <see cref="T:Newtonsoft.Json.JsonReader"/> から読み込みます。</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JConstructor"/> のコンテンツ向けに読み取られる <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> から読み取られた JSON を含む <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JConstructor"/> を <see cref="T:Newtonsoft.Json.JsonReader"/> から読み込みます。</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JConstructor"/> のコンテンツ向けに読み取られる <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="settings">JSON を読み込むために使用される <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。これが null の場合は、既定の読み込み設定が使用されます。</param>
            <returns>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> から読み取られた JSON を含む <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JContainer">
            <summary>他のトークンを含むことができるトークンを表します。</summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
            <summary>リストが変更されたり、リスト内の項目が変更されたりした場合に発生します。</summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
            <summary>項目がコレクションに追加される前に発生します。</summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
            <summary>コレクションの項目リストが変更された場合、またはコレクションがリセットされた場合に発生します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>コンテナーの子トークンを取得します。</summary>
            <value>コンテナーの子トークン。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary><see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew"/> イベントを発生させます。</summary>
            <param name="e">イベント データを含む <see cref="T:System.ComponentModel.AddingNewEventArgs"/> インスタンス。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary><see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged"/> イベントを発生させます。</summary>
            <param name="e">イベント データを含む <see cref="T:System.ComponentModel.ListChangedEventArgs"/> インスタンス。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary><see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged"/> イベントを発生させます。</summary>
            <param name="e">イベント データを含む <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> インスタンス。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>このトークンに子トークンがあるかどうかを示す値を取得します。</summary>
            <value>このトークンに子値がある場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.First">
            <summary>このトークンの最初の子トークンを取得します。</summary>
            <value><see cref="T:Newtonsoft.Json.Linq.JToken"/> の最初の子トークンを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> 。 </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
            <summary>このトークンの最後の子トークンを取得します。</summary>
            <value><see cref="T:Newtonsoft.Json.Linq.JToken"/> の最後の子トークンを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/>。 </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
            <summary>このトークンの子トークンのコレクションをドキュメント順に返します。</summary>
            <returns>ドキュメント順に、この<see cref="T:Newtonsoft.Json.Linq.JToken"/> の子トークンを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>  。  </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>このトークンの子値のコレクションをドキュメント順に返します。</summary>
            <typeparam name="T">値を変換するタイプ。</typeparam>
            <returns>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> の子値をドキュメント順で含む <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>このトークンの子孫トークンのコレクションをドキュメント順に返します。</summary>
            <returns><see cref="T:Newtonsoft.Json.Linq.JToken"/> の子孫トークンを含む <see cref="T:System.Collections.Generic.IEnumerable`1"/>。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.DescendantsAndSelf">
            <summary>このトークンを含むトークンのコレクションと、このトークンのすべての子孫トークンをドキュメント順に返します。</summary>
            <returns>このトークンと、 <see cref="T:Newtonsoft.Json.Linq.JToken"/> のすべての子孫トークンを含む <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>指定されたコンテンツをこの  <see cref="T:Newtonsoft.Json.Linq.JToken"/> の子として追加します。</summary>
            <param name="content">追加するコンテンツ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> の最初の子として、指定されたコンテンツを追加します。</summary>
            <param name="content">追加するコンテンツ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> にトークンを追加するために使用できる <see cref="T:Newtonsoft.Json.JsonWriter"/> を作成します。</summary>
            <returns>コンテンツを書き込む準備ができている <see cref="T:Newtonsoft.Json.JsonWriter"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>このトークンの子ノードを指定されたコンテンツに置き換えます。</summary>
            <param name="content">コンテンツ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>このトークンから子ノードを削除します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object)">
            <summary>指定されたコンテンツをこの <see cref="T:Newtonsoft.Json.Linq.JToken"/> にマージします。</summary>
            <param name="content">マージするコンテンツ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object,Newtonsoft.Json.Linq.JsonMergeSettings)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings"/> を使用して、指定されたコンテンツをこの <see cref="T:Newtonsoft.Json.Linq.JToken"/> にマージします。 </summary>
            <param name="content">マージするコンテンツ。</param>
            <param name="settings">コンテンツをマージするために使用される <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings"/>。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
            <summary>子 JSON トークンの数を取得します。</summary>
            <value>子 JSON トークンの数</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>オブジェクトのコレクションを表します。</summary>
            <typeparam name="T">トークンのタイプ</typeparam>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> オブジェクトの空のコレクション。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary><see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> 構造の新しいインスタンスを初期化します。</summary>
            <param name="enumerable">列挙可能。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>コレクションを介して反復する列挙子を返します。</summary>
            <returns>コレクションを介して反復するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>コレクションを介して反復する列挙子を返します。</summary>
            <returns>コレクションを介して反復に使用できる <see cref="T:System.Collections.IEnumerator"/> コレクション。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>指定されたキーのある <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/> を取得します。</summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(Newtonsoft.Json.Linq.JEnumerable{`0})">
            <summary>指定された <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> とこのインスタンスが等しいかどうかを判定します。</summary>
            <param name="other">このインスタンスに比較する <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>。</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> がこのインスタンスに等しい場合は <c>true</c>、それ以外の場合は <c>false</c> です。   </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>指定された <see cref="T:System.Object"/> とこのインスタンスが等しいかどうかを判定します。</summary>
            <param name="obj">このインスタンスに比較する <see cref="T:System.Object"/>。</param>
            <returns><see cref="T:System.Object"/> がこのインスタンスに等しい場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>このインスタンスのハッシュ コードを返します。</summary>
            <returns>ハッシュ アルゴリズムやハッシュ テーブルなどのデータ構造での使用に適した、このインスタンスのハッシュ コード。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JObject">
            <summary>JSON オブジェクトを表します。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" /></example>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>コンテナーの子トークンを取得します。</summary>
            <value>コンテナーの子トークン。</value>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>プロパティ値が変更された場合に発生します。</summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
            <summary>プロパティ値が変更されている場合に発生します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Linq.JObject"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JObject"/> クラスの新しいインスタンスを別の <see cref="T:Newtonsoft.Json.Linq.JObject"/> オブジェクトから初期化します。</summary>
            <param name="other">コピー元の <see cref="T:Newtonsoft.Json.Linq.JObject"/> オブジェクト。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>指定されたコンテンツで <see cref="T:Newtonsoft.Json.Linq.JObject"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="content">オブジェクトのコンテンツ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>指定されたコンテンツで <see cref="T:Newtonsoft.Json.Linq.JObject"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="content">オブジェクトのコンテンツ。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Type">
            <summary>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> のノード タイプを取得します。</summary>
            <value>タイプ。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
            <summary>このオブジェクトのプロパティの <see cref="T:System.Collections.Generic.IEnumerable`1"/> を取得します。</summary>
            <returns>このオブジェクトのプロパティの <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JProperty"/> に指定された名前を取得します。</summary>
            <param name="name">プロパティ名。</param>
            <returns>指定された名前または null がある <see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>このオブジェクトのプロパティ値の <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> を取得します。</summary>
            <returns>このオブジェクトのプロパティ値の <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>指定されたキーのある <see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得します。</summary>
            <value>指定されたキーのある <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>指定されたプロパティ名を使用して、<see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得または設定します。</summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JObject"/> を <see cref="T:Newtonsoft.Json.JsonReader"/> から読み込みます。</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JObject"/> のコンテンツ向けに読み取られる <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> から読み取られた JSON を含む <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JObject"/> を <see cref="T:Newtonsoft.Json.JsonReader"/> から読み込みます。</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JObject"/> のコンテンツ向けに読み取られる <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="settings">JSON を読み込むために使用される <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。これが null の場合は、既定の読み込み設定が使用されます。</param>
            <returns>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> から読み取られた JSON を含む <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>JSON を含む文字列から <see cref="T:Newtonsoft.Json.Linq.JObject"/> を読み込みます。</summary>
            <param name="json">JSON を含む <see cref="T:System.String"/>。</param>
            <returns>JSON を含む文字列から設定される <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>JSON を含む文字列から <see cref="T:Newtonsoft.Json.Linq.JObject"/> を読み込みます。</summary>
            <param name="json">JSON を含む <see cref="T:System.String"/>。</param>
            <param name="settings">JSON を読み込むために使用される <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。これが null の場合は、既定の読み込み設定が使用されます。</param>
            <returns>JSON を含む文字列から設定される <see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>オブジェクトから <see cref="T:Newtonsoft.Json.Linq.JObject"/> を作成します。</summary>
            <param name="o"><see cref="T:Newtonsoft.Json.Linq.JObject"/> を作成するために使用されるオブジェクト。</param>
            <returns>指定されたオブジェクトの値がある <see cref="T:Newtonsoft.Json.Linq.JObject"/></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>オブジェクトから <see cref="T:Newtonsoft.Json.Linq.JObject"/> を作成します。</summary>
            <param name="o"><see cref="T:Newtonsoft.Json.Linq.JObject"/> を作成するために使用されるオブジェクト。</param>
            <param name="jsonSerializer">オブジェクトの読み取りに使用される <see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>指定されたオブジェクトの値がある <see cref="T:Newtonsoft.Json.Linq.JObject"/></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>このトークンを <see cref="T:Newtonsoft.Json.JsonWriter"/> に書き込みます。</summary>
            <param name="writer">このメソッドを書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">トークンを書き込む際に使用される <see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクション。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>指定されたプロパティ名のある <see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得します。</summary>
            <param name="propertyName">プロパティの名前。</param>
            <returns>指定されたプロパティ名のある <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>指定されたプロパティ名のある <see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得します。正確なプロパティ名が最初に検索されます。一致するプロパティが見つからない場合は、<see cref="T:System.StringComparison"/> を使用してプロパティを一致させます。</summary>
            <param name="propertyName">プロパティの名前。</param>
            <param name="comparison">文字列の比較方法を指定する列挙値の 1 つ。</param>
            <returns>指定されたプロパティ名のある <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
            <summary>指定されたプロパティ名のある <see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得しようとします。正確なプロパティ名が最初に検索されます。一致するプロパティが見つからない場合は、<see cref="T:System.StringComparison"/> を使用してプロパティを一致させます。</summary>
            <param name="propertyName">プロパティの名前。</param>
            <param name="value">値。</param>
            <param name="comparison">文字列の比較方法を指定する列挙値の 1 つ。</param>
            <returns>値を取得した場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>指定されたプロパティ名を追加します。</summary>
            <param name="propertyName">プロパティの名前。</param>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>指定された名前のプロパティを削除します。</summary>
            <param name="propertyName">プロパティの名前。</param>
            <returns>項目が削除された場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
            <summary>get 値を試します。</summary>
            <param name="propertyName">プロパティの名前。</param>
            <param name="value">値。</param>
            <returns>値を取得した場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>コレクションを介して反復する列挙子を返します。</summary>
            <returns>コレクションを介して反復するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>提供された引数で <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged"/> イベントを発生させます。</summary>
            <param name="propertyName">プロパティの名前。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>提供された引数で <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging"/> イベントを発生させます。</summary>
            <param name="propertyName">プロパティの名前。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>コンポーネントのこのインスタンスのプロパティを返します。</summary>
            <returns>このコンポーネント インスタンスのプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>属性配列をフィルターとして使用するコンポーネントのこのインスタンス向けにプロパティを返します。</summary>
            <param name="attributes">フィルターとして使用されるタイプ <see cref="T:System.Attribute"/> の配列。</param>
            <returns>このコンポーネント インスタンスでフィルター処理されたプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>コンポーネントのこのインスタンス向けにカスタム属性のコレクションを返します。</summary>
            <returns>このオブジェクトの属性を含む <see cref="T:System.ComponentModel.AttributeCollection"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>コンポーネントのこのインスタンスのクラス名を返します。</summary>
            <returns>オブジェクトのクラス名、またはクラスに名前がない場合は null。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>コンポーネントのこのインスタンスの名前を返します。</summary>
            <returns>オブジェクトの名前、またはオブジェクトに名前がない場合は null。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>コンポーネントのこのインスタンスのタイプ コンバーターを返します。</summary>
            <returns>このオブジェクトのコンバーターである <see cref="T:System.ComponentModel.TypeConverter"/>、または、このオブジェクトに <see cref="T:System.ComponentModel.TypeConverter"/> がない場合は null。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>コンポーネントのこのインスタンスの既定イベントを返します。</summary>
            <returns>このオブジェクトの既定イベントを表す <see cref="T:System.ComponentModel.EventDescriptor"/>、または、このオブジェクトにイベントがない場合は null。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>コンポーネントのこのインスタンスの既定プロパティを返します。</summary>
            <returns>このオブジェクトの既定プロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor"/>、または、このオブジェクトにプロパティがない場合は null。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>コンポーネントのこのインスタンスに対して指定されたタイプのエディタを返します。</summary>
            <param name="editorBaseType">このオブジェクトのエディターを表す <see cref="T:System.Type"/>。</param>
            <returns>このオブジェクトのエディターである指定されたタイプの <see cref="T:System.Object"/>、またはエディターが見つからない場合は null。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>指定された属性配列をフィルターとして使用するコンポーネントのこのインスタンスのイベントを返します。</summary>
            <param name="attributes">フィルターとして使用されるタイプ <see cref="T:System.Attribute"/> の配列。</param>
            <returns>このコンポーネントのインスタンスでフィルター処理されたイベントを表す <see cref="T:System.ComponentModel.EventDescriptorCollection"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>コンポーネントのこのインスタンスのイベントを返します。</summary>
            <returns>このコンポーネントのインスタンスのイベントを表す <see cref="T:System.ComponentModel.EventDescriptorCollection"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>指定されたプロパティ記述子によって説明されたプロパティを含むオブジェクトを返します。</summary>
            <param name="pd">所有者を見つけるプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor"/>。</param>
            <returns>指定されたプロパティの所有者を表す <see cref="T:System.Object"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>このオブジェクトに対して実行されたバインディング操作を担当する <see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。</summary>
            <param name="parameter">ランタイム値の式ツリー表現。</param>
            <returns>このオブジェクトをバインドする <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonMergeSettings">
            <summary>JSON のマージ時に使用される設定を指定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>JSON 配列のマージ時に使用されるメソッドを取得または設定します。</summary>
            <value>JSON 配列のマージ時に使用されるメソッド。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
            <summary>null 値のプロパティのマージ方法を取得または設定します。</summary>
            <value>null 値プロパティのマージ方法。</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JProperty">
            <summary>JSON プロパティを表します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>コンテナーの子トークンを取得します。</summary>
            <value>コンテナーの子トークン。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
            <summary>プロパティ名を取得します。</summary>
            <value>プロパティ名。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
            <summary>プロパティ値を取得または設定します。</summary>
            <value>プロパティ値。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JProperty"/> クラスの新しいインスタンスを別の <see cref="T:Newtonsoft.Json.Linq.JProperty"/> オブジェクトから初期化します。</summary>
            <param name="other">コピー元の <see cref="T:Newtonsoft.Json.Linq.JProperty"/> オブジェクト。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
            <summary>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> のノード タイプを取得します。</summary>
            <value>タイプ。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary><see cref="T:Newtonsoft.Json.Linq.JProperty"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">プロパティ名。</param>
            <param name="content">プロパティのコンテンツ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JProperty"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">プロパティ名。</param>
            <param name="content">プロパティのコンテンツ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>このトークンを <see cref="T:Newtonsoft.Json.JsonWriter"/> に書き込みます。</summary>
            <param name="writer">このメソッドを書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">トークンを書き込む際に使用される <see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクション。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JProperty"/> を <see cref="T:Newtonsoft.Json.JsonReader"/> から読み込みます。</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JProperty"/> のコンテンツ向けに読み取られる <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> から読み取られた JSON を含む <see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JProperty"/> を <see cref="T:Newtonsoft.Json.JsonReader"/> から読み込みます。</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JProperty"/> のコンテンツ向けに読み取られる <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="settings">JSON を読み込むために使用される <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。これが null の場合は、既定の読み込み設定が使用されます。</param>
            <returns>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> から読み取られた JSON を含む <see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
            <summary><see cref="T:Newtonsoft.Json.Linq.JProperty"/> のビューを表します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">名前。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>派生クラスでオーバーライドされた場合、オブジェクトをリセットすると値が変更されるかどうかを返します。</summary>
            <returns>コンポーネントをリセットすると値が変更される場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </returns>
            <param name="component">リセット機能をテストするコンポーネント。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>派生クラスでオーバーライドすると、コンポーネントのプロパティの現在の値を取得します。</summary>
            <returns>特定のコンポーネントのプロパティの値。</returns>
            <param name="component">値を取得するプロパティを持つコンポーネント。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>派生クラスでオーバーライドする場合は、コンポーネントのこのプロパティの値を既定値にリセットします。</summary>
            <param name="component">既定値にリセットされるプロパティ値のあるコンポーネント。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>派生クラスでオーバーライドする場合は、コンポーネントの値を別の値に設定します。</summary>
            <param name="component">設定するプロパティ値のあるコンポーネント。</param><param name="value">新しい値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>派生クラスでオーバーライドする場合は、このプロパティの値を永続化する必要があるかどうかを示す値を決定します。</summary>
            <returns>プロパティを永続化する必要がある場合は <c>true</c>、それ以外の場合は <c>false</c>。  </returns>
            <param name="component">永続性を調べるプロパティのあるコンポーネント。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>派生クラスでオーバーライドする場合は、このプロパティがバインドされているコンポーネントのタイプを取得します。</summary>
            <returns>このプロパティがバインドされているコンポーネントのタイプを表す <see cref="T:System.Type"/>。<see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> または <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> メソッドが呼び出されると、指定されたオブジェクトがこのタイプのインスタンスである可能性があります。 </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>派生クラスでオーバーライドする場合は、このプロパティが読み取り専用かどうかを示す値を取得します。</summary>
            <returns>プロパティが読み取り専用の場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>派生クラスでオーバーライドする場合は、プロパティのタイプを取得します。</summary>
            <returns>プロパティのタイプを表す <see cref="T:System.Type"/>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>メンバーの名前のハッシュ コードを取得します。</summary>
            <value></value>
            <returns>メンバーの名前のハッシュ コード。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JRaw">
            <summary>生 JSON 文字列を表します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JRaw"/> クラスの新しいインスタンスを別の <see cref="T:Newtonsoft.Json.Linq.JRaw"/> オブジェクトから初期化します。</summary>
            <param name="other">コピー元の <see cref="T:Newtonsoft.Json.Linq.JRaw"/> オブジェクト。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JRaw"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="rawJson">生の JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
            <summary>閲覧者の現在のトークンのコンテンツを含む <see cref="T:Newtonsoft.Json.Linq.JRaw"/> のインスタンスを作成します。</summary>
            <param name="reader">閲覧者。</param>
            <returns>閲覧者の現在のトークンのコンテンツを含む  <see cref="T:Newtonsoft.Json.Linq.JRaw"/> のインスタンス。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JToken">
            <summary>抽象 JSON トークンを表します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>値の等価性について 2 つのトークンを比較できる比較関数を取得します。</summary>
            <value>値の等価性について 2 つのノードを比較できる <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
            <summary>親を取得または設定します。</summary>
            <value>親。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Root">
            <summary>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> のルート <see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得します。 </summary>
            <value>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> のルート <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Type">
            <summary>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> のノード タイプを取得します。</summary>
            <value>タイプ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>このトークンに子トークンがあるかどうかを示す値を取得します。</summary>
            <value>このトークンに子値がある場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>すべての子孫トークンの値を含む 2 つのトークンの値を比較します。</summary>
            <param name="t1">比較する最初の <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="t2">比較する 2 番目の <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <returns>トークンが等しい場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Next">
            <summary>このノードの次の兄弟トークンを取得します。</summary>
            <value>次の兄弟トークンを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
            <summary>このノードの前の兄弟トークンを取得します。</summary>
            <value>前の兄弟トークンを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Path">
            <summary>JSON トークンのパスを取得します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>このトークンの直後に指定したコンテンツを追加します。</summary>
            <param name="content">単純なコンテンツを含むコンテンツ オブジェクト、またはこのトークンの後に追加するコンテンツ オブジェクトのコレクション。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>このトークンの直前に指定したコンテンツを追加します。</summary>
            <param name="content">単純なコンテンツを含むコンテンツ オブジェクト、またはこのトークンの前に追加するコンテンツ オブジェクトのコレクション。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>このトークンの祖先トークンのコレクションを返します。</summary>
            <returns>このトークンの祖先トークンのコレクション。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AncestorsAndSelf">
            <summary>このトークンを含むトークンのコレクションと、このトークンの祖先を返します。</summary>
            <returns>このトークンを含むトークンのコレクションと、このトークンの祖先。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>このトークンの後にドキュメントの順序で兄弟トークンのコレクションを返します。</summary>
            <returns>ドキュメント順でこのトークンの後の兄弟トークンのコレクション。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>このトークンの前の兄弟トークンのコレクションをドキュメント順に返します。</summary>
            <returns>ドキュメント順でこのトークンの前の兄弟トークンのコレクション。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>指定されたキーのある <see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得します。</summary>
            <value>指定されたキーのある <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>指定されたキーが指定されたタイプに変換された <see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得します。</summary>
            <typeparam name="T">トークンを変換するタイプ。</typeparam>
            <param name="key">トークン キー。</param>
            <returns>変換されたトークン値。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.First">
            <summary>このトークンの最初の子トークンを取得します。</summary>
            <value><see cref="T:Newtonsoft.Json.Linq.JToken"/> の最初の子トークンを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> 。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Last">
            <summary>このトークンの最後の子トークンを取得します。</summary>
            <value><see cref="T:Newtonsoft.Json.Linq.JToken"/> の最後の子トークンを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children">
            <summary>このトークンの子トークンのコレクションをドキュメント順に返します。</summary>
            <returns>ドキュメント順に、この<see cref="T:Newtonsoft.Json.Linq.JToken"/> の子トークンを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>  。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>指定されたタイプでフィルター処理された、このトークンの子トークンのコレクションをドキュメント順に返します。</summary>
            <typeparam name="T">子トークンをフィルター処理するタイプ。</typeparam>
            <returns>ドキュメント順にこの <see cref="T:Newtonsoft.Json.Linq.JToken"/> の子トークンを含む <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>このトークンの子値のコレクションをドキュメント順に返します。</summary>
            <typeparam name="T">値を変換するタイプ。</typeparam>
            <returns>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> の子値をドキュメント順で含む <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
            <summary>このトークンを親から削除します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
            <summary>このトークンを指定されたトークンに置き換えます。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>このトークンを <see cref="T:Newtonsoft.Json.JsonWriter"/> に書き込みます。</summary>
            <param name="writer">このメソッドを書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">トークンを書き込む際に使用される <see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクション。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
            <summary>このトークンのインデントされた JSON を返します。</summary>
            <returns>このトークンのインデントされた JSON。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>指定された書式設定とコンバーターを使用して、このトークンの JSON を返します。</summary>
            <param name="formatting">出力の書式設定方法を示します。</param>
            <param name="converters">トークンを書き込む際に使用される <see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクション。</param>
            <returns>指定された書式設定とコンバーターを使用した、このトークンの JSON。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Boolean"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.DateTimeOffset"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Int64"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Int32"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Int16"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.UInt16"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Char"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Byte"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.SByte"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.DateTime"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Decimal"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Nullable`1"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Double"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Single"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.String"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.UInt32"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.UInt64"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Byte"/>[] への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Guid"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Guid"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.TimeSpan"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.TimeSpan"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から <see cref="T:System.Uri"/> への明示的な変換を実行します。</summary>
            <param name="value">値。</param>
            <returns>変換の結果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Boolean"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.DateTimeOffset"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Byte"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.SByte"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Int16"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.UInt16"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Int32"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.DateTime"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Decimal"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Double"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Single"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.String"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.UInt32"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.UInt64"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Byte"/>[] から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Uri"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.TimeSpan"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Guid"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/> から <see cref="T:Newtonsoft.Json.Linq.JToken"/> への暗黙的な変換を実行します。</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>の作成元になる値。</param>
            <returns>指定された値で初期化された <see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>このトークンの <see cref="T:Newtonsoft.Json.JsonReader"/> を作成します。</summary>
            <returns>このトークンとその子孫の読み取りに使用できる <see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>オブジェクトから <see cref="T:Newtonsoft.Json.Linq.JToken"/> を作成します。</summary>
            <param name="o"><see cref="T:Newtonsoft.Json.Linq.JToken"/> を作成するために使用されるオブジェクト。</param>
            <returns>指定されたオブジェクトの値がある <see cref="T:Newtonsoft.Json.Linq.JToken"/></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>指定された <see cref="T:Newtonsoft.Json.JsonSerializer"/> を使用してオブジェクトから <see cref="T:Newtonsoft.Json.Linq.JToken"/> を作成します。 </summary>
            <param name="o"><see cref="T:Newtonsoft.Json.Linq.JToken"/> を作成するために使用されるオブジェクト。</param>
            <param name="jsonSerializer">オブジェクトの読み取り時に使用される <see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>指定されたオブジェクトの値がある <see cref="T:Newtonsoft.Json.Linq.JToken"/></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から指定された .NET タイプを作成します。</summary>
            <typeparam name="T">トークンが逆シリアル化されるオブジェクトのタイプ。</typeparam>
            <returns>JSON 値から作成された新しいオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> から指定された .NET タイプを作成します。</summary>
            <param name="objectType">トークンが逆シリアル化されるオブジェクトのタイプ。</param>
            <returns>JSON 値から作成された新しいオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
            <summary>指定された <see cref="T:Newtonsoft.Json.JsonSerializer"/> を使用して、指定された .NET タイプを <see cref="T:Newtonsoft.Json.Linq.JToken"/> から作成します。</summary>
            <typeparam name="T">トークンが逆シリアル化されるオブジェクトのタイプ。</typeparam>
            <param name="jsonSerializer">オブジェクトの作成時に使用される <see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>JSON 値から作成された新しいオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>指定された <see cref="T:Newtonsoft.Json.JsonSerializer"/> を使用して、指定された .NET タイプを <see cref="T:Newtonsoft.Json.Linq.JToken"/> から作成します。</summary>
            <param name="objectType">トークンが逆シリアル化されるオブジェクトのタイプ。</param>
            <param name="jsonSerializer">オブジェクトの作成時に使用される <see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>JSON 値から作成された新しいオブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> を <see cref="T:Newtonsoft.Json.JsonReader"/> から作成します。 </summary>
            <param name="reader">この <see cref="T:Newtonsoft.Json.Linq.JToken"/> を読み込むためにトークンに配置されている <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>リーダーから読み取られたトークンとその子孫トークンを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/>。トークンのランタイムのタイプは、リーダーで検出された最初のトークンのトークン タイプで決まります。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> を <see cref="T:Newtonsoft.Json.JsonReader"/> から作成します。</summary>
            <param name="reader">この <see cref="T:Newtonsoft.Json.Linq.JToken"/> を読み込むためにトークンに配置されている <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="settings">JSON を読み込むために使用される <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。これが null の場合は、既定の読み込み設定が使用されます。</param>
            <returns>リーダーから読み取られたトークンとその子孫トークンを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/>。トークンのランタイムのタイプは、リーダーで検出された最初のトークンのトークン タイプで決まります。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>JSON を含む文字列から <see cref="T:Newtonsoft.Json.Linq.JToken"/> を読み込みます。</summary>
            <param name="json">JSON を含む <see cref="T:System.String"/>。</param>
            <returns>JSON を含む文字列から設定される <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>JSON を含む文字列から <see cref="T:Newtonsoft.Json.Linq.JToken"/> を読み込みます。</summary>
            <param name="json">JSON を含む <see cref="T:System.String"/>。</param>
            <param name="settings">JSON を読み込むために使用される <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。これが null の場合は、既定の読み込み設定が使用されます。</param>
            <returns>JSON を含む文字列から設定される <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> を <see cref="T:Newtonsoft.Json.JsonReader"/> から作成します。</summary>
            <param name="reader">この <see cref="T:Newtonsoft.Json.Linq.JToken"/> を読み込むためにトークンに配置されている <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="settings">JSON を読み込むために使用される <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>。これが null の場合は、既定の読み込み設定が使用されます。</param>
            <returns>リーダーから読み取られたトークンとその子孫トークンを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/>。トークンのランタイムのタイプは、リーダーで検出された最初のトークンのトークン タイプで決まります。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> を <see cref="T:Newtonsoft.Json.JsonReader"/> から作成します。</summary>
            <param name="reader">この <see cref="T:Newtonsoft.Json.Linq.JToken"/> を読み込むためにトークンに配置されている <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>リーダーから読み取られたトークンとその子孫トークンを含む <see cref="T:Newtonsoft.Json.Linq.JToken"/>。トークンのランタイムのタイプは、リーダーで検出された最初のトークンのトークン タイプで決まります。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>JPath 式を使用して <see cref="T:Newtonsoft.Json.Linq.JToken"/>を選択します。オブジェクト パスに一致するトークンを選択します。</summary>
            <param name="path">JPath 式を含む <see cref="T:System.String"/>。</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.JToken"/> または null。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>JPath 式を使用して <see cref="T:Newtonsoft.Json.Linq.JToken"/>を選択します。オブジェクト パスに一致するトークンを選択します。</summary>
            <param name="path">JPath 式を含む <see cref="T:System.String"/>。</param>
            <param name="errorWhenNoMatch">式の一部を評価した際にトークンが見つからない場合にエラーをスローするかどうかを示すフラグ。</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>JPath 式を使用して要素のコレクションを選択します。</summary>
            <param name="path">JPath 式を含む <see cref="T:System.String"/>。</param>
            <returns>選択された要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>JPath 式を使用して要素のコレクションを選択します。</summary>
            <param name="path">JPath 式を含む <see cref="T:System.String"/>。</param>
            <param name="errorWhenNoMatch">式の一部を評価した際にトークンが見つからない場合にエラーをスローするかどうかを示すフラグ。</param>
            <returns>選択された要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>このオブジェクトに対して実行されたバインディング操作を担当する <see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。</summary>
            <param name="parameter">ランタイム値の式ツリー表現。</param>
            <returns>このオブジェクトをバインドする <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>このオブジェクトに対して実行されたバインディング操作を担当する <see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。</summary>
            <param name="parameter">ランタイム値の式ツリー表現。</param>
            <returns>このオブジェクトをバインドする <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> の新しいインスタンスを作成します。すべての子トークンは再帰的にクローンされます。</summary>
            <returns><see cref="T:Newtonsoft.Json.Linq.JToken"/> の新しいインスタンス。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAnnotation(System.Object)">
            <summary>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> の注釈リストにオブジェクトを追加します。</summary>
            <param name="annotation">追加する注釈。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation``1">
            <summary>指定されたタイプの最初の注釈オブジェクトをこの <see cref="T:Newtonsoft.Json.Linq.JToken"/> から取得します。</summary>
            <typeparam name="T">取得する注釈の型。</typeparam>
            <returns>指定されたタイプに一致する最初の注釈オブジェクト、または指定されたタイプの注釈がない場合は <c>null</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation(System.Type)">
            <summary>指定されたタイプの最初の注釈オブジェクトをこの <see cref="T:Newtonsoft.Json.Linq.JToken"/> から取得します。</summary>
            <param name="type">取得する注釈の <see cref="P:Newtonsoft.Json.Linq.JToken.Type"/>。</param>
            <returns>指定されたタイプに一致する最初の注釈オブジェクト、または指定されたタイプの注釈がない場合は <c>null</c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations``1">
            <summary>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> で指定されたタイプの注釈のコレクションを取得します。</summary>
            <typeparam name="T">取得する注釈のタイプ。</typeparam>
            <returns>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> の注釈を含む <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations(System.Type)">
            <summary>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> で指定されたタイプの注釈のコレクションを取得します。</summary>
            <param name="type">取得する注釈の <see cref="P:Newtonsoft.Json.Linq.JToken.Type"/>。</param>
            <returns>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> 向けに指定されたタイプが一致する注釈を含む <see cref="T:System.Object"/> の <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations``1">
            <summary>指定されたタイプの注釈を <see cref="T:Newtonsoft.Json.Linq.JToken"/> から削除します。</summary>
            <typeparam name="T">削除する注釈のタイプ。</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>指定されたタイプの注釈を <see cref="T:Newtonsoft.Json.Linq.JToken"/> から削除します。</summary>
            <param name="type">削除する注釈の <see cref="P:Newtonsoft.Json.Linq.JToken.Type"/>。</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>トークンを比較して、それらが等しいかどうかを判断します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>指定されたオブジェクトが等しいかどうかを判定します。</summary>
            <param name="x">比較する <see cref="T:Newtonsoft.Json.Linq.JToken"/> タイプの最初のオブジェクト。</param>
            <param name="y">比較する <see cref="T:Newtonsoft.Json.Linq.JToken"/> タイプの 2 番目のオブジェクト。</param>
            <returns>指定されたオブジェクトが等しい場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
            <summary>指定されたオブジェクトのハッシュ コードを返します。</summary>
            <param name="obj">ハッシュ コードを返す <see cref="T:System.Object"/>。</param>
            <returns>指定されたオブジェクトのハッシュ コード。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> のタイプは参照型で、<paramref name="obj"/> は null です。 </exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenReader">
            <summary>シリアル化された JSON データへのキャッシュされていない転送専用の高速アクセスを提供する閲覧者を表します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.CurrentToken">
            <summary>閲覧者の現在の位置で <see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JTokenReader"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="token">読み取り元のトークン。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>ストリームから次の JSON トークンを読み取ります。</summary>
            <returns>次のトークンが正常に読み取られた場合は <c>true</c>、読み取るトークンがこれ以上ない場合は <c>false</c> です。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.Path">
            <summary>現在の JSON トークンのパスを取得します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenType">
            <summary>トークンのタイプを指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
            <summary>トークンのタイプが設定されていません。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>JSON オブジェクト。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>JSON 配列。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>JSON コンストラクター。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>JSON オブジェクト プロパティ。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>コメント。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>整数値。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>浮動小数点値。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
            <summary>文字列値。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>ブール値。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>null 値。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>未定義の値。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>日付値。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>生 JSON 値。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>バイト値のコレクション。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>GUID 値。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>URI 値。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>TimeSpan 値。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
            <summary>JSON データを生成する、高速でキャッシュされていない転送専用の方法を提供するライターを表します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.CurrentToken">
            <summary>ライターの現在の位置で <see cref="T:Newtonsoft.Json.Linq.JToken"/> を取得します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>書き込まれるトークンを取得します。</summary>
            <value>書き込まれるトークン。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
            <summary>指定された<see cref="T:Newtonsoft.Json.Linq.JContainer"/> に書き込む <see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/> の新しいインスタンスを初期化します。</summary>
            <param name="container">書き込まれるコンテナー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>バッファー内のものをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>このストリームと基になるストリームを閉じます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>JSON オブジェクトの先頭を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>JSON 配列の先頭を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>特定の名前でコンストラクターの開始を書き込みます。</summary>
            <param name="name">コンストラクターの名前。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>終了を書き込みます。</summary>
            <param name="token">トークン。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>JSON オブジェクトに名前と値のペアのプロパティ名を書き込みます。</summary>
            <param name="name">プロパティの名前。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary><see cref="T:System.Object"/> 値を書き込みます。値を単一の JSON トークンとして書き込むことができない場合は、エラーが発生します。</summary>
            <param name="value">書き込む <see cref="T:System.Object"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>null 値を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>未定義の値を書き込みます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>生の JSON を書き込みます。</summary>
            <param name="json">書き込む生 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>指定されたテキストをすくむコメント <code>/*...*/ </code>を書き出します。</summary>
            <param name="text">コメント内に配置するテキスト。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary><see cref="T:System.String"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.String"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary><see cref="T:System.Int32"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Int32"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary><see cref="T:System.UInt32"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.UInt32"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary><see cref="T:System.Int64"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Int64"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary><see cref="T:System.UInt64"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.UInt64"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary><see cref="T:System.Single"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Single"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary><see cref="T:System.Double"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Double"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary><see cref="T:System.Boolean"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Boolean"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary><see cref="T:System.Int16"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Int16"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary><see cref="T:System.UInt16"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.UInt16"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary><see cref="T:System.Char"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Char"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary><see cref="T:System.Byte"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Byte"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary><see cref="T:System.SByte"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.SByte"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary><see cref="T:System.Decimal"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Decimal"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary><see cref="T:System.DateTime"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.DateTime"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary><see cref="T:System.DateTimeOffset"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.DateTimeOffset"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary><see cref="T:System.Byte"/>[] 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Byte"/>[] 値</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary><see cref="T:System.TimeSpan"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.TimeSpan"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary><see cref="T:System.Guid"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Guid"/> 値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary><see cref="T:System.Uri"/> 値を書き込みます。</summary>
            <param name="value">書き込む <see cref="T:System.Uri"/> 値。</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JValue">
            <summary>JSON の値 (文字列、整数、日付など) を表します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを別の <see cref="T:Newtonsoft.Json.Linq.JValue"/> オブジェクトから初期化します。</summary>
            <param name="other">コピー元の <see cref="T:Newtonsoft.Json.Linq.JValue"/> オブジェクト。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>特定の値で <see cref="T:Newtonsoft.Json.Linq.JValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">値。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>このトークンに子トークンがあるかどうかを示す値を取得します。</summary>
            <value>このトークンに子値がある場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>特定の値のある <see cref="T:Newtonsoft.Json.Linq.JValue"/> コメントを作成します。</summary>
            <param name="value">値。</param>
            <returns>特定の値のある <see cref="T:Newtonsoft.Json.Linq.JValue"/> コメント。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>特定の値のある <see cref="T:Newtonsoft.Json.Linq.JValue"/> 文字列を作成します。</summary>
            <param name="value">値。</param>
            <returns>特定の値のある <see cref="T:Newtonsoft.Json.Linq.JValue"/> 文字列。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateNull">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/> null 値を作成します。</summary>
            <returns><see cref="T:Newtonsoft.Json.Linq.JValue"/>null 値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateUndefined">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>未定義の値を作成します。</summary>
            <returns><see cref="T:Newtonsoft.Json.Linq.JValue"/>未定義の値。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Type">
            <summary>この <see cref="T:Newtonsoft.Json.Linq.JToken"/> のノード タイプを取得します。</summary>
            <value>タイプ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Value">
            <summary>基になるトークン値を取得または設定します。</summary>
            <value>基になるトークン値。</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>このトークンを <see cref="T:Newtonsoft.Json.JsonWriter"/> に書き込みます。</summary>
            <param name="writer">このメソッドを書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">トークンを書き込む際に使用される <see cref="T:Newtonsoft.Json.JsonConverter"/> のコレクション。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
            <summary>現在のオブジェクトが同じタイプの別のオブジェクトと等しいかどうかを示します。</summary>
            <returns>現在のオブジェクトが <paramref name="other"/> に等しい場合は <c>true</c>、それ以外の場合は <c>false</c> です。   </returns>
            <param name="other">このオブジェクトと比較するオブジェクト。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>指定された <see cref="T:System.Object"/> が現在の <see cref="T:System.Object"/> に等しいかどうかを判定します。 </summary>
            <param name="obj">現在の <see cref="T:System.Object"/> と比較する <see cref="T:System.Object"/>。</param>
            <returns><see cref="T:System.Object"/> が現在の <see cref="T:System.Object"/> と等しい場合は <c>true</c>、それ以外の場合は <c>false</c> です。    </returns>
            <exception cref="T:System.NullReferenceException"><paramref name="obj"/> パラメーターは null です。</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>特定のタイプのハッシュ関数として機能します。</summary>
            <returns>現在の <see cref="T:System.Object"/> のハッシュ コード。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
            <summary>このインスタンスを表す <see cref="T:System.String"/> を返します。</summary>
            <returns>このインスタンスを表す <see cref="T:System.String"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>このインスタンスを表す <see cref="T:System.String"/> を返します。</summary>
            <param name="format">形式。</param>
            <returns>このインスタンスを表す <see cref="T:System.String"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>このインスタンスを表す <see cref="T:System.String"/> を返します。</summary>
            <param name="formatProvider">形式プロバイダー。</param>
            <returns>このインスタンスを表す <see cref="T:System.String"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>このインスタンスを表す <see cref="T:System.String"/> を返します。</summary>
            <param name="format">形式。</param>
            <param name="formatProvider">形式プロバイダー。</param>
            <returns>このインスタンスを表す <see cref="T:System.String"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>このオブジェクトに対して実行されたバインディング操作を担当する <see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。</summary>
            <param name="parameter">ランタイム値の式ツリー表現。</param>
            <returns>このオブジェクトをバインドする <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
            <summary>現在のインスタンスを同じタイプの別のオブジェクトと比較し、現在のインスタンスが他のオブジェクトと同じ順序で先行するか、後に続くか、または同じ位置で発生するかを示す整数を返します。</summary>
            <param name="obj">このインスタンスと比較するオブジェクト。</param>
            <returns>比較されるオブジェクトの相対的な順序を示す 32 ビット符号付き整数。戻り値には、次の意味があります。値はゼロより小さい: このインスタンスは <paramref name="obj"/> 未満です。ゼロ: このインスタンスは <paramref name="obj"/> に等しくなります。ゼロより大きい: このインスタンスは <paramref name="obj"/> を超えています。</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> は、このインスタンスと同じタイプではありません。</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonLoadSettings">
            <summary>JSON の読み込み時に使用する設定を指定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.CommentHandling">
            <summary>JSON の読み込み時に JSON コメントを処理する方法を取得または設定します。</summary>
            <value>JSON コメント処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.LineInfoHandling">
            <summary>JSON の読み込み時に JSON 行情報を処理する方法を取得または設定します。</summary>
            <value>JSON 行情報の処理。</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeArrayHandling">
            <summary>JSON 配列をマージする方法を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Concat">
            <summary>配列を連結します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Union">
            <summary>既に存在する項目をスキップする結合配列。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Replace">
            <summary>すべての配列項目を置き換えます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Merge">
            <summary>インデックスで照合して配列項目をマージします。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeNullValueHandling">
            <summary>null 値のプロパティをマージする方法を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Ignore">
            <summary>コンテンツの null 値のプロパティは、マージ中に無視されます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Merge">
            <summary>コンテンツの null 値のプロパティがマージされます。</summary>
        </member>
        <member name="T:Newtonsoft.Json.MemberSerialization">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> のメンバー シリアル化オプションを指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>すべてのパブリック メンバーは既定でシリアル化されます。メンバーは、<see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/> または <see cref="T:System.NonSerializedAttribute"/> を使用して除外できます。これは、既定のメンバー シリアル化モードです。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
            <summary><see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> または <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> でマークされたメンバーのみがシリアル化されます。  このメンバー シリアル化モードは、<see cref="T:System.Runtime.Serialization.DataContractAttribute"/> でクラスをマークして設定することもできます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
            <summary>すべてのパブリック フィールドとプライベート フィールドがシリアル化されます。メンバーは、<see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/> または <see cref="T:System.NonSerializedAttribute"/> を使用して除外できます。このメンバー シリアル化モードは、<see cref="T:System.SerializableAttribute"/> でクラスにマークを付け、<see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> で IgnoreSerializableAttribute を false に設定して、設定することもできます。</summary>
        </member>
        <member name="T:Newtonsoft.Json.MetadataPropertyHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> のメタデータ プロパティ処理オプションを指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Default">
            <summary>JSON オブジェクトの先頭にあるメタデータ プロパティを読み取ります。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
            <summary>JSON オブジェクト内の任意の場所にあるメタデータ プロパティを読み取ります。この設定はパフォーマンスに影響を与えます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Ignore">
            <summary>メタデータ プロパティを読み取ろうとしないでください。</summary>
        </member>
        <member name="T:Newtonsoft.Json.MissingMemberHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> で欠落しているメンバー処理オプションを指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>欠落しているメンバーを無視し、逆シリアル化を試みないようにします。</summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>逆シリアル化中に欠落しているメンバが見つからない場合に <see cref="T:Newtonsoft.Json.JsonSerializationException"/> をスローします。</summary>
        </member>
        <member name="T:Newtonsoft.Json.NullValueHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> の null 値処理オプションを指定します。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" /> <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" /></example>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Include">
            <summary>オブジェクトのシリアル化と逆シリアル化の際に null 値を含めます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>オブジェクトのシリアル化と逆シリアル化の際に null 値を無視します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.ObjectCreationHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> によってオブジェクトの作成を処理する方法を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>既存のオブジェクトを再利用し、必要に応じて新しいオブジェクトを作成します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>既存のオブジェクトのみを再利用します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>常に新しいオブジェクトを作成します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> の参照処理オプションを指定します。ISerializable を実装するタイプなど、既定以外のコンストラクターを使用して値を設定すると、参照を保持できないことに注意してください。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" /></example>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>タイプをシリアル化する場合は参照を保持しないでください。</summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>JSON オブジェクト構造にシリアル化する際に参照を保持します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>JSON 配列構造にシリアル化する際に参照を保持します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>シリアル化の際に参照を保持します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> の参照ループ処理オプションを指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>ループが発生したときに <see cref="T:Newtonsoft.Json.JsonSerializationException"/> をスローします。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>ループ参照を無視し、シリアル化しないでください。</summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>ループ参照をシリアル化します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Required">
            <summary>プロパティが必要かどうかを示します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Default">
            <summary>プロパティは必須ではありません。既定の状態。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.AllowNull">
            <summary>プロパティは JSON で定義する必要がありますが、null 値にすることができます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Always">
            <summary>プロパティは JSON で定義する必要があり、null 値にすることはできません。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.DisallowNull">
            <summary>このプロパティは必須ではありませんが、null 値にすることはできません。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Extensions">
            <summary>
            <para>JSON スキーマ拡張メソッドが含まれています。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Linq.JToken"/> が有効かどうかを判定します。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
            <param name="source">テストするソース <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="schema">テストに使用するスキーマ。</param>
            <returns>指定された <see cref="T:Newtonsoft.Json.Linq.JToken"/> が有効な場合は <c>true</c>、それ以外の場合は <c>false</c> です。   </returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Linq.JToken"/> が有効かどうかを判定します。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
            <param name="source">テストするソース <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="schema">テストに使用するスキーマ。</param>
            <param name="errorMessages">このメソッドが返されると、検証中に生成されたエラー メッセージが含まれます。</param>
            <returns>指定された <see cref="T:Newtonsoft.Json.Linq.JToken"/> が有効な場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>指定された <see cref="T:Newtonsoft.Json.Linq.JToken"/> を検証します。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
            <param name="source">テストするソース <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="schema">テストに使用するスキーマ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
            <para>指定された <see cref="T:Newtonsoft.Json.Linq.JToken"/> を検証します。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
            <param name="source">テストするソース <see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="schema">テストに使用するスキーマ。</param>
            <param name="validationEventHandler">検証イベント ハンドラー。</param>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchema">
            <summary>
            <para>JSON スキーマのメモリ内表現。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>ID を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>タイトルを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>オブジェクトが必要かどうかを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>オブジェクトが読み取り専用であるかどうかを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>オブジェクトをユーザーに表示するかどうかを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>オブジェクトが一時的であるかどうかを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>オブジェクトの説明を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>オブジェクトで許可されている値のタイプを取得または設定します。</summary>
            <value>タイプ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>パターンを取得または設定します。</summary>
            <value>パターン。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>最小長を取得または設定します。</summary>
            <value>最小長。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>最大長を取得または設定します。</summary>
            <value>最大長。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>値を除算する数値を取得または設定します。</summary>
            <value>値を除算する数値。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>最小値を取得または設定します。</summary>
            <value>最小値。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>最大値を取得または設定します。</summary>
            <value>最大値。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>値が &quot;最小&quot; 属性で定義された数と等しくないかどうかを示すフラグを取得または設定します。</summary>
            <value>値が &quot;最小&quot; 属性で定義された数と等しくないかどうかを示すフラグ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>値が &quot;max&quot; 属性で定義された数と等しくないかどうかを示すフラグを取得または設定します。</summary>
            <value>値が &quot;max&quot; 属性で定義された数と等しくないかどうかを示すフラグ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>項目の最小数を取得または設定します。</summary>
            <value>項目の最小数。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>項目の最大数を取得または設定します。</summary>
            <value>項目の最大数。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>項目の <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を取得または設定します。</summary>
            <value>項目の <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> からの配列位置にある <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items"/> インスタンスを使用して配列内の項目を検証するかどうかを示す値を取得または設定します。</summary>
            <value>項目が配列位置を使用して検証される場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>追加項目の <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を取得または設定します。</summary>
            <value>追加項目の <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>追加項目を許可するかどうかを示す値を取得または設定します。</summary>
            <value>追加項目が許可されている場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>配列項目が一意でなくてはならないかどうかを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>プロパティの <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を取得または設定します。</summary>
            <value>プロパティの <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>追加プロパティの <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を取得または設定します。</summary>
            <value>追加プロパティの <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>パターン プロパティを取得または設定します。</summary>
            <value>パターン プロパティ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>追加プロパティを許可するかどうかを示す値を取得または設定します。</summary>
            <value>追加プロパティが許可されている場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>このプロパティが存在する場合は、必要なプロパティを取得または設定します。</summary>
            <value>このプロパティが存在する場合に必要なプロパティ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>許可されている列挙値のコレクションを取得または設定します。</summary>
            <value>許可されている有効な列挙値のコレクション。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>許可されていないタイプを取得または設定します。</summary>
            <value>許可されていないタイプ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>既定値を取得または設定します。</summary>
            <value>既定値。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>このスキーマが拡張する <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> のコレクションを取得または設定します。</summary>
            <value>このスキーマが拡張する <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> のコレクション。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>形式を取得または設定します。</summary>
            <value>形式。</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
            <summary>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> から <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を読み取ります。</summary>
            <param name="reader">読み取る JSON スキーマが含まれている <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>JSON スキーマを表す <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> オブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>指定された <see cref="T:Newtonsoft.Json.JsonReader"/> から <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を読み取ります。</summary>
            <param name="reader">読み取る JSON スキーマが含まれている <see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="resolver">スキーマ参照を解決するときに使用する <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>。</param>
            <returns>JSON スキーマを表す <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> オブジェクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>スキーマ JSON を含む文字列から <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を読み込みます。</summary>
            <param name="json">JSON を含む <see cref="T:System.String"/>。</param>
            <returns>JSON を含む文字列から設定される <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>指定された JSON を解析します。</summary>
            <param name="json">JSON。</param>
            <param name="resolver">リゾルバー。</param>
            <returns>JSON を含む文字列から設定される <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
            <summary>このスキーマを <see cref="T:Newtonsoft.Json.JsonWriter"/> に書き込 みます。</summary>
            <param name="writer">このメソッドを書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>指定された <see cref="T:Newtonsoft.Json.JsonWriter"/> を使用して、このスキーマを <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> に書き込みます。</summary>
            <param name="writer">このメソッドを書き込む <see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="resolver">使用されるリゾルバー。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>現在の <see cref="T:System.Object"/> を表す <see cref="T:System.String"/> を返します。</summary>
            <returns>現在の <see cref="T:System.Object"/> を表す <see cref="T:System.String"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
            <para>スキーマ例外に関する詳細な情報を返します。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>エラーが発生した場所を示す行番号を取得します。</summary>
            <value>エラーが発生した場所を示す行番号。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>エラーが発生した場所を示す行位置を取得します。</summary>
            <value>エラーが発生した場所を示す行位置。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>エラーが発生した JSON へのパスを取得します。</summary>
            <value>エラーが発生した JSON へのパス。</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>指定されたエラー メッセージを使用して、<see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の理由を説明するエラー メッセージ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>指定されたエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の理由を説明するエラー メッセージ。</param>
            <param name="innerException">現在の例外の原因である例外、または内部例外が指定されていない場合は null 参照 (Visual Basic では Nothing)。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary><see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">スローされる例外に関するシリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">ソースまたは宛先に関するコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> パラメーターは null です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">クラス名は null または <see cref="P:System.Exception.HResult"/> はゼロ (0) です。</exception>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
            <para>指定された <see cref="T:System.Type"/> から <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を生成します。 </para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>未定義のスキーマをシリアライザーが処理する方法を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>コントラクト リゾルバーを取得または設定します。</summary>
            <value>コントラクト リゾルバー。</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>指定されたタイプから <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を生成します。</summary>
            <param name="type"><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を生成する元のタイプ。</param>
            <returns>指定されたタイプから生成する <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>指定されたタイプから <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を生成します。</summary>
            <param name="type"><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を生成する元のタイプ。</param>
            <param name="resolver">スキーマ参照を解決するために使用する <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>。</param>
            <returns>指定されたタイプから生成する <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>指定されたタイプから <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を生成します。</summary>
            <param name="type"><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を生成する元のタイプ。</param>
            <param name="rootSchemaNullable">生成されたルート <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を Nullable にするかどうかを指定します。</param>
            <returns>指定されたタイプから生成する <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>指定されたタイプから <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を生成します。</summary>
            <param name="type"><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を生成する元のタイプ。</param>
            <param name="resolver">スキーマ参照を解決するために使用する <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>。</param>
            <param name="rootSchemaNullable">生成されたルート <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を Nullable にするかどうかを指定します。</param>
            <returns>指定されたタイプから生成する <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
            <para>ID から <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を解決します。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>読み込まれたスキーマを取得または設定します。</summary>
            <value>読み込まれたスキーマ。</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>指定された参照の <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> を取得します。</summary>
            <param name="reference">ID。</param>
            <returns>指定された参照の <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> で許可される値のタイプ。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>タイプが指定されていません。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>文字列のタイプ。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>浮動小数点のタイプ。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>整数のタイプ。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>ブール値のタイプ。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>オブジェクトのタイプ。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>配列のタイプ。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>Null のタイプ。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>任意のタイプ。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator"/> に対して未定義のスキーマ ID 処理オプションを指定します。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>スキーマ ID を推測しないでください。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>スキーマ ID として .NET タイプ名を使用します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>スキーマ ID としてアセンブリ修飾 .NET タイプ名を使用します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler"/> に関連する詳細情報を返します。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>検証エラーに関連付けられている <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> を取得します。</summary>
            <value>検証エラーに関連付けられている JsonSchemaException。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>検証エラーが発生した JSON ロケーションのパスを取得します。</summary>
            <value>検証エラーが発生した JSON ロケーションのパス。</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>検証エラーに対応するテキストの説明を取得します。</summary>
            <value>テキストの説明。</value>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
            <para>JSON スキーマ検証イベントと <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs"/> を処理するコールバック メソッドを表します。</para>
            <note type="caution">JSON スキーマの検証は、独自のパッケージに移動されました。詳細については、<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> を参照してください。</note>
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy">
            <summary>スネーク ケースの命名戦略。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="processDictionaryKeys">辞書キーを処理するかどうかを示すフラグ。</param>
            <param name="overrideSpecifiedNames">明示的に指定されたプロパティ名を処理するかどうかを示すフラグ (<see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> でカスタマイズされたプロパティ名など)。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>指定されたプロパティ名を解決します。</summary>
            <param name="name">解決するプロパティ名。</param>
            <returns>解決されたプロパティ名。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy">
            <summary>キャメル ケースの命名戦略。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="processDictionaryKeys">辞書キーを処理するかどうかを示すフラグ。</param>
            <param name="overrideSpecifiedNames">明示的に指定されたプロパティ名を処理するかどうかを示すフラグ (<see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> でカスタマイズされたプロパティ名など)。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>指定されたプロパティ名を解決します。</summary>
            <param name="name">解決するプロパティ名。</param>
            <returns>解決されたプロパティ名。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>タイプ、キャメル ケースのプロパティ名のメンバー マッピングを解決します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>特定の <see cref="T:System.Type"/> の <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/> を解決するために <see cref="T:Newtonsoft.Json.JsonSerializer"/> によって使用されます。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>動的コード生成を使用してメンバーが取得および設定されているかどうかを示す値を取得します。この値は、使用可能なランタイム アクセス許可によって決まります。</summary>
            <value>動的コード生成を使用する場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>既定のメンバー検索フラグを取得または設定します。</summary>
            <value>既定のメンバー検索フラグ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>コンパイラ生成メンバーをシリアル化するかどうかを示す値を取得または設定します。</summary>
            <value>シリアル化されたコンパイラがメンバーを生成した場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>タイプのシリアル化および逆シリアル化を行う際に <see cref="T:System.Runtime.Serialization.ISerializable"/> インターフェイスを無視するかどうかを示す値を取得または設定します。</summary>
            <value>タイプのシリアル化と逆シリアル化の際に <see cref="T:System.Runtime.Serialization.ISerializable"/> インターフェイスが無視される場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>タイプのシリアル化および逆シリアル化の際に <see cref="T:System.SerializableAttribute"/> 属性を無視するかどうかを示す値を取得または設定します。</summary>
            <value>タイプのシリアル化と逆シリアル化の際に <see cref="T:System.SerializableAttribute"/> 属性が無視される場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.NamingStrategy">
            <summary>プロパティ名と辞書キーのシリアル化方法を解決するために使用される命名戦略を取得または設定します。</summary>
            <value>プロパティ名と辞書キーのシリアル化方法を解決するために使用される命名戦略。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="shareCache"><c>true</c> に設定すると、<see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> は同じタイプの他のリゾルバーと共有するキャッシュを使用します。高価なリフレクションは 1 回だけ発生するため、キャッシュを共有すると、複数のリゾルバー インスタンスのパフォーマンスが大幅に向上します。リゾルバーのインスタンスが異なると、異なる結果が生成される場合、この設定によって予期しない動作が発生する可能性があります。false に設定した場合は、<see cref="T:Newtonsoft.Json.JsonSerializer"/> で <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> インスタンスを再利用することを強くお勧めします。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>特定のタイプのコントラクトを解決します。</summary>
            <param name="type">コントラクトを解決するタイプ。</param>
            <returns>特定のタイプのコントラクト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>タイプのシリアル化が可能なメンバーを取得します。</summary>
            <param name="objectType">シリアル化が可能なメンバーを取得するタイプ。</param>
            <returns>タイプのシリアル化が可能なメンバー。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/> を作成します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>コンストラクター パラメーターを作成します。</summary>
            <param name="constructor">プロパティを作成するコンストラクター。</param>
            <param name="memberProperties">タイプのメンバー プロパティ。</param>
            <returns>特定の <see cref="T:System.Reflection.ConstructorInfo"/> のプロパティ。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>特定の <see cref="T:System.Reflection.ParameterInfo"/> の <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> を作成 します。 </summary>
            <param name="matchingMemberProperty">一致するメンバー プロパティ。</param>
            <param name="parameterInfo">コンストラクター パラメーター。</param>
            <returns>特定の <see cref="T:System.Reflection.ParameterInfo"/> 向けに作成された <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>。 </returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>コントラクトの既定の <see cref="T:Newtonsoft.Json.JsonConverter" /> を解決します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>コントラクトの既定の <see cref="T:Newtonsoft.Json.JsonConverter" />。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/> を作成します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/> を作成します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> を作成します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/> を作成します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/> を作成します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/> を作成します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/> を作成します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>特定のタイプに対して作成されるコントラクトのタイプを決定します。</summary>
            <param name="objectType">オブジェクトのタイプ。</param>
            <returns>特定のタイプの <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>特定の <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/> のプロパティを作成します。</summary>
            <param name="type">プロパティを作成するタイプ。</param>/// <param name="memberSerialization">タイプのメンバー シリアル化モード。</param>
            <returns>特定の <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/> のプロパティ。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>メンバーから値を取得して設定するためにシリアライザーが使用する <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/> を作成します。</summary>
            <param name="member">メンバー。</param>
            <returns>メンバーから値を取得して設定するためにシリアライザーが使用する <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>特定の <see cref="T:System.Reflection.MemberInfo"/> の <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> を作成 します。</summary>
            <param name="memberSerialization">メンバーの親 <see cref="T:Newtonsoft.Json.MemberSerialization"/>。</param>
            <param name="member"><see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> を作成するためのメンバー。</param>
            <returns>特定の <see cref="T:System.Reflection.MemberInfo"/> 向けに作成された <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>プロパティの名前を解決します。</summary>
            <param name="propertyName">プロパティの名前。</param>
            <returns>プロパティの解決済み名前。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
            <summary>辞書キーを解決します。既定で <see cref="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)"/>は辞書キーの解決に使用されます。</summary>
            <param name="dictionaryKey">辞書のキー。</param>
            <returns>辞書の解決済みキー。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>プロパティの解決済みの名前を取得します。</summary>
            <param name="propertyName">プロパティの名前。</param>
            <returns>プロパティの名前。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultNamingStrategy">
            <summary>既定の命名戦略。プロパティ名と辞書キーは変更されません。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultNamingStrategy.ResolvePropertyName(System.String)">
            <summary>指定されたプロパティ名を解決します。</summary>
            <param name="name">解決するプロパティ名。</param>
            <returns>解決されたプロパティ名。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>タイプ名からクラスを解決して読み込むときに使用される既定のシリアル化バインダー。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>派生クラスでオーバーライドされる場合は、シリアル化されたオブジェクトをタイプにバインドします。</summary>
            <param name="assemblyName">シリアル化されたオブジェクトの <see cref="T:System.Reflection.Assembly"/> 名を指定します。</param>
            <param name="typeName">シリアル化されたオブジェクトの <see cref="T:System.Type"/> 名を指定します。</param>
            <returns>フォーマッタが新しいインスタンスを作成するオブジェクトのタイプ。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>派生クラスでオーバーライドされる場合は、シリアル化されたオブジェクトをタイプにバインドします。</summary>
            <param name="serializedType">フォーマッタが新しいインスタンスを作成するオブジェクトのタイプ。</param>
            <param name="assemblyName">シリアル化されたオブジェクトの <see cref="T:System.Reflection.Assembly"/> 名を指定します。</param>
            <param name="typeName">シリアル化されたオブジェクトの <see cref="T:System.Type"/> 名を指定します。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
            <summary>アプリケーションの <see cref="T:System.Diagnostics.TraceListener"/> インスタンスに書き込むトレース ライターを表します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
            <summary>ライターに渡されるトレース メッセージのフィルター処理に使用される <see cref="T:System.Diagnostics.TraceLevel"/> を取得します。たとえば、<code>Info</code> のフィルター レベルで <code>Verbose</code> メッセージを除外し、<code>Info</code>、<code>Warning</code>、<code>Error</code> メッセージを含めることができます。   </summary>
            <value>ライターに渡すトレース メッセージをフィルター処理するために使用される <see cref="T:System.Diagnostics.TraceLevel"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>指定されたトレース レベル、メッセージ、およびオプションの例外を書き込みます。</summary>
            <param name="level">このトレースを書き込む <see cref="T:System.Diagnostics.TraceLevel"/>。</param>
            <param name="message">トレース メッセージ。</param>
            <param name="ex">トレース例外。このパラメーターはオプションです。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
            <summary>動的メソッドを使用して <see cref="T:System.Reflection.MemberInfo"/> の値を取得して設定します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="memberInfo">メンバー情報。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>値を設定します。</summary>
            <param name="target">値を設定するターゲット。</param>
            <param name="value">ターゲットで設定する値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
            <summary>値を取得します。</summary>
            <param name="target">値を取得する元のターゲット。</param>
            <returns>値。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
            <summary>エラーに関する情報を提供します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>エラーを取得します。</summary>
            <value>エラー。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>エラーの原因となった元のオブジェクトを取得します。</summary>
            <value>エラーの原因となった元のオブジェクト。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>エラーの原因となったメンバーを取得します。</summary>
            <value>エラーの原因となったメンバー。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>エラーが発生した JSON ロケーションのパスを取得します。</summary>
            <value>エラーが発生した JSON ロケーションのパス。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>この <see cref="T:Newtonsoft.Json.Serialization.ErrorContext"/> を処理するかどうかを示す値を取得または設定します。</summary>
            <value>処理される場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>Error イベントのデータを提供します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>エラー イベントが発生している現在のオブジェクトを取得します。</summary>
            <value>エラー イベントが発生している現在のオブジェクト。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>エラー コンテキストを取得します。</summary>
            <value>エラー コンテキスト。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="currentObject">現在のオブジェクト。</param>
            <param name="errorContext">エラー コンテキスト。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExpressionValueProvider">
            <summary>動的メソッドを使用して <see cref="T:System.Reflection.MemberInfo"/> の値を取得して設定します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="memberInfo">メンバー情報。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
            <summary>値を設定します。</summary>
            <param name="target">値を設定するターゲット。</param>
            <param name="value">ターゲットで設定する値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
            <summary>値を取得します。</summary>
            <param name="target">値を取得する元のターゲット。</param>
            <returns>値。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IAttributeProvider">
            <summary>属性を取得するメソッドを提供します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>すべての属性のコレクションを返すか、属性がない場合は空のコレクションを返します。</summary>
            <param name="inherit">true の場合は、継承されたカスタム属性の階層チェーンを検索します。</param>
            <returns><see cref="T:System.Attribute"/> のコレクション、または空のコレクション。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>タイプで識別される属性のコレクション、または属性がない場合は空のコレクションを返します。</summary>
            <param name="attributeType">属性のタイプ。</param>
            <param name="inherit">true の場合は、継承されたカスタム属性の階層チェーンを検索します。</param>
            <returns><see cref="T:System.Attribute"/> のコレクション、または空のコレクション。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
            <summary>特定の <see cref="T:System.Type"/> の <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/> を解決するために <see cref="T:Newtonsoft.Json.JsonSerializer"/> によって使用されます。</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" /> <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>特定のタイプのコントラクトを解決します。</summary>
            <param name="type">コントラクトを解決するタイプ。</param>
            <returns>特定のタイプのコントラクト。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.NamingStrategy">
            <summary>プロパティ名と辞書キーのシリアル化方法を解決するための基本クラス。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
            <summary>辞書キーを処理するかどうかを示すフラグ。既定は <c>false</c> です。 </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
            <summary>明示的に指定されたプロパティ名 (<see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> でカスタマイズされたプロパティ名など) を処理する必要があるかどうかを示すフラグ。既定は <c>false</c> です。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>特定のプロパティ名のシリアル化された名前を取得します。</summary>
            <param name="name">初期プロパティ名。</param>
            <param name="hasSpecifiedName">プロパティに明示的に指定された名前があるかどうかを示すフラグ。</param>
            <returns>シリアル化されたプロパティ名。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
            <summary>特定の辞書キーのシリアル化されたキーを取得します。</summary>
            <param name="key">最初の辞書キー。</param>
            <returns>シリアル化された辞書キー。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>指定されたプロパティ名を解決します。</summary>
            <param name="name">解決するプロパティ名。</param>
            <returns>解決されたプロパティ名。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> によって JSON をシリアル化および逆シリアル化するときに参照を解決するために使用します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>オブジェクトへの参照を解決します。</summary>
            <param name="context">シリアル化コンテキスト。</param>
            <param name="reference">解決する参照。</param>
            <returns>このオブジェクトは、</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>指定されたオブジェクトの参照を取得します。</summary>
            <param name="context">シリアル化コンテキスト。</param>
            <param name="value">参照を取得するオブジェクト。</param>
            <returns>オブジェクトへの参照。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>指定されたオブジェクトを参照するかどうかを決定します。</summary>
            <param name="context">シリアル化コンテキスト。</param>
            <param name="value">参照をテストするオブジェクト。</param>
            <returns>指定されたオブジェクトが参照されている場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>指定されたオブジェクトへの参照を追加します。</summary>
            <param name="context">シリアル化コンテキスト。</param>
            <param name="reference">参照。</param>
            <param name="value">参照するオブジェクト。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>トレース ライターを表します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>ライターに渡されるトレース メッセージのフィルター処理に使用される <see cref="T:System.Diagnostics.TraceLevel"/> を取得します。たとえば、<code>Info</code> のフィルター レベルで <code>Verbose</code> メッセージを除外し、<code>Info</code>、<code>Warning</code>、<code>Error</code> メッセージを含めることができます。</summary>
            <value>ライターに渡すトレース メッセージをフィルター処理するために使用される <see cref="T:System.Diagnostics.TraceLevel"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>指定されたトレース レベル、メッセージ、およびオプションの例外を書き込みます。</summary>
            <param name="level">このトレースを書き込む <see cref="T:System.Diagnostics.TraceLevel"/>。</param>
            <param name="message">トレース メッセージ。</param>
            <param name="ex">トレース例外。このパラメーターはオプションです。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
            <summary>値を取得して設定するメソッドを提供します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>値を設定します。</summary>
            <param name="target">値を設定するターゲット。</param>
            <param name="value">ターゲットで設定する値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>値を取得します。</summary>
            <param name="target">値を取得する元のターゲット。</param>
            <returns>値。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> で使用される <see cref="T:System.Type"/> の契約の詳細。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>コレクション項目の <see cref="T:System.Type"/> を取得します。</summary>
            <value>コレクション項目の <see cref="T:System.Type"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>コレクションのタイプが多次元配列であるかどうかを示す値を取得します。</summary>
            <value>コレクションのタイプが多次元配列の場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.OverrideCreator">
            <summary>オブジェクトの作成に使用する関数を取得または設定します。設定すると、この関数は <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/> をオーバーライドします。</summary>
            <value>オブジェクトの作成に使用する関数。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
            <summary>作成者がコレクション値のあるパラメーターを持っているかどうかを示す値を取得します。</summary>
            <value>作成者がコレクション値のあるパラメーターを持っている場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="underlyingType">コントラクトの基になるタイプ。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> で使用される <see cref="T:System.Type"/> の契約の詳細。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>既定のコレクション項目 <see cref="T:Newtonsoft.Json.JsonConverter" /> を取得または設定します。</summary>
            <value>コンバーター。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>コレクション項目がオブジェクト参照を保持するかどうかを示す値を取得または設定します。</summary>
            <value>コレクション項目がオブジェクト参照を保持する場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>コレクション項目参照ループ処理を取得または設定します。</summary>
            <value>参照ループ処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>コレクション項目のタイプ名の処理を取得または設定します。</summary>
            <value>タイプ名の処理。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="underlyingType">コントラクトの基になるタイプ。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>シリアル化コールバック イベントを処理します。</summary>
            <param name="o">コールバック イベントを発生させたオブジェクト。</param>
            <param name="context">ストリーミング コンテキスト。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>シリアル化エラー コールバック イベントを処理します。</summary>
            <param name="o">コールバック イベントを発生させたオブジェクト。</param>
            <param name="context">ストリーミング コンテキスト。</param>
            <param name="errorContext">エラー コンテキスト。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter">
            <summary>逆シリアル化の間にオブジェクトの拡張データを設定します。</summary>
            <param name="o">拡張データを設定するオブジェクト。</param>
            <param name="key">拡張データ キー。</param>
            <param name="value">拡張データ値。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter">
            <summary>シリアル化の間にオブジェクトの拡張データを取得します。</summary>
            <param name="o">拡張データを設定するオブジェクト。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> で使用される <see cref="T:System.Type"/> の契約の詳細。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>コントラクトの基になるタイプを取得します。</summary>
            <value>コントラクトの基になるタイプ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>逆シリアル化の間に作成されたタイプを取得または設定します。</summary>
            <value>逆シリアル化の間に作成されたタイプ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>このタイプ コントラクトを参照としてシリアル化するかどうかを取得または設定します。</summary>
            <value>このタイプ コントラクトが参照としてシリアル化されるかどうか。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>このコントラクトの既定 <see cref="T:Newtonsoft.Json.JsonConverter" /> を取得または設定します。</summary>
            <value>コンバーター。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>オブジェクトの逆シリアル化の直後に呼び出されるすべてのメソッドを取得または設定します。</summary>
            <value>オブジェクトの逆シリアル化直後に呼び出されるメソッド。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>オブジェクトの逆シリアル化中に呼び出されるすべてのメソッドを取得または設定します。</summary>
            <value>オブジェクトの逆シリアル化中に呼び出されるメソッド。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>オブジェクト グラフのシリアル化後に呼び出されるすべてのメソッドを取得または設定します。</summary>
            <value>オブジェクト グラフのシリアル化後に呼び出されるメソッド。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>オブジェクトのシリアル化前に呼び出されるすべてのメソッドを取得または設定します。</summary>
            <value>オブジェクトのシリアル化前に呼び出されるメソッド。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>オブジェクトのシリアル化中にエラーがスローされたときに呼び出されるすべてのメソッドを取得または設定します。</summary>
            <value>オブジェクトのシリアル化中にエラーがスローされたときに呼び出されるメソッド。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
            <summary>オブジェクトの逆シリアル化の直後に呼び出されるメソッドを取得または設定します。</summary>
            <value>オブジェクトの逆シリアル化の直後に呼び出されるメソッド。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
            <summary>オブジェクトの逆シリアル化中に呼び出されるメソッドを取得または設定します。</summary>
            <value>オブジェクトの逆シリアル化中に呼び出されるメソッド。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
            <summary>オブジェクト グラフのシリアル化後に呼び出されるメソッドを取得または設定します。</summary>
            <value>オブジェクト グラフのシリアル化後に呼び出されるメソッド。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
            <summary>オブジェクトのシリアル化の前に呼び出されるメソッドを取得または設定します。</summary>
            <value>オブジェクトのシリアル化の前に呼び出されるメソッド。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
            <summary>オブジェクトのシリアル化中にエラーがスローされたときに呼び出されるメソッドを取得または設定します。</summary>
            <value>オブジェクトのシリアル化中にエラーがスローされたときに呼び出されるメソッド。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>オブジェクトの作成に使用する既定の作成者メソッドを取得または設定します。</summary>
            <value>オブジェクトの作成に使用される既定の作成者メソッド。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>既定の作成者が非パブリックであるかどうかを示す値を取得または設定します。</summary>
            <value>既定のオブジェクト作成者が非パブリックの場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> で使用される <see cref="T:System.Type"/> の契約の詳細。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>プロパティ名リゾルバーを取得または設定します。</summary>
            <value>プロパティ名リゾルバー。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>辞書キー リゾルバーを取得または設定します。</summary>
            <value>辞書キー リゾルバー。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>辞書キーの <see cref="T:System.Type"/> を取得します。</summary>
            <value>辞書キーの <see cref="T:System.Type"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>辞書値の <see cref="T:System.Type"/> を取得します。</summary>
            <value>辞書値の <see cref="T:System.Type"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.OverrideCreator">
            <summary>オブジェクトの作成に使用する関数を取得または設定します。設定すると、この関数は <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/> をオーバーライドします。</summary>
            <value>オブジェクトの作成に使用する関数。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
            <summary>作成者が辞書値のあるパラメーターを持っているかどうかを示す値を取得します。</summary>
            <value>作成者が辞書値のあるパラメーターを持っている場合は <c>true</c>、それ以外の場合は <c>false</c> です。 </value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="underlyingType">コントラクトの基になるタイプ。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> で使用される <see cref="T:System.Type"/> の契約の詳細。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
            <summary>オブジェクトのプロパティを取得します。</summary>
            <value>オブジェクトのプロパティ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>プロパティ名リゾルバーを取得または設定します。</summary>
            <value>プロパティ名リゾルバー。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="underlyingType">コントラクトの基になるタイプ。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> で使用される <see cref="T:System.Type"/> の契約の詳細。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>ISerializable オブジェクト コンストラクターを取得または設定します。</summary>
            <value>ISerializable オブジェクト コンストラクター。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="underlyingType">コントラクトの基になるタイプ。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> で使用される <see cref="T:System.Type"/> の契約の詳細。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="underlyingType">コントラクトの基になるタイプ。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> で使用される <see cref="T:System.Type"/> の契約の詳細。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>オブジェクト メンバーのシリアル化を取得または設定します。</summary>
            <value>メンバー オブジェクトのシリアル化。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>オブジェクトのプロパティが必要かどうかを示す値を取得または設定します。</summary>
            <value>オブジェクトのプロパティが必要かどうかを示す値。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>オブジェクトのプロパティを取得します。</summary>
            <value>オブジェクトのプロパティ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
            <summary>既定以外のコンストラクターに必要なコンストラクター パラメーターを取得します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary><see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator"/> で使用されるパラメーターを定義する <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> インスタンスのコレクションを取得します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>オブジェクトの作成に使用するオーバーライド コンストラクターを取得または設定します。これは、JsonConstructor 属性を使用してコンストラクターがマークアップされている場合に設定されます。</summary>
            <value>オーバーライド コンストラクター。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>オブジェクトの作成に使用されるパラメーター化されたコンストラクターを取得または設定します。</summary>
            <value>パラメーター化されたコンストラクター。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>オブジェクトの作成に使用する関数を取得または設定します。設定すると、この関数は <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/> をオーバーライドします。この関数は、<see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters"/> によって定義される引数のコレクションで呼び出されます。</summary>
            <value>オブジェクトの作成に使用する関数。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>拡張データ セッターを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>拡張データ ゲッターを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
            <summary>拡張データ値タイプを取得または設定します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="underlyingType">コントラクトの基になるタイプ。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> で使用される <see cref="T:System.Type"/> の契約の詳細。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="underlyingType">コントラクトの基になるタイプ。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
            <summary>JSON プロパティを .NET メンバーまたはコンストラクター パラメーターにマッピングします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>プロパティの名前を取得または設定します。</summary>
            <value>プロパティの名前。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>このプロパティを宣言したタイプを取得または設定します。</summary>
            <value>このプロパティを宣言したタイプ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>メンバーのシリアル化の順序を取得または設定します。</summary>
            <value>シリアル化の数値順序。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>基になるメンバーまたはパラメーターの名前を取得または設定します。</summary>
            <value>基になるメンバーまたはパラメーターの名前。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>シリアル化の間に <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> を取得して設定する <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/> を取得します。</summary>
            <value>シリアル化の間に <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> を取得して設定する <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.AttributeProvider">
            <summary>このプロパティの <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider"/> を取得または設定します。</summary>
            <value>このプロパティの <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider"/>。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>プロパティのタイプを取得または設定します。</summary>
            <value>プロパティのタイプ。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>プロパティの <see cref="T:Newtonsoft.Json.JsonConverter" /> を取得または設定します。これを設定すると、このコンバーターは、プロパティ タイプのコントラクト コンバーターよりも優先されます。</summary>
            <value>コンバーター。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>メンバー コンバーターを取得または設定します。</summary>
            <value>メンバー コンバーター。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> を無視するかどうかを示す値を取得または設定します。</summary>
            <value>無視する場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>この <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> が読み取り可能かどうかを示す値を取得または設定します。</summary>
            <value>読み取り可能な場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> が書き込み可能かどうかを示す値を取得または設定します。</summary>
            <value>書き込み可能な場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>この <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> にメンバー属性があるかどうかを示す値を取得または設定します。</summary>
            <value>メンバー属性がある場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>既定値を取得します。</summary>
            <value>既定値。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>この <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> が必要かどうかを示す値を取得または設定します。</summary>
            <value>この <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> が必要かどうかを示す値。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>このプロパティがオブジェクト参照を保持するかどうかを示す値を取得または設定します。</summary>
            <value>このインスタンスが参照の場合は <c>true</c>、それ以外の場合は <c>false</c> です。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>プロパティ null 値の処理を取得または設定します。</summary>
            <value>null 値の処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>プロパティ既定値の処理を取得または設定します。</summary>
            <value>既定値の処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>プロパティ参照ループ処理を取得または設定します。</summary>
            <value>参照ループ処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>プロパティ オブジェクト作成処理を取得または設定します。</summary>
            <value>オブジェクト作成処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>タイプ名の処理を取得または設定します。</summary>
            <value>タイプ名の処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>プロパティをシリアル化する必要があるかどうかを判断するために使用される述語を取得または設定します。</summary>
            <value>プロパティをシリアル化する必要があるかどうかを判断するために使用される述語。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldDeserialize">
            <summary>プロパティを逆シリアル化する必要があるかどうかを判断するために使用される述語を取得または設定します。</summary>
            <value>プロパティを逆シリアル化する必要があるかどうかを判断するために使用される述語。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>プロパティをシリアル化する必要があるかどうかを判断するために使用される述語を取得または設定します。</summary>
            <value>プロパティをシリアル化する必要があるかどうかを判断するために使用される述語。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>プロパティが逆シリアル化されたかどうかを設定するために使用されるアクションを取得または設定します。</summary>
            <value>プロパティが逆シリアル化されたかどうかを設定するために使用されるアクション。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>このインスタンスを表す <see cref="T:System.String"/> を返します。</summary>
            <returns>このインスタンスを表す <see cref="T:System.String"/>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>プロパティのコレクション項目をシリアル化するときに使用するコンバーターを取得または設定します。</summary>
            <value>コレクションの項目コンバーター。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>このプロパティのコレクション項目を参照としてシリアル化するかどうかを取得または設定します。</summary>
            <value>このプロパティのコレクション項目を参照としてシリアル化するかどうか。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>プロパティのコレクション項目をシリアル化するときに使用されるタイプ名処理を取得または設定します。</summary>
            <value>コレクションの項目タイプ名の処理。</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>プロパティのコレクション項目をシリアル化するときに使用される参照ループ処理を取得または設定します。</summary>
            <value>コレクションの項目参照ループ処理。</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>オブジェクトのコレクション。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="type">タイプ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>派生クラスに実装する場合は、指定された要素からキーを抽出します。</summary>
            <param name="item">キーを抽出する要素。</param>
            <returns>指定された要素のキー。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> オブジェクトを追加します。</summary>
            <param name="property">コレクションに追加するプロパティ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>最も一致する <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> オブジェクトを取得します。最初に propertyName の完全な大文字と小文字の一致を取得し、次に大文字と小文字を区別しない一致を取得します。</summary>
            <param name="propertyName">プロパティの名前。</param>
            <returns>見つかった場合は、一致するプロパティ。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>プロパティ名でプロパティを取得します。</summary>
            <param name="propertyName">取得するプロパティの名前。</param>
            <param name="comparisonType">プロパティ名文字列比較を入力します。</param>
            <returns>見つかった場合は、一致するプロパティ。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> で使用される <see cref="T:System.Type"/> の契約の詳細。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="underlyingType">コントラクトの基になるタイプ。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>引数で記述されている JsonConverter タイプのインスタンスを検索して作成します。</summary>
            <param name="converterType">作成する JsonConverter タイプ。</param>
            <param name="converterArgs">JsonConverter の初期化コンストラクターに渡すオプションの引数。null の場合は、既定のコンストラクターが使用されます。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>メモリに書き込むトレース ライターを表します。トレース メッセージの制限に達した場合、新しいメッセージが追加されると、古いトレース メッセージが削除されます。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>ライターに渡されるトレース メッセージのフィルター処理に使用される <see cref="T:System.Diagnostics.TraceLevel"/> を取得します。たとえば、<code>Info</code> のフィルター レベルで <code>Verbose</code> メッセージを除外し、<code>Info</code>、<code>Warning</code>、<code>Error</code> メッセージを含めることができます。</summary>
            <value>ライターに渡すトレース メッセージをフィルター処理するために使用される <see cref="T:System.Diagnostics.TraceLevel"/>。</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>指定されたトレース レベル、メッセージ、およびオプションの例外を書き込みます。</summary>
            <param name="level">このトレースを書き込む <see cref="T:System.Diagnostics.TraceLevel"/>。</param>
            <param name="message">トレース メッセージ。</param>
            <param name="ex">トレース例外。このパラメーターはオプションです。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>最新のトレース メッセージのリストを返します。</summary>
            <returns>最新のトレース メッセージのリスト。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>最新のトレース メッセージの <see cref="T:System.String"/> を返します。</summary>
            <returns>最新のトレース メッセージの <see cref="T:System.String"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>オブジェクトを構築するメソッドを表します。</summary>
            <typeparam name="T">作成するオブジェクトのタイプ。</typeparam>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>メソッドに適用する場合は、オブジェクトのシリアル化でエラーが発生したときにメソッドが呼び出されるよう指定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider">
            <summary><see cref="T:System.Type"/>、<see cref="T:System.Reflection.MemberInfo"/>、<see cref="T:System.Reflection.ParameterInfo"/>、 <see cref="T:System.Reflection.Assembly"/> から属性を取得するメソッドを提供 します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="attributeProvider">属性を取得するインスタンス。このパラメータは、<see cref="T:System.Type"/>、<see cref="T:System.Reflection.MemberInfo"/>、<see cref="T:System.Reflection.ParameterInfo"/>、または <see cref="T:System.Reflection.Assembly"/> でなくてはなりません。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>すべての属性のコレクションを返すか、属性がない場合は空のコレクションを返します。</summary>
            <param name="inherit">true の場合は、継承されたカスタム属性の階層チェーンを検索します。</param>
            <returns><see cref="T:System.Attribute"/> のコレクション、または空のコレクション。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>タイプで識別される属性のコレクション、または属性がない場合は空のコレクションを返します。</summary>
            <param name="attributeType">属性のタイプ。</param>
            <param name="inherit">true の場合は、継承されたカスタム属性の階層チェーンを検索します。</param>
            <returns><see cref="T:System.Attribute"/> のコレクション、または空のコレクション。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>リフレクションを使用して、<see cref="T:System.Reflection.MemberInfo"/> の値を取得して設定します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="memberInfo">メンバー情報。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>値を設定します。</summary>
            <param name="target">値を設定するターゲット。</param>
            <param name="value">ターゲットで設定する値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>値を取得します。</summary>
            <param name="target">値を取得する元のターゲット。</param>
            <returns>値。</returns>
        </member>
        <member name="T:Newtonsoft.Json.StringEscapeHandling">
            <summary>JSON テキストを書き込む際に文字列をエスケープする方法を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>制御文字 (newline など) のみがエスケープされます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>ASCII 以外のすべての文字と制御文字 (newline など) はエスケープされます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>HTML (&lt;、&gt;、&amp;、&apos;、&quot;) および制御文字 (newlineなど) はエスケープされます。</summary>
        </member>
        <member name="T:Newtonsoft.Json.TypeNameHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> のタイプ名処理オプションを指定します。</summary>
            <remarks><see cref="T:Newtonsoft.Json.TypeNameHandling"/> アプリケーションが外部ソースから JSON を逆シリアル化する場合は、注意して使用する必要があります。<c>TypeNameHandling.None</c>以外の値を使用して逆シリアル化する場合は、着信タイプをカスタム <see cref="T:System.Runtime.Serialization.SerializationBinder"/> で検証する必要があります。</remarks>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.None">
            <summary>タイプをシリアル化する場合は、.NET タイプ名を含めないでください。</summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>JSON オブジェクト構造にシリアル化する場合は、.NET タイプ名を含めます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>JSON 配列構造にシリアル化する場合は、.NET タイプ名を含めます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.All">
            <summary>シリアル化の際は、常に .NET タイプ名を含めます。</summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>シリアル化するオブジェクトのタイプが宣言されたタイプと同じでない場合は、.NET タイプ名を含めます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>コレクションが null か空かを決定します。</summary>
            <param name="collection">コレクション。</param>
            <returns>コレクションが null または空の場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>指定されたコレクションの要素を、指定された汎用 IList に追加します。</summary>
            <param name="initial">追加するリスト。</param>
            <param name="collection">追加する要素のコレクション。</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>値を指定されたタイプに変換します。値を変換できない場合は、指定されたタイプに値を割り当てることができるかどうかチェックします。</summary>
            <param name="initialValue">変換する値。</param>
            <param name="culture">変換時に使用するカルチャ。</param>
            <param name="targetType">値を変換またはキャストするタイプ。</param>
            <returns>変換されたタイプ。変換に失敗した場合、ターゲット タイプに割り当てられるのであれば、初期値が返されます。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>結果を返す Dynamic で特定のメソッドを呼び出す MetaObject を生成するヘルパー メソッド</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>Dynamic で特定のメソッドを呼び出すものの、結果の引数の 1 つを使用する MetaObject を生成するヘルパー メソッド。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>Dynamic で特定のメソッドを呼び出すものの、結果の引数の 1 つを使用する MetaObject を生成するヘルパー メソッド。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>タイプの制限とマージされた現在の制限を含む Restrictions オブジェクトを返します。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>Enum タイプの名前と値の辞書を取得します。</summary>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>Enum タイプの名前と値の辞書を取得します。</summary>
            <param name="enumType">名前と値を取得する Enum タイプ。</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>型指定されたコレクションの項目のタイプを取得します。</summary>
            <param name="type">タイプ。</param>
            <returns>型指定されたコレクションの項目のタイプ。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>メンバーの基になるタイプを取得します。</summary>
            <param name="member">メンバー。</param>
            <returns>メンバーの基になるタイプ。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>メンバーがインデックス付きプロパティであるかどうかを判定します。</summary>
            <param name="member">メンバー。</param>
            <returns>メンバーがインデックス付きプロパティの場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>プロパティがインデックス付きプロパティであるかどうかを判定します。</summary>
            <param name="property">プロパティ。</param>
            <returns>プロパティがインデックス付きプロパティの場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>オブジェクトに対するメンバーの値を取得します。</summary>
            <param name="member">メンバー。</param>
            <param name="target">ターゲット オブジェクト。</param>
            <returns>オブジェクトに対するメンバーの値。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>ターゲット オブジェクトにメンバーの値を設定します。</summary>
            <param name="member">メンバー。</param>
            <param name="target">ターゲット。</param>
            <param name="value">値。</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>指定された MemberInfo を読み取ることができるかどうか判定します。</summary>
            <param name="member">読み取り可能かどうかを判断する MemberInfo。</param>/// <param name="nonPublic"><c>true</c> に設定すると、メンバーを非公開にできます。 </param>
            <returns>指定された MemberInfo を読み取ることができる場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>指定された MemberInfo を設定できるかどうかを判定します。</summary>
            <param name="member">設定できるかどうかを判定する MemberInfo。</param>
            <param name="nonPublic"><c>true</c> に設定すると、メンバーを非パブリックに設定できます。 </param>
            <param name="canSetReadOnly"><c>true</c> に設定すると、読み取り専用の場合はメンバーを設定できます。 </param>
            <returns>指定された MemberInfo を設定できる場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
            <summary>文字列を構築します。StringBuilder とは異なり、このクラスでは内部バッファーを再利用できます。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>文字列がすべて空白であるかどうかを判定します。空の文字列は false を返します。</summary>
            <param name="s">すべて空白であるかどうかをテストする文字列。</param>
            <returns>文字列がすべて空白の場合は <c>true</c>、それ以外の場合は <c>false</c> です。  </returns>
        </member>
        <member name="T:Newtonsoft.Json.WriteState">
            <summary><see cref="T:Newtonsoft.Json.JsonWriter"/> の状態を指定します。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Error">
            <summary>例外がスローされ、<see cref="T:Newtonsoft.Json.JsonWriter"/> が無効な状態のままになっています。<see cref="T:Newtonsoft.Json.JsonWriter"/> を <c>Closed</c> 状態にする <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> メソッドを呼び出すこともできます。  その他の <see cref="T:Newtonsoft.Json.JsonWriter"/> メソッドの呼び出しでは、<see cref="T:System.InvalidOperationException"/> がスローされます。 </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Closed">
            <summary><see cref="M:Newtonsoft.Json.JsonWriter.Close"/> メソッドが呼び出されました。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Object">
            <summary>オブジェクトが書き込まれています。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Array">
            <summary>配列が書き込まれています。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Constructor">
            <summary>コンストラクターが書き込まれています。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Property">
            <summary>プロパティが書き込まれています。</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Start">
            <summary>書き込みメソッドは呼び出されていません。</summary>
        </member>
    </members>
</doc>