<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>GalaSoft.MvvmLight.Platform</name>
    </assembly>
    <members>
        <member name="T:GalaSoft.MvvmLight.CommandWpf.RelayCommand">
            <summary>これは、デリゲートを呼び出すことによって、その機能を他のオブジェクトに中継することを唯一の目的とするコマンドです。CanExecute メソッドの規定の戻り値は &apos;true&apos; です。このクラスでは、Execute および CanExecute コールバック メソッドでコマンド パラメーターを受け入れることができません。</summary>
            <remarks>WPF4.5 以上でこのクラスを使用している場合は、GalaSoft.MvvmLight.CommandWpf 名前空間 (GalaSoft.MvvmLight.Command の代わりに) を使用する必要があります。これにより、CanExecute デリゲートに基づいて制御の自動有効化/無効化を処理する CommandManager クラスが有効化 (または復元) されます。</remarks>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.#ctor(System.Action)">
            <summary>常に実行できる、RelayCommand クラスの新しいインスタンスを初期化します。</summary>
            <param name="execute">実行ロジックです。重要: WeakActions を使用しているため、現時点ではクロージャはサポートされていません (http://stackoverflow.com/questions/25730530/参照)。</param>
            <exception cref="T:System.ArgumentNullException">実行引数が null の場合。</exception>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>RelayCommand クラスの新しいインスタンスを初期化します。</summary>
            <param name="execute">実行ロジックです。重要: WeakActions を使用しているため、現時点ではクロージャはサポートされていません (http://stackoverflow.com/questions/25730530/参照)。</param>
            <param name="canExecute">実行ステータス ロジックです。</param>
            <exception cref="T:System.ArgumentNullException">実行引数が null の場合。重要: WeakActions を使用しているため、現時点ではクロージャはサポートされていません (http://stackoverflow.com/questions/25730530/参照)。</exception>
        </member>
        <member name="E:GalaSoft.MvvmLight.CommandWpf.RelayCommand.CanExecuteChanged">
            <summary>コマンドを実行するかどうかに影響する変更が発生した場合に発生します。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.RaiseCanExecuteChanged">
            <summary><see cref="E:GalaSoft.MvvmLight.CommandWpf.RelayCommand.CanExecuteChanged" />イベントを発生させます。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.CanExecute(System.Object)">
            <summary>コマンドを、現在の状態で実行できるかどうかを決定するメソッドを定義します。</summary>
            <param name="parameter">このパラメーターは常に無視されます。</param>
            <returns>このコマンドを実行できる場合は true、それ以外の場合は false となります。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.Execute(System.Object)">
            <summary>コマンドが呼び出される際のメソッドを定義します。</summary>
            <param name="parameter">このパラメーターは常に無視されます。</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1">
            <summary>これは、デリゲートを呼び出すことによって、その機能を他のオブジェクトに中継することを唯一の目的とする汎用コマンドです。CanExecute メソッドの規定の戻り値は &apos;true&apos; です。このクラスを使用すると、Execute および CanExecute コールバック メソッドでコマンド パラメーターを受け入れることができます。</summary>
            <typeparam name="T">コマンド パラメーターのタイプです。</typeparam>
            <remarks>WPF4.5 以上でこのクラスを使用している場合は、GalaSoft.MvvmLight.CommandWpf 名前空間 (GalaSoft.MvvmLight.Command の代わりに) を使用する必要があります。これにより、CanExecute デリゲートに基づいて制御の自動有効化/無効化を処理する CommandManager クラスが有効化 (または復元) されます。</remarks>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>常に実行できる RelayCommand クラスの新しいインスタンスを初期化します。</summary>
            <param name="execute">実行ロジックです。重要: WeakActions を使用しているため、現時点ではクロージャはサポートされていません (http://stackoverflow.com/questions/25730530/参照)。</param>
            <exception cref="T:System.ArgumentNullException">実行引数が null の場合。</exception>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>RelayCommand クラスの新しいインスタンスを初期化します。</summary>
            <param name="execute">実行ロジックです。重要: WeakActions を使用しているため、現時点ではクロージャはサポートされていません (http://stackoverflow.com/questions/25730530/参照)。</param>
            <param name="canExecute">実行ステータス ロジックです。重要: WeakActions を使用しているため、現時点ではクロージャはサポートされていません (http://stackoverflow.com/questions/25730530/参照)。</param>
            <exception cref="T:System.ArgumentNullException">実行引数が null の場合。</exception>
        </member>
        <member name="E:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.CanExecuteChanged">
            <summary>コマンドを実行するかどうかに影響する変更が発生した場合に発生します。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.RaiseCanExecuteChanged">
            <summary><see cref="E:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.CanExecuteChanged" />イベントを発生させます。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.CanExecute(System.Object)">
            <summary>コマンドを、現在の状態で実行できるかどうかを決定するメソッドを定義します。</summary>
            <param name="parameter">コマンドで使用されるデータです。コマンドがデータの引き渡しを要求しない場合、このオブジェクトは null 参照に設定できます。</param>
            <returns>このコマンドを実行できる場合は true、それ以外の場合はfalse となります。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.Execute(System.Object)">
            <summary>コマンドが呼び出される際のメソッドを定義します。</summary>
            <param name="parameter">コマンドで使用されるデータです。コマンドがデータの引き渡しを要求しない場合、このオブジェクトは null 参照に設定できます。</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Command.EventToCommand">
            <summary>この <see cref="T:System.Windows.Interactivity.TriggerAction`1" /> は、FrameworkElement 上の任意のイベントを <see cref="T:System.Windows.Input.ICommand" /> にバインドするために使用できます。通常、この要素は、アタッチされた要素を ViewModel にあるコマンドに接続するために XAML で使用されます。このトリガーは、FrameworkElement、または FrameworkElement から派生したクラスにのみアタッチできます。<para>発生したイベントの EventArgs にアクセスするには、RelayCommand &lt;EventArgs&gt; を使用し、CommandParameter と CommandParameterValue は空のままにします。</para></summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterProperty">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter" />依存関係プロパティを識別します。</summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.CommandProperty">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" />依存関係プロパティを識別します。</summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabledProperty">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled" />依存関係プロパティを識別します。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.Command">
            <summary>このトリガーがバインドされている ICommand を取得または設定します。これは DependencyProperty です。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter">
            <summary>このトリガーにアタッチされた <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" /> に渡される、オブジェクトを取得または設定します。これは DependencyProperty です。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterValue">
            <summary>このトリガーにアタッチされた <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" /> に渡される、オブジェクトを取得または設定します。このプロパティは、Silverlight バージョンとの互換性のためにここにあります。これは DependencyProperty ではありません。データバインディングには、 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter" /> プロパティを使用します。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" />プロパティの CanExecuteChanged イベントが発生した場合、添付された要素を無効にする必要があるかどうかを示す値を、取得または設定します。このプロパティが true で、コマンドの CanExecute メソッドが false を返す場合、要素は無効になります。このプロパティが false の場合、コマンドの CanExecute メソッドが変更されても、要素は無効になりません。これは DependencyProperty です。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabledValue">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" />プロパティの CanExecuteChanged イベントが発生した場合、添付された要素を無効にする必要があるかどうかを示す値を、取得または設定します。このプロパティが true で、コマンドの CanExecute メソッドが false を返す場合、要素は無効になります。このプロパティは、Silverlight バージョンとの互換性のためにここにあります。これは DependencyProperty ではありません。データバインディングには、 <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled" /> プロパティを使用します。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.OnAttached">
            <summary>このトリガーが FrameworkElement にアタッチされた場合に呼び出されます。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.GetAssociatedObject">
            <summary>このメソッドは、Silverlight バージョンとの互換性のためにここにあります。</summary>
            <returns>このトリガーがアタッチされる FrameworkElement です。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.GetCommand">
            <summary>この方法は、Silverlight 3 バージョンとの互換性のためにここにあります。</summary>
            <returns>このトリガーが呼び出された際に実行する必要があるコマンドです。</returns>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand">
            <summary>このアクションをトリガーしたイベントの EventArgs を、バインドされた RelayCommand に渡すかどうかを指定します。これが true の場合、コマンドは対応する型の引数 (たとえば、 RelayCommand&lt;MouseButtonEventArgs&gt;) を受け入れる必要があります。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverter">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand"/>を使用する場合に、EventArgs の変換に使用するコンバーターを、取得または設定します。PassEventArgsToCommand が false の場合、このプロパティは使用されません。</summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameterPropertyName">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameter" />依存関係プロパティの名前です。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameter">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand"/>を使用する場合、EventArgs の変換に使用するコンバーターのパラメーターを取得または設定します。PassEventArgsToCommand が false の場合、このプロパティは使用されません。これは依存関係プロパティです。</summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameterProperty">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameter" />依存関係プロパティを識別します。</summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommandPropertyName">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommand" />依存関係プロパティの名前です。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommand">
            <summary>アタッチされた制御が無効の場合でも、コマンドを呼び出す必要があるかどうかを示す値を取得または設定します。これは依存関係プロパティです。</summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommandProperty">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommand" />依存関係プロパティを識別します。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.Invoke">
            <summary>このトリガーを、EventArgs なしでプログラムで呼び出す簡単な方法を提供します。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.Invoke(System.Object)">
            <summary>トリガーを実行します。<para>発生したイベントの EventArgs にアクセスするには、RelayCommand &lt;EventArgs&gt; を使用し、CommandParameter と CommandParameterValue は空のままにします。</para></summary>
            <param name="parameter">発生したイベントの EventArgs です。</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Command.IEventArgsConverter">
            <summary><see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand"/>プロパティが true の場合、<see cref="T:GalaSoft.MvvmLight.Command.EventToCommand"/> クラス内の EventArgs の変換に使用されるコンバーターの定義です。  このクラスのインスタンスを、 EventToCommand インスタンスの<see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverter"/>プロパティに設定します。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.IEventArgsConverter.Convert(System.Object,System.Object)">
            <summary>EventArgs インスタンスの変換に使用されるメソッドです。</summary>
            <param name="value">EventToCommand インスタンスが処理しているイベントによって渡される EventArgs のインスタンスです。</param>
            <param name="parameter">変換に使用される、任意のパラメーターです。 この値を設定するには、<see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameter"/>プロパティを使用します。これは null とすることができます。</param>
            <returns>変換された値です。</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.Threading.DispatcherHelper">
            <summary>UI スレッド上のディスパッチャー操作用ヘルパー クラスです。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher">
            <summary>UI スレッドのディスパッチャーへの参照を、<see cref="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Initialize" />メソッドが UI スレッドで呼び出された後取得します。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.CheckBeginInvokeOnUI(System.Action)">
            <summary>UI スレッド上でアクションを実行します。このメソッドが UI スレッドから呼び出されると、アクションはすぐに実行されます。メソッドが別のスレッドから呼び出されると、アクションは UI スレッドのディスパッチャーでエンキューされ、非同期的に実行されます。<para>UI スレッドに対するその他の操作については、 <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher" />プロパティによって、UI スレッドのディスパッチャーへの参照を取得できます。
</para></summary>
            <param name="action">UI スレッドで実行されるアクションです。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.RunAsync(System.Action)">
            <summary>UI スレッドでアクションを非同期に呼び出します。</summary>
            <param name="action">実行する必要があるアクションです。</param>
            <returns>BeginInvoke が呼び出されると、その直後に返されるオブジェクトです。イベント キューの中で実行保留中であるため、デリゲートとの対話に使用できます。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Initialize">
            <summary>このメソッドは、 <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher" />プロパティが初期化されていることを確認するために、UI スレッドで 1 回呼び出す必要があります。<para>Silverlight アプリケーションで、MainPage の構築後に、 Application_Startup イベント ハンドラーでこのメソッドを呼び出します。</para><para>WPF では、静的 App() コンストラクター上でこのメソッドを呼び出します。</para></summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Reset">
            <summary>を削除してクラスをリセットします。 <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher"/></summary>
        </member>
    </members>
</doc>