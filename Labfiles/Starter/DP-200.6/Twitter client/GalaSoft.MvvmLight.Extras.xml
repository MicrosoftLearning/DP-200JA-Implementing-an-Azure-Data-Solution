<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>GalaSoft.MvvmLight.Extras</name>
    </assembly>
    <members>
        <member name="T:GalaSoft.MvvmLight.Ioc.ISimpleIoc">
            <summary>これは、インスタンスの登録と解決に必要な基本的な機能を備えた非常にシンプルな IOC コンテナーです。必要に応じて、このクラスを IServiceLocator インターフェイスを実装する別のより精巧な IOC コンテナーに置き換えることが可能です。このクラスのインスピレーションは https://gist.github.com/716137 ですが、追加機能によって拡張されています。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.ContainsCreated``1">
            <summary>指定されたクラスの、少なくとも 1 つのインスタンスが、コンテナー内に既に作成されているかどうかを確認します。</summary>
            <typeparam name="TClass">クエリされるクラス。</typeparam>
            <returns>クラスのインスタンスが既に作成されている場合は True、それ以外の場合は false となります。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.ContainsCreated``1(System.String)">
            <summary>指定されたキーを有するインスタンスが、コンテナー内の指定されたクラスに対して既に作成されているかどうかを確認します。</summary>
            <typeparam name="TClass">クエリされるクラス。</typeparam>
            <param name="key">クエリされたキー。</param>
            <returns>指定されたキーを有するインスタンスが、既に指定されたクラスに登録されている場合は true、それ以外の場合は false となります。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.IsRegistered``1">
            <summary>指定されたタイプ T が既に登録されているかどうかを示す値を取得します。</summary>
            <typeparam name="T">メソッドがチェックするタイプです。</typeparam>
            <returns>タイプが登録されている場合は true、それ以外の場合は false となります。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.IsRegistered``1(System.String)">
            <summary>指定されたタイプ T と キーが既に登録されているかどうかを示す値を取得します。</summary>
            <typeparam name="T">メソッドがチェックするタイプです。</typeparam>
            <param name="key">メソッドがチェックするキーです。</param>
            <returns>タイプとキーが登録されている場合は true、それ以外の場合は false となります。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``2">
            <summary>指定されたインターフェイスに指定されたタイプを登録します。</summary>
            <typeparam name="TInterface">これは、インスタンスが解決されるインターフェイスです。</typeparam>
            <typeparam name="TClass">これはインスタンスの作成に使用する必要があるタイプです。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``2(System.Boolean)">
            <summary>インスタンスを即時に作成する可能性のある、指定されたインターフェイスに対して、指定されたタイプを登録します。</summary>
            <typeparam name="TInterface">これは、インスタンスが解決されるインターフェイスです。</typeparam>
            <typeparam name="TClass">これはインスタンスの作成に使用する必要があるタイプです。</typeparam>
            <param name="createInstanceImmediately">true の場合、指定されたクラスの、既定のインスタンスが強制的に作成されます。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1">
            <summary>指定されたタイプを登録します。</summary>
            <typeparam name="TClass">これはインスタンスの作成に使用する必要があるタイプです。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Boolean)">
            <summary>インスタンスを即時作成する可能性のある指定されたタイプを登録します。</summary>
            <typeparam name="TClass">これはインスタンスの作成に使用する必要があるタイプです。</typeparam>
            <param name="createInstanceImmediately">true の場合、指定されたクラスの、既定のインスタンスが強制的に作成されます。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Func{``0})">
            <summary>指定されたタイプの指定されたインスタンスを登録します。</summary>
            <typeparam name="TClass">登録中のタイプです。</typeparam>
            <param name="factory">ファクトリ メソッドは、指定されたタイプが解決されたときに返さなければならないインスタンスを作成できます。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Func{``0},System.Boolean)">
            <summary>インスタンスを即時に作成する可能性のある指定されたタイプに対して、指定されたインスタンスを登録します。</summary>
            <typeparam name="TClass">登録中のタイプです。</typeparam>
            <param name="factory">ファクトリ メソッドは、指定されたタイプが解決されたときに返さなければならないインスタンスを作成できます。</param>
            <param name="createInstanceImmediately">true の場合、指定されたクラスの、既定のインスタンスが強制的に作成されます。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Func{``0},System.String)">
            <summary>指定されたタイプと指定されたキーに対して、指定されたインスタンスを登録します。</summary>
            <typeparam name="TClass">登録中のタイプです。</typeparam>
            <param name="factory">ファクトリ メソッドは、指定されたタイプが解決されたときに返さなければならないインスタンスを作成できます。</param>
            <param name="key">これは、指定されたインスタンスが登録されるキーです。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Func{``0},System.String,System.Boolean)">
            <summary>インスタンスを即時に作成する可能性のある指定されたタイプと指定されたキーに対して、指定されたインスタンスを登録します。</summary>
            <typeparam name="TClass">登録中のタイプです。</typeparam>
            <param name="factory">ファクトリ メソッドは、指定されたタイプが解決されたときに返さなければならないインスタンスを作成できます。</param>
            <param name="key">これは、指定されたインスタンスが登録されるキーです。</param>
            <param name="createInstanceImmediately">true の場合、指定されたクラスの、既定のインスタンスが強制的に作成されます。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Reset">
            <summary>インスタンスを元の状態へリセットします。これにより、すべての登録が削除されます。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Unregister``1">
            <summary>キャッシュからクラス登録を解除し、以前に作成したすべてのインスタンスを削除します。</summary>
            <typeparam name="TClass">削除する必要のあるクラス。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Unregister``1(``0)">
            <summary>指定したインスタンスをキャッシュから削除します。クラス自体は登録されたまま残され、他のインスタンスの作成に使用できます。</summary>
            <typeparam name="TClass">削除するインスタンスのタイプです。</typeparam>
            <param name="instance">削除する必要のあるインスタンスです。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Unregister``1(System.String)">
            <summary>指定したキーに対応するインスタンスを、キャッシュから削除します。クラス自体は登録されたまま残され、他のインスタンスの作成に使用できます。</summary>
            <typeparam name="TClass">削除するインスタンスのタイプです。</typeparam>
            <param name="key">削除する必要のあるインスタンスに対応するキーです。</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Ioc.PreferredConstructorAttribute">
            <summary>SimpleIoc コンテナーで使用する場合、GetInstance が呼び出された際にインスタンス化するために、どのコンストラクターを使用する必要があるか指定します。クラスにコンストラクターが 1 つしかない場合、この属性は必要ありません。</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Ioc.SimpleIoc">
            <summary>これは、インスタンスの登録と解決に必要な基本的な機能を備えた非常にシンプルな IOC コンテナーです。必要に応じて、このクラスを IServiceLocator インターフェイスを実装する別のより精巧な IOC コンテナーに置き換えることが可能です。このクラスのインスピレーションは https://gist.github.com/716137 ですが、追加機能によって拡張されています。</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Ioc.SimpleIoc.Default">
            <summary>このクラスの既定のインスタンスです。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.ContainsCreated``1">
            <summary>指定されたクラスの、少なくとも 1 つのインスタンスが、コンテナー内に既に作成されているかどうかを確認します。</summary>
            <typeparam name="TClass">クエリされるクラス。</typeparam>
            <returns>クラスのインスタンスが既に作成されている場合は True、それ以外の場合は false となります。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.ContainsCreated``1(System.String)">
            <summary>指定されたキーを有するインスタンスが、コンテナー内の指定されたクラスに対して既に作成されているかどうかを確認します。</summary>
            <typeparam name="TClass">クエリされるクラス。</typeparam>
            <param name="key">クエリされたキー。</param>
            <returns>指定されたキーを有するインスタンスが既に指定されたクラスに登録されている場合は true、それ以外の場合は false となります。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.IsRegistered``1">
            <summary>指定されたタイプ T が既に登録されているかどうかを示す値を取得します。</summary>
            <typeparam name="T">メソッドがチェックするタイプです。</typeparam>
            <returns>タイプが登録されている場合は true、それ以外の場合は false となります。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.IsRegistered``1(System.String)">
            <summary>指定されたタイプ T と キーが既に登録されているかどうかを示す値を取得します。</summary>
            <typeparam name="T">メソッドがチェックするタイプです。</typeparam>
            <param name="key">メソッドがチェックするキーです。</param>
            <returns>タイプとキーが登録されている場合は true、それ以外の場合は false となります。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``2">
            <summary>指定されたインターフェイスに指定されたタイプを登録します。</summary>
            <typeparam name="TInterface">これは、インスタンスが解決されるインターフェイスです。</typeparam>
            <typeparam name="TClass">これはインスタンスの作成に使用する必要があるタイプです。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``2(System.Boolean)">
            <summary>インスタンスを即時に作成する可能性のある、指定されたインターフェイスに対して、指定されたタイプを登録します。</summary>
            <typeparam name="TInterface">これは、インスタンスが解決されるインターフェイスです。</typeparam>
            <typeparam name="TClass">これはインスタンスの作成に使用する必要があるタイプです。</typeparam>
            <param name="createInstanceImmediately">true の場合、指定されたクラスの、既定のインスタンスが強制的に作成されます。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1">
            <summary>指定されたタイプを登録します。</summary>
            <typeparam name="TClass">これはインスタンスの作成に使用する必要があるタイプです。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Boolean)">
            <summary>インスタンスを即時作成する可能性のある指定されたタイプを登録します。</summary>
            <typeparam name="TClass">これはインスタンスの作成に使用する必要があるタイプです。</typeparam>
            <param name="createInstanceImmediately">true の場合、指定されたクラスの、既定のインスタンスが強制的に作成されます。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0})">
            <summary>指定されたタイプの指定されたインスタンスを登録します。</summary>
            <typeparam name="TClass">登録中のタイプです。</typeparam>
            <param name="factory">ファクトリ メソッドは、指定されたタイプが解決されたときに返さなければならないインスタンスを作成できます。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0},System.Boolean)">
            <summary>インスタンスを即時に作成する可能性のある指定されたタイプに対して、指定されたインスタンスを登録します。</summary>
            <typeparam name="TClass">登録中のタイプです。</typeparam>
            <param name="factory">ファクトリ メソッドは、指定されたタイプが解決されたときに返さなければならないインスタンスを作成できます。</param>
            <param name="createInstanceImmediately">true の場合、指定されたクラスの、既定のインスタンスが強制的に作成されます。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0},System.String)">
            <summary>指定されたタイプと指定されたキーに対して、指定されたインスタンスを登録します。</summary>
            <typeparam name="TClass">登録中のタイプです。</typeparam>
            <param name="factory">ファクトリ メソッドは、指定されたタイプが解決されたときに返さなければならないインスタンスを作成できます。</param>
            <param name="key">これは、指定されたインスタンスが登録されるキーです。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0},System.String,System.Boolean)">
            <summary>インスタンスを即時に作成する可能性のある指定されたタイプと指定されたキーに対して、指定されたインスタンスを登録します。</summary>
            <typeparam name="TClass">登録中のタイプです。</typeparam>
            <param name="factory">ファクトリ メソッドは、指定されたタイプが解決されたときに返さなければならないインスタンスを作成できます。</param>
            <param name="key">これは、指定されたインスタンスが登録されるキーです。</param>
            <param name="createInstanceImmediately">true の場合、指定されたクラスの、既定のインスタンスが強制的に作成されます。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Reset">
            <summary>インスタンスを元の状態へリセットします。これにより、すべての登録が削除されます。</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1">
            <summary>キャッシュからクラスの登録を解除し、以前に作成したすべてのインスタンスを削除します。</summary>
            <typeparam name="TClass">削除する必要のあるクラス。</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1(``0)">
            <summary>指定したインスタンスをキャッシュから削除します。クラス自体は登録されたまま残され、他のインスタンスの作成に使用できます。</summary>
            <typeparam name="TClass">削除するインスタンスのタイプです。</typeparam>
            <param name="instance">削除する必要のあるインスタンスです。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1(System.String)">
            <summary>指定したキーに対応するインスタンスを、キャッシュから削除します。クラス自体は登録されたまま残され、他のインスタンスの作成に使用できます。</summary>
            <typeparam name="TClass">削除するインスタンスのタイプです。</typeparam>
            <param name="key">削除する必要のあるインスタンスに対応するキーです。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllCreatedInstances(System.Type)">
            <summary>キャッシュで使用可能な、指定されたタイプの、作成されたすべてのインスタンスを取得する方法を提供します。クラスまたはファクトリを登録しても、対応するインスタンスは自動的に作成されません。インスタンスを作成するには、クラスまたはファクトリを、createInstanceImmediately を true に設定して登録するか、または GetAllCreatedInstances を呼び出す前に GetInstance メソッドを呼び出します。または、登録されているすべてのクラスの既定のインスタンスを自動作成する、GetAllInstances メソッドを使用します。</summary>
            <param name="serviceType">すべてのインスタンスを返す必要があるクラスです。</param>
            <returns>指定されたタイプの、既に作成されたすべてのインスタンスです。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllCreatedInstances``1">
            <summary>キャッシュで使用可能な、指定されたタイプの、作成されたすべてのインスタンスを取得する方法を提供します。クラスまたはファクトリを登録しても、対応するインスタンスは自動的に作成されません。インスタンスを作成するには、クラスまたはファクトリを、createInstanceImmediately を true に設定して登録するか、または GetAllCreatedInstances を呼び出す前に GetInstance メソッドを呼び出します。または、登録されているすべてのクラスの既定のインスタンスを自動作成する、GetAllInstances メソッドを使用します。</summary>
            <typeparam name="TService">すべてのインスタンスを返す必要があるクラスです。</typeparam>
            <returns>指定されたタイプの、既に作成されたすべてのインスタンスです。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetService(System.Type)">
            <summary>指定されたタイプのサービス オブジェクトを取得します。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">タイプ serviceType が、このメソッドを呼び出す前に登録されていない場合。</exception>
            <returns>タイプ <paramref name="serviceType" /> のサービス オブジェクトです。</returns>
            <param name="serviceType">取得するサービス オブジェクトのタイプを指定するオブジェクトです。</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllInstances(System.Type)">
            <summary>キャッシュで使用可能な、指定されたタイプの、作成されたすべてのインスタンスを取得する方法を提供します。このメソッドを呼び出すと、登録されているすべてのクラスの既定のインスタンスが自動的に作成されます。</summary>
            <param name="serviceType">すべてのインスタンスを返す必要があるクラスです。</param>
            <returns>指定されたタイプのすべてのインスタンスです。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllInstances``1">
            <summary>キャッシュで使用可能な、指定されたタイプの、作成されたすべてのインスタンスを取得する方法を提供します。このメソッドを呼び出すと、登録されているすべてのクラスの既定のインスタンスが自動的に作成されます。</summary>
            <typeparam name="TService">すべてのインスタンスを返す必要があるクラスです。</typeparam>
            <returns>指定されたタイプのすべてのインスタンスです。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance(System.Type)">
            <summary>指定されたタイプのインスタンスを取得する方法を提供します。これまでにインスタンス化されたインスタンスがない場合は、新しいインスタンスが作成されます。インスタンスが既に作成されている場合は、同じインスタンスが返されます。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">タイプ serviceType が、このメソッドを呼び出す前に登録されていない場合。</exception>
            <param name="serviceType">インスタンスを返す必要があるクラスです。</param>
            <returns>指定されたタイプのインスタンスです。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstanceWithoutCaching(System.Type)">
            <summary>指定されたタイプのインスタンスを取得する方法を提供します。このメソッドは常に新しいインスタンスを返し、IOC コンテナーにキャッシュしません。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">タイプ serviceType が、このメソッドを呼び出す前に登録されていない場合。</exception>
            <param name="serviceType">インスタンスを返す必要があるクラスです。</param>
            <returns>指定されたタイプのインスタンスです。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance(System.Type,System.String)">
            <summary>指定されたキーに対応する、指定されたタイプのインスタンスを取得する方法を提供します。これまでに、このキーを使用してインスタンス化されたインスタンスがない場合は、新しいインスタンスが作成されます。同じキーを使用してインスタンスが既に作成されている場合は、同じインスタンスが返されます。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">タイプ serviceType が、このメソッドを呼び出す前に登録されていない場合。</exception>
            <param name="serviceType">インスタンスを返す必要があるクラスです。</param>
            <param name="key">このインスタンスを一意に識別するキーです。</param>
            <returns>指定されたタイプおよびキーに対応するインスタンスです。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstanceWithoutCaching(System.Type,System.String)">
            <summary>指定されたタイプのインスタンスを取得する方法を提供します。このメソッドは常に新しいインスタンスを返し、IOC コンテナーにキャッシュしません。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">タイプ serviceType が、このメソッドを呼び出す前に登録されていない場合。</exception>
            <param name="serviceType">インスタンスを返す必要があるクラスです。</param>
            <param name="key">このインスタンスを一意に識別するキーです。</param>
            <returns>指定されたタイプおよびキーに対応するインスタンスです。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance``1">
            <summary>指定されたタイプのインスタンスを取得する方法を提供します。これまでにインスタンス化されたインスタンスがない場合は、新しいインスタンスが作成されます。インスタンスが既に作成されている場合は、同じインスタンスが返されます。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">タイプ TService が、このメソッドを呼び出す前に登録されていない場合。</exception>
            <typeparam name="TService">インスタンスを返す必要があるクラスです。</typeparam>
            <returns>指定されたタイプのインスタンスです。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstanceWithoutCaching``1">
            <summary>指定されたタイプのインスタンスを取得する方法を提供します。このメソッドは常に新しいインスタンスを返し、IOC コンテナーにキャッシュしません。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">タイプ TService が、このメソッドを呼び出す前に登録されていない場合。</exception>
            <typeparam name="TService">インスタンスを返す必要があるクラスです。</typeparam>
            <returns>指定されたタイプのインスタンスです。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance``1(System.String)">
            <summary>指定されたキーに対応する、指定されたタイプのインスタンスを取得する方法を提供します。これまでに、このキーを使用してインスタンス化されたインスタンスがない場合は、新しいインスタンスが作成されます。同じキーを使用してインスタンスが既に作成されている場合は、同じインスタンスが返されます。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">タイプ TService が、このメソッドを呼び出す前に登録されていない場合。</exception>
            <typeparam name="TService">インスタンスを返す必要があるクラスです。</typeparam>
            <param name="key">このインスタンスを一意に識別するキーです。</param>
            <returns>指定されたタイプおよびキーに対応するインスタンスです。</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstanceWithoutCaching``1(System.String)">
            <summary>指定されたタイプのインスタンスを取得する方法を提供します。このメソッドは常に新しいインスタンスを返し、IOC コンテナーにキャッシュしません。</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">タイプ TService が、このメソッドを呼び出す前に登録されていない場合。</exception>
            <typeparam name="TService">インスタンスを返す必要があるクラスです。</typeparam>
            <param name="key">このインスタンスを一意に識別するキーです。</param>
            <returns>指定されたタイプおよびキーに対応するインスタンスです。</returns>
        </member>
    </members>
</doc>